{"prompt": "Please complete the code given below. \nusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing Server.Commands;\nusing Server.Engines.PartySystem;\nusing Server.Factions;\nusing Server.Gumps;\nusing Server.Items;\nusing Server.Mobiles;\nusing Server.Network;\nusing Server.Spells;\nusing Server.Spells.Bushido;\nusing Server.Spells.Chivalry;\nusing Server.Spells.Necromancy;\nusing Server.Spells.Ninjitsu;\nusing Server.Spells.Seventh;\nusing Server.Spells.Spellweaving;\nnamespace Server.Engines.ConPVP\n{\n    public delegate void CountdownCallback( int count );\n\tpublic class DuelContext\n\t{\n\t\tprivate Mobile m_Initiator;\n\t\tprivate ArrayList m_Participants;\n\t\tprivate Ruleset m_Ruleset;\n\t\tprivate Arena m_Arena;\n\t\tprivate bool m_Registered = true;\n\t\tprivate bool m_Finished, m_Started;\n\t\tprivate bool m_ReadyWait;\n\t\tprivate int m_ReadyCount;\n\t\tprivate bool m_Rematch;\n\t\tpublic bool Rematch{ get{ return m_Rematch; } }\n\t\tpublic bool ReadyWait{ get{ return m_ReadyWait; } }\n\t\tpublic int ReadyCount{ get{ return m_ReadyCount; } }\n\t\tpublic bool Registered{ get{ return m_Registered; } }\n\t\tpublic bool Finished{ get{ return m_Finished; } }\n\t\tpublic bool Started{ get{ return m_Started; } }\n\t\tpublic Mobile Initiator{ get{ return m_Initiator; } }\n\t\tpublic ArrayList Participants{ get{ return m_Participants; } }\n\t\tpublic Ruleset Ruleset{ get{ return m_Ruleset; } }\n\t\tpublic Arena Arena{ get{ return m_Arena; } }\n\t\tprivate bool CantDoAnything( Mobile mob )\n\t\t{\n\t\t\tif ( m_EventGame != null )\n\t\t\t\treturn m_EventGame.CantDoAnything( mob );\n\t\t\telse\n\t\t\t\treturn false;\n\t\t}\n\t\tpublic static bool IsFreeConsume( Mobile mob )\n\t\t{\n\t\t\tPlayerMobile pm = mob as PlayerMobile;\n\t\t\tif ( pm == null || pm.DuelContext == null || pm.DuelContext.m_EventGame == null )\n\t\t\t\treturn false;\n\t\t\treturn pm.DuelContext.m_EventGame.FreeConsume;\n\t\t}\n\t\tpublic void DelayBounce( TimeSpan ts, Mobile mob, Container corpse )\n\t\t{\n\t\t\tTimer.DelayCall( ts, new TimerStateCallback( DelayBounce_Callback ), new object[]{ mob, corpse } );\n\t\t}\n\t\tpublic static bool AllowSpecialMove( Mobile from, string name, SpecialMove move )\n\t\t{\n\t\t\tPlayerMobile pm = from as PlayerMobile;\n\t\t\tif( pm == null )\n\t\t\t\treturn true;\n\t\t\tDuelContext dc = pm.DuelContext;\n\t\t\treturn (dc == null || dc.InstAllowSpecialMove( from, name, move ));\n\t\t}\n\t\tpublic bool InstAllowSpecialMove( Mobile from, string name, SpecialMove move )\n\t\t{\n\t\t\tif ( !m_StartedBeginCountdown )\n\t\t\t\treturn true;\n\t\t\tDuelPlayer pl = Find( from );\n\t\t\tif ( pl == null || pl.Eliminated )\n\t\t\t\treturn true;\n\t\t\tif ( CantDoAnything( from ) )\n\t\t\t\treturn false;\n\t\t\tstring title = null;\n\t\t\tif( move is NinjaMove )\n\t\t\t\ttitle = \"Bushido\";\n\t\t\telse if( move is SamuraiMove )\n\t\t\t\ttitle = \"Ninjitsu\";\n\t\t\tif ( title == null || name == null || m_Ruleset.GetOption( title, name ) )\n\t\t\t\treturn true;\n\t\t\tfrom.SendMessage( \"The dueling ruleset prevents you from using this move.\" );\n\t\t\treturn false;\n\t\t}\n\t\tpublic bool AllowSpellCast( Mobile from, Spell spell )\n\t\t{\n\t\t\tif ( !m_StartedBeginCountdown )\n\t\t\t\treturn true;\n\t\t\tDuelPlayer pl = Find( from );\n\t\t\tif ( pl == null || pl.Eliminated )\n\t\t\t\treturn true;\n\t\t\tif ( CantDoAnything( from ) )\n\t\t\t\treturn false;\n\t\t\tif ( spell is Server.Spells.Fourth.RecallSpell )\n\t\t\t\tfrom.SendMessage( \"You may not cast this spell.\" );\n\t\t\tstring title = null, option = null;\n\t\t\tif( spell is ArcanistSpell )\n\t\t\t{\n\t\t\t\ttitle = \"Spellweaving\";\n\t\t\t\toption = spell.Name;\n\t\t\t}\n\t\t\telse if ( spell is PaladinSpell )\n\t\t\t{\n\t\t\t\ttitle = \"Chivalry\";\n\t\t\t\toption = spell.Name;\n\t\t\t}\n\t\t\telse if ( spell is NecromancerSpell )\n\t\t\t{\n\t\t\t\ttitle = \"Necromancy\";\n\t\t\t\toption = spell.Name;\n\t\t\t}\n\t\t\telse if ( spell is NinjaSpell )\n\t\t\t{\n\t\t\t\ttitle = \"Ninjitsu\";\n\t\t\t\toption = spell.Name;\n\t\t\t}\n\t\t\telse if ( spell is SamuraiSpell )\n\t\t\t{\n\t\t\t\ttitle = \"Bushido\";\n\t\t\t\toption = spell.Name;\n\t\t\t}\n\t\t\telse if( spell is MagerySpell )\n\t\t\t{\n\t\t\t\tswitch( ((MagerySpell)spell).Circle )\n\t\t\t\t{\n\t\t\t\t\tcase SpellCircle.First: title = \"1st Circle\"; break;\n\t\t\t\t\tcase SpellCircle.Second: title = \"2nd Circle\"; break;\n\t\t\t\t\tcase SpellCircle.Third: title = \"3rd Circle\"; break;\n\t\t\t\t\tcase SpellCircle.Fourth: title = \"4th Circle\"; break;\n\t\t\t\t\tcase SpellCircle.Fifth: title = \"5th Circle\"; break;\n\t\t\t\t\tcase SpellCircle.Sixth: title = \"6th Circle\"; break;\n\t\t\t\t\tcase SpellCircle.Seventh: title = \"7th Circle\"; break;\n\t\t\t\t\tcase SpellCircle.Eighth: title = \"8th Circle\"; break;\n\t\t\t\t}\n\t\t\t\toption = spell.Name;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\ttitle = \"Other Spell\";\n\t\t\t\toption = spell.Name;\n\t\t\t}\n\t\t\tif ( title == null || option == null || m_Ruleset.GetOption( title, option ) )\n\t\t\t\treturn true;\n\t\t\tfrom.SendMessage( \"The dueling ruleset prevents you from casting this spell.\" );\n\t\t\treturn false;\n\t\t}\n\t\tpublic bool AllowItemEquip( Mobile from, Item item )\n\t\t{\n\t\t\tif ( !m_StartedBeginCountdown )\n\t\t\t\treturn true;\n\t\t\tDuelPlayer pl = Find( from );\n\t\t\tif ( pl == null || pl.Eliminated )\n\t\t\t\treturn true;\n\t\t\tif ( item is Dagger || CheckItemEquip( from, item ) )\n\t\t\t\treturn true;\n\t\t\tfrom.SendMessage( \"The dueling ruleset prevents you from equiping this item.\" );\n\t\t\treturn false;\n\t\t}\n\t\tpublic static bool AllowSpecialAbility( Mobile from, string name, bool message )\n\t\t{\n\t\t\tPlayerMobile pm = from as PlayerMobile;\n\t\t\tif ( pm == null )\n\t\t\t\treturn true;\n\t\t\tDuelContext dc = pm.DuelContext;\n\t\t\treturn ( dc == null || dc.InstAllowSpecialAbility( from, name, message ) );\n\t\t}\n\t\tpublic bool InstAllowSpecialAbility( Mobile from, string name, bool message )\n\t\t{\n\t\t\tif ( !m_StartedBeginCountdown )\n\t\t\t\treturn true;\n\t\t\tDuelPlayer pl = Find( from );\n\t\t\tif ( pl == null || pl.Eliminated )\n\t\t\t\treturn true;\n\t\t\tif ( CantDoAnything( from ) )\n\t\t\t\treturn false;\n\t\t\tif ( m_Ruleset.GetOption( \"Combat Abilities\", name ) )\n\t\t\t\treturn true;\n\t\t\tif ( message )\n\t\t\t\tfrom.SendMessage( \"The dueling ruleset prevents you from using this combat ability.\" );\n\t\t\treturn false;\n\t\t}\n\t\tpublic bool CheckItemEquip( Mobile from, Item item )\n\t\t{\n\t\t\tif ( item is Fists )\n\t\t\t{\n\t\t\t\tif ( !m_Ruleset.GetOption( \"Weapons\", \"Wrestling\" ) )\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if ( item is BaseArmor )\n\t\t\t{\n\t\t\t\tBaseArmor armor = (BaseArmor)item;\n\t\t\t\tif ( armor.ProtectionLevel > ArmorProtectionLevel.Regular && !m_Ruleset.GetOption( \"Armor\", \"Magical\" ) )\n\t\t\t\t\treturn false;\n\t\t\t\tif ( !Core.AOS && armor.Resource != armor.DefaultResource && !m_Ruleset.GetOption( \"Armor\", \"Colored\" ) )\n\t\t\t\t\treturn false;\n\t\t\t\tif ( armor is BaseShield && !m_Ruleset.GetOption( \"Armor\", \"Shields\" ) )\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if ( item is BaseWeapon )\n\t\t\t{\n\t\t\t\tBaseWeapon weapon = (BaseWeapon)item;\n\t\t\t\tif ( (weapon.DamageLevel > WeaponDamageLevel.Regular || weapon.AccuracyLevel > WeaponAccuracyLevel.Regular) && !m_Ruleset.GetOption( \"Weapons\", \"Magical\" ) )\n\t\t\t\t\treturn false;\n\t\t\t\tif ( !Core.AOS && weapon.Resource != CraftResource.Iron && weapon.Resource != CraftResource.None && !m_Ruleset.GetOption( \"Weapons\", \"Runics\" ) )\n\t\t\t\t\treturn false;\n\t\t\t\tif ( weapon is BaseRanged && !m_Ruleset.GetOption( \"Weapons\", \"Ranged\" ) )\n\t\t\t\t\treturn false;\n\t\t\t\tif ( !(weapon is BaseRanged) && !m_Ruleset.GetOption( \"Weapons\", \"Melee\" ) )\n\t\t\t\t\treturn false;\n\t\t\t\tif ( weapon.PoisonCharges > 0 && weapon.Poison != null && !m_Ruleset.GetOption( \"Weapons\", \"Poisoned\" ) )\n\t\t\t\t\treturn false;\n\t\t\t\tif ( weapon is BaseWand && !m_Ruleset.GetOption( \"Items\", \"Wands\" ) )\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\tpublic bool AllowSkillUse( Mobile from, SkillName skill )\n\t\t{\n\t\t\tif ( !m_StartedBeginCountdown )\n\t\t\t\treturn true;\n\t\t\tDuelPlayer pl = Find( from );\n\t\t\tif ( pl == null || pl.Eliminated )\n\t\t\t\treturn true;\n\t\t\tif ( CantDoAnything( from ) )\n\t\t\t\treturn false;\n\t\t\tint id = (int)skill;\n\t\t\tif ( id >= 0 && id < SkillInfo.Table.Length )\n\t\t\t{\n\t\t\t\tif ( m_Ruleset.GetOption( \"Skills\", SkillInfo.Table[id].Name ) )\n\t\t\t\t\treturn true;\n\t\t\t}\n\t\t\tfrom.SendMessage( \"The dueling ruleset prevents you from using this skill.\" );\n\t\t\treturn false;\n\t\t}\n\t\tpublic bool AllowItemUse( Mobile from, Item item )\n\t\t{\n\t\t\tif ( !m_StartedBeginCountdown )\n\t\t\t\treturn true;\n\t\t\tDuelPlayer pl = Find( from );\n\t\t\tif ( pl == null || pl.Eliminated )\n\t\t\t\treturn true;\n\t\t\tif ( !(item is BaseRefreshPotion) )\n\t\t\t{\n\t\t\t\tif ( CantDoAnything( from ) )\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t\tstring title = null, option = null;\n\t\t\tif ( item is BasePotion )\n\t\t\t{\n\t\t\t\ttitle = \"Potions\";\n\t\t\t\tif ( item is BaseAgilityPotion )\n\t\t\t\t\toption = \"Agility\";\n\t\t\t\telse if ( item is BaseCurePotion )\n\t\t\t\t\toption = \"Cure\";\n\t\t\t\telse if ( item is BaseHealPotion )\n\t\t\t\t\toption = \"Heal\";\n\t\t\t\telse if ( item is NightSightPotion )\n\t\t\t\t\toption = \"Nightsight\";\n\t\t\t\telse if ( item is BasePoisonPotion )\n\t\t\t\t\toption = \"Poison\";\n\t\t\t\telse if ( item is BaseStrengthPotion )\n\t\t\t\t\toption = \"Strength\";\n\t\t\t\telse if ( item is BaseExplosionPotion )\n\t\t\t\t\toption = \"Explosion\";\n\t\t\t\telse if ( item is BaseRefreshPotion )\n\t\t\t\t\toption = \"Refresh\";\n\t\t\t}\n\t\t\telse if ( item is Bandage )\n\t\t\t{\n\t\t\t\ttitle = \"Items\";\n\t\t\t\toption = \"Bandages\";\n\t\t\t}\n\t\t\telse if ( item is TrapableContainer )\n\t\t\t{\n\t\t\t\tif ( ((TrapableContainer)item).TrapType != TrapType.None )\n\t\t\t\t{\n\t\t\t\t\ttitle = \"Items\";\n\t\t\t\t\toption = \"Trapped Containers\";\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if ( item is Bola )\n\t\t\t{\n\t\t\t\ttitle = \"Items\";\n\t\t\t\toption = \"Bolas\";\n\t\t\t}\n\t\t\telse if ( item is OrangePetals )\n\t\t\t{\n\t\t\t\ttitle = \"Items\";\n\t\t\t\toption = \"Orange Petals\";\n\t\t\t}\n\t\t\telse if ( item is EtherealMount || item.Layer == Layer.Mount )\n\t\t\t{\n\t\t\t\ttitle = \"Items\";\n\t\t\t\toption = \"Mounts\";\n\t\t\t}\n\t\t\telse if ( item is LeatherNinjaBelt )\n\t\t\t{\n\t\t\t\ttitle = \"Items\";\n\t\t\t\toption = \"Shurikens\";\n\t\t\t}\n\t\t\telse if ( item is Fukiya )\n\t\t\t{\n\t\t\t\ttitle = \"Items\";\n\t\t\t\toption = \"Fukiya Darts\";\n\t\t\t}\n\t\t\telse if ( item is FireHorn )\n\t\t\t{\n\t\t\t\ttitle = \"Items\";\n\t\t\t\toption = \"Fire Horns\";\n\t\t\t}\n\t\t\telse if ( item is BaseWand )\n\t\t\t{\n\t\t\t\ttitle = \"Items\";\n\t\t\t\toption = \"Wands\";\n\t\t\t}\n\t\t\tif ( title != null && option != null && m_StartedBeginCountdown && !m_Started )\n\t\t\t{\n\t\t\t\tfrom.SendMessage( \"You may not use this item before the duel begins.\" );\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if ( item is BasePotion && !(item is BaseExplosionPotion) && !(item is BaseRefreshPotion) && IsSuddenDeath )\n\t\t\t{\n\t\t\t\tfrom.SendMessage( 0x22, \"You may not drink potions in sudden death.\" );\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if ( item is Bandage && IsSuddenDeath )\n\t\t\t{\n\t\t\t\tfrom.SendMessage( 0x22, \"You may not use bandages in sudden death.\" );\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif ( title == null || option == null || m_Ruleset.GetOption( title, option ) )\n\t\t\t\treturn true;\n\t\t\tfrom.SendMessage( \"The dueling ruleset prevents you from using this item.\" );\n\t\t\treturn false;\n\t\t}\n\t\tprivate void DelayBounce_Callback( object state )\n\t\t{\n\t\t\tobject[] states = (object[])state;\n\t\t\tMobile mob = (Mobile) states[0];\n\t\t\tContainer corpse = (Container) states[1];\n\t\t\tRemoveAggressions( mob );\n\t\t\tSendOutside( mob );\n\t\t\tRefresh( mob, corpse );\n\t\t\tDebuff( mob );\n\t\t\tCancelSpell( mob );\n\t\t\tmob.Frozen = false;\n\t\t}\n\t\tpublic void OnMapChanged( Mobile mob )\n\t\t{\n\t\t\tOnLocationChanged( mob );\n\t\t}\n\t\tpublic void OnLocationChanged( Mobile mob )\n\t\t{\n\t\t\tif ( !m_Registered || !m_StartedBeginCountdown || m_Finished )\n\t\t\t\treturn;\n\t\t\tArena arena = m_Arena;\n\t\t\tif ( arena == null )\n\t\t\t\treturn;\n\t\t\tif ( mob.Map == arena.Facet && arena.Bounds.Contains( mob.Location ) )\n\t\t\t\treturn;\n\t\t\tDuelPlayer pl = Find( mob );\n\t\t\tif ( pl == null || pl.Eliminated )\n\t\t\t\treturn;\n\t\t\tif ( mob.Map == Map.Internal ) {\n\t\t\t\t// they've logged out\n\t\t\t\tif ( mob.LogoutMap == arena.Facet && arena.Bounds.Contains( mob.LogoutLocation ) ) {\n\t\t\t\t\t// they logged out inside the arena.. set them to eject on login\n\t\t\t\t\tmob.LogoutLocation = arena.Outside;\n\t\t\t\t}\n\t\t\t}\n\t\t\tpl.Eliminated = true;\n\t\t\tmob.LocalOverheadMessage( MessageType.Regular, 0x22, false, \"You have forfeited your position in the duel.\" );\n\t\t\tmob.NonlocalOverheadMessage( MessageType.Regular, 0x22, false, String.Format( \"{0} has forfeited by leaving the dueling arena.\", mob.Name ) );\n\t\t\tParticipant winner = CheckCompletion();\n\t\t\tif ( winner != null )\n\t\t\t\tFinish( winner );\n\t\t}\n\t\tprivate bool m_Yielding;\n\t\tpublic void OnDeath( Mobile mob, Container corpse )\n\t\t{\n\t\t\tif ( !m_Registered || !m_Started )\n\t\t\t\treturn;\n\t\t\tDuelPlayer pl = Find( mob );\n\t\t\tif ( pl != null && !pl.Eliminated )\n\t\t\t{\n\t\t\t\tif ( m_EventGame != null && !m_EventGame.OnDeath( mob, corpse ) )\n\t\t\t\t\treturn;\n\t\t\t\tpl.Eliminated = true;\n\t\t\t\tif ( mob.Poison != null )\n\t\t\t\t\tmob.Poison = null;\n\t\t\t\tRequip( mob, corpse );\n\t\t\t\tDelayBounce( TimeSpan.FromSeconds( 4.0 ), mob, corpse );\n\t\t\t\tParticipant winner = CheckCompletion();\n\t\t\t\tif ( winner != null )\n\t\t\t\t{\n\t\t\t\t\tFinish( winner );\n\t\t\t\t}\n\t\t\t\telse if ( !m_Yielding )\n\t\t\t\t{\n\t\t\t\t\tmob.LocalOverheadMessage( MessageType.Regular, 0x22, false, \"You have been defeated.\" );\n\t\t\t\t\tmob.NonlocalOverheadMessage( MessageType.Regular, 0x22, false, String.Format( \"{0} has been defeated.\", mob.Name ) );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tpublic bool CheckFull()\n\t\t{\n\t\t\tfor ( int i = 0; i < m_Participants.Count; ++i )\n\t\t\t{\n\t\t\t\tParticipant p = (Participant)m_Participants[i];\n\t\t\t\tif ( p.HasOpenSlot )\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\tpublic void Requip( Mobile from, Container cont )\n\t\t{\n\t\t\tCorpse corpse = cont as Corpse;\n\t\t\tif ( corpse == null )\n\t\t\t\treturn;\n\t\t\tList<Item> items = new List<Item>( corpse.Items );\n\t\t\tbool gathered = false;\n\t\t\tbool didntFit = false;\n\t\t\tContainer pack = from.Backpack;\n\t\t\tfor ( int i = 0; !didntFit && i < items.Count; ++i )\n\t\t\t{\n\t\t\t\tItem item = items[i];\n\t\t\t\tPoint3D loc = item.Location;\n\t\t\t\tif ( (item.Layer == Layer.Hair || item.Layer == Layer.FacialHair) || !item.Movable )\n\t\t\t\t\tcontinue;\n\t\t\t\tif ( pack != null )\n\t\t\t\t{\n\t\t\t\t\tpack.DropItem( item );\n\t\t\t\t\tgathered = true;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tdidntFit = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcorpse.Carved = true;\n\t\t\tif ( corpse.ItemID == 0x2006 )\n\t\t\t{\n\t\t\t\tcorpse.ProcessDelta();\n\t\t\t\tcorpse.SendRemovePacket();\n\t\t\t\tcorpse.ItemID = Utility.Random( 0xECA, 9 ); // bone graphic\n\t\t\t\tcorpse.Hue = 0;\n\t\t\t\tcorpse.ProcessDelta();\n\t\t\t\tMobile killer = from.FindMostRecentDamager( false );\n\t\t\t\tif ( killer != null && killer.Player )\n\t\t\t\t\tkiller.AddToBackpack( new Head( m_Tournament == null ? HeadType.Duel : HeadType.Tournament, from.Name ) );\n\t\t\t}\n\t\t\tfrom.PlaySound( 0x3E3 );\n\t\t\tif ( gathered && !didntFit )\n\t\t\t\tfrom.SendLocalizedMessage( 1062471 ); // You quickly gather all of your belongings.\n\t\t\telse if ( gathered && didntFit )\n\t\t\t\tfrom.SendLocalizedMessage( 1062472 ); // You gather some of your belongings. The rest remain on the corpse.\n\t\t}\n\t\tpublic void Refresh( Mobile mob, Container cont )\n\t\t{\n\t\t\tif ( !mob.Alive )\n\t\t\t{\n\t\t\t\tmob.Resurrect();\n\t\t\t\tDeathRobe robe = mob.FindItemOnLayer( Layer.OuterTorso ) as DeathRobe;\n\t\t\t\tif ( robe != null )\n\t\t\t\t\trobe.Delete();\n\t\t\t\tif ( cont is Corpse )\n\t\t\t\t{\n\t\t\t\t\tCorpse corpse = (Corpse) cont;\n\t\t\t\t\tfor ( int i = 0; i < corpse.EquipItems.Count; ++i )\n\t\t\t\t\t{\n\t\t\t\t\t\tItem item = corpse.EquipItems[i];\n\t\t\t\t\t\tif ( item.Movable && item.Layer != Layer.Hair && item.Layer != Layer.FacialHair && item.IsChildOf( mob.Backpack ) )\n\t\t\t\t\t\t\tmob.EquipItem( item );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tmob.Hits = mob.HitsMax;\n\t\t\tmob.Stam = mob.StamMax;\n\t\t\tmob.Mana = mob.ManaMax;\n\t\t\tmob.Poison = null;\n\t\t}\n\t\tpublic void SendOutside( Mobile mob )\n\t\t{\n\t\t\tif ( m_Arena == null )\n\t\t\t\treturn;\n\t\t\tmob.Combatant = null;\n\t\t\tmob.MoveToWorld( m_Arena.Outside, m_Arena.Facet );\n\t\t}\n\t\tprivate Point3D m_GatePoint;\n\t\tprivate Map m_GateFacet;\n\t\tpublic void Finish( Participant winner )\n\t\t{\n\t\t\tif ( m_Finished )\n\t\t\t\treturn;\n\t\t\tEndAutoTie();\n\t\t\tStopSDTimers();\n\t\t\tm_Finished = true;\n\t\t\tfor ( int i = 0; i < winner.Players.Length; ++i )\n\t\t\t{\n\t\t\t\tDuelPlayer pl = winner.Players[i];\n\t\t\t\tif ( pl != null && !pl.Eliminated )\n\t\t\t\t\tDelayBounce( TimeSpan.FromSeconds( 8.0 ), pl.Mobile, null );\n\t\t\t}\n\t\t\twinner.Broadcast( 0x59, null, winner.Players.Length == 1 ? \"{0} has won the duel.\" : \"{0} and {1} team have won the duel.\", winner.Players.Length == 1 ? \"You have won the duel.\" : \"Your team has won the duel.\" );\n\t\t\tif ( m_Tournament != null && winner.TournyPart != null )\n\t\t\t{\n\t\t\t\tm_Match.Winner = winner.TournyPart;\n\t\t\t\twinner.TournyPart.WonMatch( m_Match );\n\t\t\t\tm_Tournament.HandleWon( m_Arena, m_Match, winner.TournyPart );\n\t\t\t}\n\t\t\tfor ( int i = 0; i < m_Participants.Count; ++i )\n\t\t\t{\n\t\t\t\tParticipant loser = (Participant)m_Participants[i];\n\t\t\t\tif ( loser != winner )\n\t\t\t\t{\n\t\t\t\t\tloser.Broadcast( 0x22, null, loser.Players.Length == 1 ? \"{0} has lost the duel.\" : \"{0} and {1} team have lost the duel.\", loser.Players.Length == 1 ? \"You have lost the duel.\" : \"Your team has lost the duel.\" );\n\t\t\t\t\tif ( m_Tournament != null && loser.TournyPart != null )\n\t\t\t\t\t\tloser.TournyPart.LostMatch( m_Match );\n\t\t\t\t}\n\t\t\t\tfor ( int j = 0; j < loser.Players.Length; ++j )\n\t\t\t\t{\n\t\t\t\t\tif ( loser.Players[j] != null )\n\t\t\t\t\t{\n\t\t\t\t\t\tRemoveAggressions( loser.Players[j].Mobile );\n\t\t\t\t\t\tloser.Players[j].Mobile.Delta( MobileDelta.Noto );\n\t\t\t\t\t\tloser.Players[j].Mobile.CloseGump( typeof( BeginGump ) );\n\t\t\t\t\t\tif ( m_Tournament != null )\n\t\t\t\t\t\t\tloser.Players[j].Mobile.SendEverything();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( IsOneVsOne )\n\t\t\t{\n\t\t\t\tDuelPlayer dp1 = ((Participant)m_Participants[0]).Players[0];\n\t\t\t\tDuelPlayer dp2 = ((Participant)m_Participants[1]).Players[0];\n\t\t\t\tif ( dp1 != null && dp2 != null )\n\t\t\t\t{\n\t\t\t\t\tAward( dp1.Mobile, dp2.Mobile, dp1.Participant == winner );\n\t\t\t\t\tAward( dp2.Mobile, dp1.Mobile, dp2.Participant == winner );\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( m_EventGame != null )\n\t\t\t\tm_EventGame.OnStop();\n\t\t\tTimer.DelayCall( TimeSpan.FromSeconds( 9.0 ), new TimerCallback( UnregisterRematch ) );\n\t\t}\n\t\tpublic void Award( Mobile us, Mobile them, bool won )\n\t\t{\n\t\t\tLadder ladder = ( m_Arena == null ? Ladder.Instance : m_Arena.AcquireLadder() );\n\t\t\tif ( ladder == null )\n\t\t\t\treturn;\n\t\t\tLadderEntry ourEntry = ladder.Find( us );\n\t\t\tLadderEntry theirEntry = ladder.Find( them );\n\t\t\tif ( ourEntry == null || theirEntry == null )\n\t\t\t\treturn;\n\t\t\tint xpGain = Ladder.GetExperienceGain( ourEntry, theirEntry, won );\n\t\t\tif ( xpGain == 0 )\n\t\t\t\treturn;\n\t\t\tif ( m_Tournament != null )\n\t\t\t\txpGain *= ( xpGain > 0 ? 5 : 2 );\n\t\t\tif ( won )\n\t\t\t\t++ourEntry.Wins;\n\t\t\telse\n\t\t\t\t++ourEntry.Losses;\n\t\t\tint oldLevel = Ladder.GetLevel( ourEntry.Experience );\n\t\t\tourEntry.Experience += xpGain;\n\t\t\tif ( ourEntry.Experience < 0 )\n\t\t\t\tourEntry.Experience = 0;\n\t\t\tladder.UpdateEntry( ourEntry );\n\t\t\tint newLevel = Ladder.GetLevel( ourEntry.Experience );\n\t\t\tif ( newLevel > oldLevel )\n\t\t\t\tus.SendMessage( 0x59, \"You have achieved level {0}!\", newLevel );\n\t\t\telse if ( newLevel < oldLevel )\n\t\t\t\tus.SendMessage( 0x22, \"You have lost a level. You are now at {0}.\", newLevel );\n\t\t}\n\t\tpublic void UnregisterRematch()\n\t\t{\n\t\t\tUnregister(true);\n\t\t}\n\t\tpublic void Unregister()\n\t\t{\n\t\t\tUnregister(false);\n\t\t}\n\t\tpublic void Unregister( bool queryRematch )\n\t\t{\n\t\t\tDestroyWall();\n\t\t\tif ( !m_Registered )\n\t\t\t\treturn;\n\t\t\tm_Registered = false;\n\t\t\tif ( m_Arena != null )\n\t\t\t\tm_Arena.Evict();\n\t\t\tStopSDTimers();\n\t\t\tType[] types = new Type[]{ typeof( BeginGump ), typeof( DuelContextGump ), typeof( ParticipantGump ), typeof( PickRulesetGump ), typeof( ReadyGump ), typeof( ReadyUpGump ), typeof( RulesetGump ) };\n\t\t\tfor ( int i = 0; i < m_Participants.Count; ++i )\n\t\t\t{\n\t\t\t\tParticipant p = (Participant)m_Participants[i];\n\t\t\t\tfor ( int j = 0; j < p.Players.Length; ++j )\n\t\t\t\t{\n\t\t\t\t\tDuelPlayer pl = (DuelPlayer)p.Players[j];\n\t\t\t\t\tif ( pl == null )\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\tif ( pl.Mobile is PlayerMobile )\n\t\t\t\t\t\t((PlayerMobile)pl.Mobile).DuelPlayer = null;\n\t\t\t\t\tfor ( int k = 0; k < types.Length; ++k )\n\t\t\t\t\t\tpl.Mobile.CloseGump( types[k] );\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( queryRematch && m_Tournament == null )\n\t\t\t\tQueryRematch();\n\t\t}\n\t\tpublic void QueryRematch()\n\t\t{\n\t\t\tDuelContext dc = new DuelContext( m_Initiator, m_Ruleset.Layout, false );\n\t\t\tdc.m_Ruleset = m_Ruleset;\n\t\t\tdc.m_Rematch = true;\n\t\t\tdc.m_Participants.Clear();\n\t\t\tfor ( int i = 0; i < m_Participants.Count; ++i )\n\t\t\t{\n\t\t\t\tParticipant oldPart = (Participant)m_Participants[i];\n\t\t\t\tParticipant newPart = new Participant( dc, oldPart.Players.Length );\n\t\t\t\tfor ( int j = 0; j < oldPart.Players.Length; ++j )\n\t\t\t\t{\n\t\t\t\t\tDuelPlayer oldPlayer = oldPart.Players[j];\n\t\t\t\t\tif ( oldPlayer != null )\n\t\t\t\t\t\tnewPart.Players[j] = new DuelPlayer( oldPlayer.Mobile, newPart );\n\t\t\t\t}\n\t\t\t\tdc.m_Participants.Add( newPart );\n\t\t\t}\n\t\t\tdc.CloseAllGumps();\n\t\t\tdc.SendReadyUpGump();\n\t\t}\n\t\tpublic DuelPlayer Find( Mobile mob )\n\t\t{\n\t\t\tif ( mob is PlayerMobile )\n\t\t\t{\n\t\t\t\tPlayerMobile pm = (PlayerMobile)mob;\n\t\t\t\tif ( pm.DuelContext == this )\n\t\t\t\t\treturn pm.DuelPlayer;\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tfor ( int i = 0; i < m_Participants.Count; ++i )\n\t\t\t{\n\t\t\t\tParticipant p = (Participant)m_Participants[i];\n\t\t\t\tDuelPlayer pl = p.Find( mob );\n\t\t\t\tif ( pl != null )\n\t\t\t\t\treturn pl;\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\t\tpublic bool IsAlly( Mobile m1, Mobile m2 )\n\t\t{\n\t\t\tDuelPlayer pl1 = Find( m1 );\n\t\t\tDuelPlayer pl2 = Find( m2 );\n\t\t\treturn ( pl1 != null && pl2 != null && pl1.Participant == pl2.Participant );\n\t\t}\n\t\tpublic Participant CheckCompletion()\n\t\t{\n\t\t\tParticipant winner = null;\n\t\t\tbool hasWinner = false;\n\t\t\tint eliminated = 0;\n\t\t\tfor ( int i = 0; i < m_Participants.Count; ++i )\n\t\t\t{\n\t\t\t\tParticipant p = (Participant)m_Participants[i];\n\t\t\t\tif ( p.Eliminated )\n\t\t\t\t{\n\t\t\t\t\t++eliminated;\n\t\t\t\t\tif ( eliminated == (m_Participants.Count - 1) )\n\t\t\t\t\t\thasWinner = true;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\twinner = p;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( hasWinner )\n\t\t\t\treturn winner == null ? (Participant) m_Participants[0] : winner;\n\t\t\treturn null;\n\t\t}\n\t\tprivate Timer m_Countdown;\n\t\tpublic void StartCountdown( int count, CountdownCallback cb )\n\t\t{\n\t\t\tcb(count);\n\t\t\tm_Countdown=Timer.DelayCall( TimeSpan.FromSeconds( 1.0 ), TimeSpan.FromSeconds( 1.0 ), count, new TimerStateCallback( Countdown_Callback ), new object[]{ count-1, cb } );\n\t\t}\n\t\tpublic void StopCountdown()\n\t\t{\n\t\t\tif ( m_Countdown != null )\n\t\t\t\tm_Countdown.Stop();\n\t\t\tm_Countdown = null;\n\t\t}\n\t\tprivate void Countdown_Callback( object state )\n\t\t{\n\t\t\tobject[] states = (object[])state;\n\t\t\tint count = (int)states[0];\n\t\t\tCountdownCallback cb = (CountdownCallback)states[1];\n\t\t\tif ( count==0 )\n\t\t\t{\n\t\t\t\tif ( m_Countdown != null )\n\t\t\t\t\tm_Countdown.Stop();\n\t\t\t\tm_Countdown=null;\n\t\t\t}\n\t\t\tcb( count );\n\t\t\tstates[0] = count - 1;\n\t\t}\n\t\tprivate Timer m_AutoTieTimer;\n\t\tprivate bool m_Tied;\n\t\tpublic bool Tied{ get{ return m_Tied; } }\n\t\tprivate bool m_IsSuddenDeath;\n\t\tpublic bool IsSuddenDeath{ get{ return m_IsSuddenDeath; } set{ m_IsSuddenDeath = value; } }\n\t\tprivate Timer m_SDWarnTimer, m_SDActivateTimer;\n\t\tpublic void StopSDTimers()\n\t\t{\n\t\t\tif ( m_SDWarnTimer != null )\n\t\t\t\tm_SDWarnTimer.Stop();\n\t\t\tm_SDWarnTimer = null;\n\t\t\tif ( m_SDActivateTimer != null )\n\t\t\t\tm_SDActivateTimer.Stop();\n\t\t\tm_SDActivateTimer = null;\n\t\t}\n\t\tpublic void StartSuddenDeath( TimeSpan timeUntilActive )\n\t\t{\n\t\t\tif ( m_SDWarnTimer != null )\n\t\t\t\tm_SDWarnTimer.Stop();\n\t\t\tm_SDWarnTimer = Timer.DelayCall( TimeSpan.FromMinutes( timeUntilActive.TotalMinutes * 0.9 ), new TimerCallback( WarnSuddenDeath ) );\n\t\t\tif ( m_SDActivateTimer != null )\n\t\t\t\tm_SDActivateTimer.Stop();\n\t\t\tm_SDActivateTimer = Timer.DelayCall( timeUntilActive, new TimerCallback( ActivateSuddenDeath ) );\n\t\t}\n\t\tpublic void WarnSuddenDeath()\n\t\t{\n\t\t\tfor ( int i = 0; i < m_Participants.Count; ++i )\n\t\t\t{\n\t\t\t\tParticipant p = (Participant)m_Participants[i];\n\t\t\t\tfor ( int j = 0; j < p.Players.Length; ++j )\n\t\t\t\t{\n\t\t\t\t\tDuelPlayer pl = p.Players[j];\n\t\t\t\t\tif ( pl == null || pl.Eliminated )\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\tpl.Mobile.SendSound( 0x1E1 );\n\t\t\t\t\tpl.Mobile.SendMessage( 0x22, \"Warning! Warning! Warning!\" );\n\t\t\t\t\tpl.Mobile.SendMessage( 0x22, \"Sudden death will be active soon!\" );\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( m_Tournament != null )\n\t\t\t\tm_Tournament.Alert( m_Arena, \"Sudden death will be active soon!\" );\n\t\t\tif ( m_SDWarnTimer != null )\n\t\t\t\tm_SDWarnTimer.Stop();\n\t\t\tm_SDWarnTimer = null;\n\t\t}\n\t\tpublic static bool CheckSuddenDeath( Mobile mob )\n\t\t{\n\t\t\tif ( mob is PlayerMobile )\n\t\t\t{\n\t\t\t\tPlayerMobile pm = (PlayerMobile)mob;\n\t\t\t\tif ( pm.DuelPlayer != null && !pm.DuelPlayer.Eliminated && pm.DuelContext != null && pm.DuelContext.IsSuddenDeath )\n\t\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t\tpublic void ActivateSuddenDeath()\n\t\t{\n\t\t\tfor ( int i = 0; i < m_Participants.Count; ++i )\n\t\t\t{\n\t\t\t\tParticipant p = (Participant)m_Participants[i];\n\t\t\t\tfor ( int j = 0; j < p.Players.Length; ++j )\n\t\t\t\t{\n\t\t\t\t\tDuelPlayer pl = p.Players[j];\n\t\t\t\t\tif ( pl == null || pl.Eliminated )\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\tpl.Mobile.SendSound( 0x1E1 );\n\t\t\t\t\tpl.Mobile.SendMessage( 0x22, \"Warning! Warning! Warning!\" );\n\t\t\t\t\tpl.Mobile.SendMessage( 0x22, \"Sudden death has ACTIVATED. You are now unable to perform any beneficial actions.\" );\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( m_Tournament != null )\n\t\t\t\tm_Tournament.Alert( m_Arena, \"Sudden death has been activated!\" );\n\t\t\tm_IsSuddenDeath = true;\n\t\t\tif ( m_SDActivateTimer != null )\n\t\t\t\tm_SDActivateTimer.Stop();\n\t\t\tm_SDActivateTimer = null;\n\t\t}\n\t\tpublic void BeginAutoTie()\n\t\t{\n\t\t\tif ( m_AutoTieTimer != null )\n\t\t\t\tm_AutoTieTimer.Stop();\n\t\t\tTimeSpan ts = ( m_Tournament == null || m_Tournament.TournyType == TournyType.Standard )\n\t\t\t\t? AutoTieDelay\n\t\t\t\t: TimeSpan.FromMinutes( 90.0 );\n\t\t\tm_AutoTieTimer = Timer.DelayCall( ts, new TimerCallback( InvokeAutoTie ) );\n\t\t}\n\t\tpublic void EndAutoTie()\n\t\t{\n\t\t\tif ( m_AutoTieTimer != null )\n\t\t\t\tm_AutoTieTimer.Stop();\n\t\t\tm_AutoTieTimer = null;\n\t\t}\n\t\tpublic void InvokeAutoTie()\n\t\t{\n\t\t\tm_AutoTieTimer = null;\n\t\t\tif ( !m_Started || m_Finished )\n\t\t\t\treturn;\n\t\t\tm_Tied = true;\n\t\t\tm_Finished = true;\n\t\t\tStopSDTimers();\n\t\t\tArrayList remaining = new ArrayList();\n\t\t\tfor ( int i = 0; i < m_Participants.Count; ++i )\n\t\t\t{\n\t\t\t\tParticipant p = (Participant)m_Participants[i];\n\t\t\t\tif ( p.Eliminated )\n\t\t\t\t{\n\t\t\t\t\tp.Broadcast( 0x22, null, p.Players.Length == 1 ? \"{0} has lost the duel.\" : \"{0} and {1} team have lost the duel.\", p.Players.Length == 1 ? \"You have lost the duel.\" : \"Your team has lost the duel.\" );\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tp.Broadcast( 0x59, null, p.Players.Length == 1 ? \"{0} has tied the duel due to time expiration.\" : \"{0} and {1} team have tied the duel due to time expiration.\", p.Players.Length == 1 ? \"You have tied the duel due to time expiration.\" : \"Your team has tied the duel due to time expiration.\" );\n\t\t\t\t\tfor ( int j = 0; j < p.Players.Length; ++j )\n\t\t\t\t\t{\n\t\t\t\t\t\tDuelPlayer pl = p.Players[j];\n\t\t\t\t\t\tif ( pl != null && !pl.Eliminated )\n\t\t\t\t\t\t\tDelayBounce( TimeSpan.FromSeconds( 8.0 ), pl.Mobile, null );\n\t\t\t\t\t}\n\t\t\t\t\tif ( p.TournyPart != null )\n\t\t\t\t\t\tremaining.Add( p.TournyPart );\n\t\t\t\t}\n\t\t\t\tfor ( int j = 0; j < p.Players.Length; ++j )\n\t\t\t\t{\n\t\t\t\t\tDuelPlayer pl = p.Players[j];\n\t\t\t\t\tif ( pl != null )\n\t\t\t\t\t{\n\t\t\t\t\t\tpl.Mobile.Delta( MobileDelta.Noto );\n\t\t\t\t\t\tpl.Mobile.SendEverything();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( m_Tournament != null )\n\t\t\t\tm_Tournament.HandleTie( m_Arena, m_Match, remaining );\n\t\t\tTimer.DelayCall( TimeSpan.FromSeconds( 10.0 ), new TimerCallback( Unregister ) );\n\t\t}\n\t\tpublic bool IsOneVsOne\n\t\t{\n\t\t\tget\n\t\t\t{\n\t\t\t\tif ( m_Participants.Count != 2 )\n\t\t\t\t\treturn false;\n\t\t\t\tif ( ((Participant)m_Participants[0]).Players.Length != 1 )\n\t\t\t\t\treturn false;\n\t\t\t\tif ( ((Participant)m_Participants[1]).Players.Length != 1 )\n\t\t\t\t\treturn false;\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\tpublic static void Initialize()\n\t\t{\n\t\t\tEventSink.Speech += new SpeechEventHandler( EventSink_Speech );\n\t\t\tEventSink.Login += new LoginEventHandler( EventSink_Login );\n\t\t\tCommandSystem.Register( \"vli\", AccessLevel.GameMaster, new CommandEventHandler( vli_oc ) );\n\t\t}\n\t\tprivate static void vli_oc( CommandEventArgs e )\n\t\t{\n\t\t\te.Mobile.BeginTarget( -1, false, Targeting.TargetFlags.None, new TargetCallback( vli_ot ) );\n\t\t}\n\t\tprivate static void vli_ot( Mobile from, object obj )\n\t\t{\n\t\t\tif ( obj is PlayerMobile )\n\t\t\t{\n\t\t\t\tPlayerMobile pm = (PlayerMobile)obj;\n\t\t\t\tLadder ladder = Ladder.Instance;\n\t\t\t\tif ( ladder == null )\n\t\t\t\t\treturn;\n\t\t\t\tLadderEntry entry = ladder.Find( pm );\n\t\t\t\tif ( entry != null )\n\t\t\t\t\tfrom.SendGump( new PropertiesGump( from, entry ) );\n\t\t\t}\n\t\t}\n\t\tprivate static TimeSpan CombatDelay = TimeSpan.FromSeconds( 30.0 );\n\t\tprivate static TimeSpan AutoTieDelay = TimeSpan.FromMinutes( 15.0 );\n\t\tpublic static bool CheckCombat( Mobile m )\n\t\t{\n\t\t\tfor ( int i = 0; i < m.Aggressed.Count; ++i )\n\t\t\t{\n\t\t\t\tAggressorInfo info = m.Aggressed[i];\n\t\t\t\tif ( info.Defender.Player && (DateTime.UtcNow - info.LastCombatTime) < CombatDelay )\n\t\t\t\t\treturn true;\n\t\t\t}\n\t\t\tfor ( int i = 0; i < m.Aggressors.Count; ++i )\n\t\t\t{\n\t\t\t\tAggressorInfo info = m.Aggressors[i];\n\t\t\t\tif ( info.Attacker.Player && (DateTime.UtcNow - info.LastCombatTime) < CombatDelay )\n\t\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t\tprivate static void EventSink_Login( LoginEventArgs e )\n\t\t{\n\t\t\tPlayerMobile pm = e.Mobile as PlayerMobile;\n\t\t\tif ( pm == null )\n\t\t\t\treturn;\n\t\t\tDuelContext dc = pm.DuelContext;\n\t\t\tif ( dc == null )\n\t\t\t\treturn;\n\t\t\tif ( dc.ReadyWait && pm.DuelPlayer.Ready && !dc.Started && !dc.StartedBeginCountdown && !dc.Finished )\n\t\t\t{\n\t\t\t\tif ( dc.m_Tournament == null )\n\t\t\t\t\tpm.SendGump( new ReadyGump( pm, dc, dc.m_ReadyCount ) );\n\t\t\t}\n\t\t\telse if ( dc.ReadyWait && !dc.StartedBeginCountdown && !dc.Started && !dc.Finished )\n\t\t\t{\n\t\t\t\tif ( dc.m_Tournament == null )\n\t\t\t\t\tpm.SendGump( new ReadyUpGump( pm, dc ) );\n\t\t\t}\n\t\t\telse if ( dc.Initiator == pm && !dc.ReadyWait && !dc.StartedBeginCountdown && !dc.Started && !dc.Finished )\n\t\t\t\tpm.SendGump( new DuelContextGump( pm, dc ) );\n\t\t}\n\t\tprivate static void ViewLadder_OnTarget( Mobile from, object obj, object state )\n\t\t{\n\t\t\tif ( obj is PlayerMobile )\n\t\t\t{\n\t\t\t\tPlayerMobile pm = (PlayerMobile)obj;\n\t\t\t\tLadder ladder = (Ladder)state;\n\t\t\t\tLadderEntry entry = ladder.Find( pm );\n\t\t\t\tif ( entry == null )\n\t\t\t\t\treturn; // sanity\n\t\t\t\tstring text = String.Format( \"{{0}} are ranked {0} at level {1}.\", LadderGump.Rank( entry.Index + 1 ), Ladder.GetLevel( entry.Experience ) );\n\t\t\t\tpm.PrivateOverheadMessage( MessageType.Regular, pm.SpeechHue, true, String.Format( text, from==pm?\"You\":\"They\" ), from.NetState );\n\t\t\t}\n\t\t\telse if ( obj is Mobile )\n\t\t\t{\n\t\t\t\tMobile mob = (Mobile)obj;\n\t\t\t\tif ( mob.Body.IsHuman )\n\t\t\t\t\tmob.PrivateOverheadMessage( MessageType.Regular, mob.SpeechHue, false, \"I'm not a duelist, and quite frankly, I resent the implication.\", from.NetState );\n\t\t\t\telse\n\t\t\t\t\tmob.PrivateOverheadMessage( MessageType.Regular, 0x3B2, true, \"It's probably better than you.\", from.NetState );\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tfrom.SendMessage( \"That's not a player.\" );\n\t\t\t}\n\t\t}\n\t\tprivate static void EventSink_Speech( SpeechEventArgs e )\n\t\t{\n\t\t\tif ( e.Handled )\n\t\t\t\treturn;\n\t\t\tPlayerMobile pm = e.Mobile as PlayerMobile;\n\t\t\tif ( pm == null )\n\t\t\t\treturn;\n\t\t\tif ( Insensitive.Contains( e.Speech, \"i wish to duel\" ) )\n\t\t\t{\n\t\t\t\tif ( !pm.CheckAlive() )\n\t\t\t\t{\n\t\t\t\t}\n\t\t\t\telse if ( pm.Region.IsPartOf( typeof( Regions.Jail ) ) )\n\t\t\t\t{\n\t\t\t\t}\n\t\t\t\telse if ( CheckCombat( pm ) )\n\t\t\t\t{\n\t\t\t\t\te.Mobile.SendMessage( 0x22, \"You have recently been in combat with another player and must wait before starting a duel.\" );\n\t\t\t\t}\n\t\t\t\telse if ( pm.DuelContext != null )\n\t\t\t\t{\n\t\t\t\t\tif ( pm.DuelContext.Initiator == pm )\n\t\t\t\t\t\te.Mobile.SendMessage( 0x22, \"You have already started a duel.\" );\n\t\t\t\t\telse\n\t\t\t\t\t\te.Mobile.SendMessage( 0x22, \"You have already been challenged in a duel.\" );\n\t\t\t\t}\n\t\t\t\telse if ( TournamentController.IsActive )\n\t\t\t\t{\n\t\t\t\t\te.Mobile.SendMessage( 0x22, \"You may not start a duel while a tournament is active.\" );\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tpm.SendGump( new DuelContextGump( pm, new DuelContext( pm, RulesetLayout.Root ) ) );\n\t\t\t\t\te.Handled = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if ( Insensitive.Equals( e.Speech, \"change arena preferences\" ) )\n\t\t\t{\n\t\t\t\tif ( !pm.CheckAlive() )\n\t\t\t\t{\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tPreferences prefs = Preferences.Instance;\n\t\t\t\t\tif ( prefs != null )\n\t\t\t\t\t{\n\t\t\t\t\t\te.Mobile.CloseGump( typeof( PreferencesGump ) );\n\t\t\t\t\t\te.Mobile.SendGump( new PreferencesGump( e.Mobile, prefs ) );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if ( Insensitive.Equals( e.Speech, \"showladder\" ) )\n\t\t\t{\n\t\t\t\te.Blocked=true;\n\t\t\t\tif ( !pm.CheckAlive() )\n\t\t\t\t{\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tLadder instance = Ladder.Instance;\n\t\t\t\t\tif ( instance == null )\n\t\t\t\t\t{\n\t\t\t\t\t\t//pm.SendMessage( \"Ladder not yet initialized.\" );\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tLadderEntry entry = instance.Find( pm );\n\t\t\t\t\t\tif ( entry == null )\n\t\t\t\t\t\t\treturn; // sanity\n\t\t\t\t\t\tstring text = String.Format( \"{{0}} {{1}} ranked {0} at level {1}.\", LadderGump.Rank( entry.Index + 1 ), Ladder.GetLevel( entry.Experience ) );\n\t\t\t\t\t\tpm.LocalOverheadMessage( MessageType.Regular, pm.SpeechHue, true, String.Format( text, \"You\", \"are\" ) );\n\t\t\t\t\t\tpm.NonlocalOverheadMessage( MessageType.Regular, pm.SpeechHue, true, String.Format( text, pm.Name, \"is\" ) );\n\t\t\t\t\t\t//pm.PublicOverheadMessage( MessageType.Regular, pm.SpeechHue, true, String.Format( \"Level {0} with {1} win{2} and {3} loss{4}.\", Ladder.GetLevel( entry.Experience ), entry.Wins, entry.Wins==1?\"\":\"s\", entry.Losses, entry.Losses==1?\"\":\"es\" ) );\n\t\t\t\t\t\t//pm.PublicOverheadMessage( MessageType.Regular, pm.SpeechHue, true, String.Format( \"Level {0} with {1} win{2} and {3} loss{4}.\", Ladder.GetLevel( entry.Experience ), entry.Wins, entry.Wins==1?\"\":\"s\", entry.Losses, entry.Losses==1?\"\":\"es\" ) );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if ( Insensitive.Equals( e.Speech, \"viewladder\" ) )\n\t\t\t{\n\t\t\t\te.Blocked=true;\n\t\t\t\tif ( !pm.CheckAlive() )\n\t\t\t\t{\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tLadder instance = Ladder.Instance;\n\t\t\t\t\tif ( instance == null )\n\t\t\t\t\t{\n\t\t\t\t\t\t//pm.SendMessage( \"Ladder not yet initialized.\" );\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tpm.SendMessage( \"Target a player to view their ranking and level.\" );\n\t\t\t\t\t\tpm.BeginTarget( 16, false, Targeting.TargetFlags.None, new TargetStateCallback( ViewLadder_OnTarget ), instance );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if ( Insensitive.Contains( e.Speech, \"i yield\" ) )\n\t\t\t{\n\t\t\t\tif ( !pm.CheckAlive() )\n\t\t\t\t{\n\t\t\t\t}\n\t\t\t\telse if ( pm.DuelContext == null )\n\t\t\t\t{\n\t\t\t\t}\n\t\t\t\telse if ( pm.DuelContext.Finished )\n\t\t\t\t{\n\t\t\t\t\te.Mobile.SendMessage( 0x22, \"The duel is already finished.\" );\n\t\t\t\t}\n\t\t\t\telse if ( !pm.DuelContext.Started )\n\t\t\t\t{\n\t\t\t\t\tDuelContext dc = pm.DuelContext;\n\t\t\t\t\tMobile init = dc.Initiator;\n\t\t\t\t\tif ( pm.DuelContext.StartedBeginCountdown )\n\t\t\t\t\t{\n\t\t\t\t\t\te.Mobile.SendMessage( 0x22, \"The duel has not yet started.\" );\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tDuelPlayer pl = pm.DuelContext.Find( pm );\n\t\t\t\t\t\tif ( pl == null )\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\tParticipant p = pl.Participant;\n\t\t\t\t\t\tif ( !pm.DuelContext.ReadyWait ) // still setting stuff up\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tp.Broadcast( 0x22, null, \"{0} has yielded.\", \"You have yielded.\" );\n\t\t\t\t\t\t\tif ( init == pm )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdc.Unregister();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tp.Nullify( pl );\n\t\t\t\t\t\t\t\tpm.DuelPlayer=null;\n\t\t\t\t\t\t\t\tNetState ns = init.NetState;\n\t\t\t\t\t\t\t\tif ( ns != null )\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tforeach ( Gump g in ns.Gumps )\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif ( g is ParticipantGump )\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tParticipantGump pg = (ParticipantGump)g;\n\t\t\t\t\t\t\t\t\t\t\tif ( pg.Participant == p )\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tinit.SendGump( new ParticipantGump( init, dc, p ) );\n\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\telse if ( g is DuelContextGump )\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tDuelContextGump dcg = (DuelContextGump)g;\n\t\t\t\t\t\t\t\t\t\t\tif ( dcg.Context == dc )\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tinit.SendGump( new DuelContextGump( init, dc ) );\n\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if ( !pm.DuelContext.StartedReadyCountdown ) // at ready stage\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tp.Broadcast( 0x22, null, \"{0} has yielded.\", \"You have yielded.\" );\n\t\t\t\t\t\t\tdc.m_Yielding=true;\n\t\t\t\t\t\t\tdc.RejectReady( pm, null );\n\t\t\t\t\t\t\tdc.m_Yielding=false;\n\t\t\t\t\t\t\tif ( init == pm )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdc.Unregister();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if ( dc.m_Registered )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tp.Nullify( pl );\n\t\t\t\t\t\t\t\tpm.DuelPlayer=null;\n\t\t\t\t\t\t\t\tNetState ns = init.NetState;\n\t\t\t\t\t\t\t\tif ( ns != null )\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tbool send=true;\n\t\t\t\t\t\t\t\t\tforeach ( Gump g in ns.Gumps )\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif ( g is ParticipantGump )\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tParticipantGump pg = (ParticipantGump)g;\n\t\t\t\t\t\t\t\t\t\t\tif ( pg.Participant == p )\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tinit.SendGump( new ParticipantGump( init, dc, p ) );\n\t\t\t\t\t\t\t\t\t\t\t\tsend=false;\n\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\telse if ( g is DuelContextGump )\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tDuelContextGump dcg = (DuelContextGump)g;\n\t\t\t\t\t\t\t\t\t\t\tif ( dcg.Context == dc )\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tinit.SendGump( new DuelContextGump( init, dc ) );\n\t\t\t\t\t\t\t\t\t\t\t\tsend=false;\n\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tif ( send )\n\t\t\t\t\t\t\t\t\t\tinit.SendGump( new DuelContextGump( init, dc ) );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif ( pm.DuelContext.m_Countdown != null )\n\t\t\t\t\t\t\t\tpm.DuelContext.m_Countdown.Stop();\n\t\t\t\t\t\t\tpm.DuelContext.m_Countdown= null;\n\t\t\t\t\t\t\tpm.DuelContext.m_StartedReadyCountdown=false;\n\t\t\t\t\t\t\tp.Broadcast( 0x22, null, \"{0} has yielded.\", \"You have yielded.\" );\n\t\t\t\t\t\t\tdc.m_Yielding=true;\n\t\t\t\t\t\t\tdc.RejectReady( pm, null );\n\t\t\t\t\t\t\tdc.m_Yielding=false;\n\t\t\t\t\t\t\tif ( init == pm )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdc.Unregister();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if ( dc.m_Registered )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tp.Nullify( pl );\n\t\t\t\t\t\t\t\tpm.DuelPlayer=null;\n\t\t\t\t\t\t\t\tNetState ns = init.NetState;\n\t\t\t\t\t\t\t\tif ( ns != null )\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tbool send=true;\n\t\t\t\t\t\t\t\t\tforeach ( Gump g in ns.Gumps )\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif ( g is ParticipantGump )\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tParticipantGump pg = (ParticipantGump)g;\n\t\t\t\t\t\t\t\t\t\t\tif ( pg.Participant == p )\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tinit.SendGump( new ParticipantGump( init, dc, p ) );\n\t\t\t\t\t\t\t\t\t\t\t\tsend=false;\n\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\telse if ( g is DuelContextGump )\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tDuelContextGump dcg = (DuelContextGump)g;\n\t\t\t\t\t\t\t\t\t\t\tif ( dcg.Context == dc )\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tinit.SendGump( new DuelContextGump( init, dc ) );\n\t\t\t\t\t\t\t\t\t\t\t\tsend=false;\n\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tif ( send )\n\t\t\t\t\t\t\t\t\t\tinit.SendGump( new DuelContextGump( init, dc ) );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tDuelPlayer pl = pm.DuelContext.Find( pm );\n\t\t\t\t\tif ( pl != null )\n\t\t\t\t\t{\n\t\t\t\t\t\tif ( pm.DuelContext.IsOneVsOne )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\te.Mobile.SendMessage( 0x22, \"You may not yield a 1 on 1 match.\" );\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if ( pl.Eliminated )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\te.Mobile.SendMessage( 0x22, \"You have already been eliminated.\" );\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpm.LocalOverheadMessage( MessageType.Regular, 0x22, false, \"You have yielded.\" );\n\t\t\t\t\t\t\tpm.NonlocalOverheadMessage( MessageType.Regular, 0x22, false, String.Format( \"{0} has yielded.\", pm.Name ) );\n\t\t\t\t\t\t\tpm.DuelContext.m_Yielding=true;\n\t\t\t\t\t\t\tpm.Kill();\n\t\t\t\t\t\t\tpm.DuelContext.m_Yielding=false;\n\t\t\t\t\t\t\tif ( pm.Alive ) // invul, ...\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tpl.Eliminated = true;\n\t\t\t\t\t\t\t\tpm.DuelContext.RemoveAggressions( pm );\n\t\t\t\t\t\t\t\tpm.DuelContext.SendOutside( pm );\n\t\t\t\t\t\t\t\tpm.DuelContext.Refresh( pm, null );\n\t\t\t\t\t\t\t\tDebuff( pm );\n\t\t\t\t\t\t\t\tCancelSpell( pm );\n\t\t\t\t\t\t\t\tpm.Frozen = false;\n\t\t\t\t\t\t\t\tParticipant winner = pm.DuelContext.CheckCompletion();\n\t\t\t\t\t\t\t\tif ( winner != null )\n\t\t\t\t\t\t\t\t\tpm.DuelContext.Finish( winner );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\te.Mobile.SendMessage( 0x22, \"BUG: Unable to find duel context.\" );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tpublic DuelContext( Mobile initiator, RulesetLayout layout ) : this( initiator, layout, true )\n\t\t{\n\t\t}\n\t\tpublic DuelContext( Mobile initiator, RulesetLayout layout, bool addNew )\n\t\t{\n\t\t\tm_Initiator = initiator;\n\t\t\tm_Participants = new ArrayList();\n\t\t\tm_Ruleset = new Ruleset( layout );\n\t\t\tm_Ruleset.ApplyDefault( layout.Defaults[0] );\n\t\t\tif ( addNew )\n\t\t\t{\n\t\t\t\tm_Participants.Add( new Participant( this, 1 ) );\n\t\t\t\tm_Participants.Add( new Participant( this, 1 ) );\n\t\t\t\t((Participant)m_Participants[0]).Add( initiator );\n\t\t\t}\n\t\t}\n\t\tpublic void CloseAllGumps()\n\t\t{\n\t\t\tType[] types = new Type[]{ typeof( DuelContextGump ), typeof( ParticipantGump ), typeof( RulesetGump ) };\n\t\t\tint[] defs = new int[]{ -1, -1, -1 };\n\t\t\tfor ( int i = 0; i < m_Participants.Count; ++i )\n\t\t\t{\nNext line of code:\n", "input": "", "context": "using System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing Server.Commands;\nusing Server.Engines.PartySystem;\nusing Server.Factions;\nusing Server.Gumps;\nusing Server.Items;\nusing Server.Mobiles;\nusing Server.Network;\nusing Server.Spells;\nusing Server.Spells.Bushido;\nusing Server.Spells.Chivalry;\nusing Server.Spells.Necromancy;\nusing Server.Spells.Ninjitsu;\nusing Server.Spells.Seventh;\nusing Server.Spells.Spellweaving;\nnamespace Server.Engines.ConPVP\n{\n    public delegate void CountdownCallback( int count );\n\tpublic class DuelContext\n\t{\n\t\tprivate Mobile m_Initiator;\n\t\tprivate ArrayList m_Participants;\n\t\tprivate Ruleset m_Ruleset;\n\t\tprivate Arena m_Arena;\n\t\tprivate bool m_Registered = true;\n\t\tprivate bool m_Finished, m_Started;\n\t\tprivate bool m_ReadyWait;\n\t\tprivate int m_ReadyCount;\n\t\tprivate bool m_Rematch;\n\t\tpublic bool Rematch{ get{ return m_Rematch; } }\n\t\tpublic bool ReadyWait{ get{ return m_ReadyWait; } }\n\t\tpublic int ReadyCount{ get{ return m_ReadyCount; } }\n\t\tpublic bool Registered{ get{ return m_Registered; } }\n\t\tpublic bool Finished{ get{ return m_Finished; } }\n\t\tpublic bool Started{ get{ return m_Started; } }\n\t\tpublic Mobile Initiator{ get{ return m_Initiator; } }\n\t\tpublic ArrayList Participants{ get{ return m_Participants; } }\n\t\tpublic Ruleset Ruleset{ get{ return m_Ruleset; } }\n\t\tpublic Arena Arena{ get{ return m_Arena; } }\n\t\tprivate bool CantDoAnything( Mobile mob )\n\t\t{\n\t\t\tif ( m_EventGame != null )\n\t\t\t\treturn m_EventGame.CantDoAnything( mob );\n\t\t\telse\n\t\t\t\treturn false;\n\t\t}\n\t\tpublic static bool IsFreeConsume( Mobile mob )\n\t\t{\n\t\t\tPlayerMobile pm = mob as PlayerMobile;\n\t\t\tif ( pm == null || pm.DuelContext == null || pm.DuelContext.m_EventGame == null )\n\t\t\t\treturn false;\n\t\t\treturn pm.DuelContext.m_EventGame.FreeConsume;\n\t\t}\n\t\tpublic void DelayBounce( TimeSpan ts, Mobile mob, Container corpse )\n\t\t{\n\t\t\tTimer.DelayCall( ts, new TimerStateCallback( DelayBounce_Callback ), new object[]{ mob, corpse } );\n\t\t}\n\t\tpublic static bool AllowSpecialMove( Mobile from, string name, SpecialMove move )\n\t\t{\n\t\t\tPlayerMobile pm = from as PlayerMobile;\n\t\t\tif( pm == null )\n\t\t\t\treturn true;\n\t\t\tDuelContext dc = pm.DuelContext;\n\t\t\treturn (dc == null || dc.InstAllowSpecialMove( from, name, move ));\n\t\t}\n\t\tpublic bool InstAllowSpecialMove( Mobile from, string name, SpecialMove move )\n\t\t{\n\t\t\tif ( !m_StartedBeginCountdown )\n\t\t\t\treturn true;\n\t\t\tDuelPlayer pl = Find( from );\n\t\t\tif ( pl == null || pl.Eliminated )\n\t\t\t\treturn true;\n\t\t\tif ( CantDoAnything( from ) )\n\t\t\t\treturn false;\n\t\t\tstring title = null;\n\t\t\tif( move is NinjaMove )\n\t\t\t\ttitle = \"Bushido\";\n\t\t\telse if( move is SamuraiMove )\n\t\t\t\ttitle = \"Ninjitsu\";\n\t\t\tif ( title == null || name == null || m_Ruleset.GetOption( title, name ) )\n\t\t\t\treturn true;\n\t\t\tfrom.SendMessage( \"The dueling ruleset prevents you from using this move.\" );\n\t\t\treturn false;\n\t\t}\n\t\tpublic bool AllowSpellCast( Mobile from, Spell spell )\n\t\t{\n\t\t\tif ( !m_StartedBeginCountdown )\n\t\t\t\treturn true;\n\t\t\tDuelPlayer pl = Find( from );\n\t\t\tif ( pl == null || pl.Eliminated )\n\t\t\t\treturn true;\n\t\t\tif ( CantDoAnything( from ) )\n\t\t\t\treturn false;\n\t\t\tif ( spell is Server.Spells.Fourth.RecallSpell )\n\t\t\t\tfrom.SendMessage( \"You may not cast this spell.\" );\n\t\t\tstring title = null, option = null;\n\t\t\tif( spell is ArcanistSpell )\n\t\t\t{\n\t\t\t\ttitle = \"Spellweaving\";\n\t\t\t\toption = spell.Name;\n\t\t\t}\n\t\t\telse if ( spell is PaladinSpell )\n\t\t\t{\n\t\t\t\ttitle = \"Chivalry\";\n\t\t\t\toption = spell.Name;\n\t\t\t}\n\t\t\telse if ( spell is NecromancerSpell )\n\t\t\t{\n\t\t\t\ttitle = \"Necromancy\";\n\t\t\t\toption = spell.Name;\n\t\t\t}\n\t\t\telse if ( spell is NinjaSpell )\n\t\t\t{\n\t\t\t\ttitle = \"Ninjitsu\";\n\t\t\t\toption = spell.Name;\n\t\t\t}\n\t\t\telse if ( spell is SamuraiSpell )\n\t\t\t{\n\t\t\t\ttitle = \"Bushido\";\n\t\t\t\toption = spell.Name;\n\t\t\t}\n\t\t\telse if( spell is MagerySpell )\n\t\t\t{\n\t\t\t\tswitch( ((MagerySpell)spell).Circle )\n\t\t\t\t{\n\t\t\t\t\tcase SpellCircle.First: title = \"1st Circle\"; break;\n\t\t\t\t\tcase SpellCircle.Second: title = \"2nd Circle\"; break;\n\t\t\t\t\tcase SpellCircle.Third: title = \"3rd Circle\"; break;\n\t\t\t\t\tcase SpellCircle.Fourth: title = \"4th Circle\"; break;\n\t\t\t\t\tcase SpellCircle.Fifth: title = \"5th Circle\"; break;\n\t\t\t\t\tcase SpellCircle.Sixth: title = \"6th Circle\"; break;\n\t\t\t\t\tcase SpellCircle.Seventh: title = \"7th Circle\"; break;\n\t\t\t\t\tcase SpellCircle.Eighth: title = \"8th Circle\"; break;\n\t\t\t\t}\n\t\t\t\toption = spell.Name;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\ttitle = \"Other Spell\";\n\t\t\t\toption = spell.Name;\n\t\t\t}\n\t\t\tif ( title == null || option == null || m_Ruleset.GetOption( title, option ) )\n\t\t\t\treturn true;\n\t\t\tfrom.SendMessage( \"The dueling ruleset prevents you from casting this spell.\" );\n\t\t\treturn false;\n\t\t}\n\t\tpublic bool AllowItemEquip( Mobile from, Item item )\n\t\t{\n\t\t\tif ( !m_StartedBeginCountdown )\n\t\t\t\treturn true;\n\t\t\tDuelPlayer pl = Find( from );\n\t\t\tif ( pl == null || pl.Eliminated )\n\t\t\t\treturn true;\n\t\t\tif ( item is Dagger || CheckItemEquip( from, item ) )\n\t\t\t\treturn true;\n\t\t\tfrom.SendMessage( \"The dueling ruleset prevents you from equiping this item.\" );\n\t\t\treturn false;\n\t\t}\n\t\tpublic static bool AllowSpecialAbility( Mobile from, string name, bool message )\n\t\t{\n\t\t\tPlayerMobile pm = from as PlayerMobile;\n\t\t\tif ( pm == null )\n\t\t\t\treturn true;\n\t\t\tDuelContext dc = pm.DuelContext;\n\t\t\treturn ( dc == null || dc.InstAllowSpecialAbility( from, name, message ) );\n\t\t}\n\t\tpublic bool InstAllowSpecialAbility( Mobile from, string name, bool message )\n\t\t{\n\t\t\tif ( !m_StartedBeginCountdown )\n\t\t\t\treturn true;\n\t\t\tDuelPlayer pl = Find( from );\n\t\t\tif ( pl == null || pl.Eliminated )\n\t\t\t\treturn true;\n\t\t\tif ( CantDoAnything( from ) )\n\t\t\t\treturn false;\n\t\t\tif ( m_Ruleset.GetOption( \"Combat Abilities\", name ) )\n\t\t\t\treturn true;\n\t\t\tif ( message )\n\t\t\t\tfrom.SendMessage( \"The dueling ruleset prevents you from using this combat ability.\" );\n\t\t\treturn false;\n\t\t}\n\t\tpublic bool CheckItemEquip( Mobile from, Item item )\n\t\t{\n\t\t\tif ( item is Fists )\n\t\t\t{\n\t\t\t\tif ( !m_Ruleset.GetOption( \"Weapons\", \"Wrestling\" ) )\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if ( item is BaseArmor )\n\t\t\t{\n\t\t\t\tBaseArmor armor = (BaseArmor)item;\n\t\t\t\tif ( armor.ProtectionLevel > ArmorProtectionLevel.Regular && !m_Ruleset.GetOption( \"Armor\", \"Magical\" ) )\n\t\t\t\t\treturn false;\n\t\t\t\tif ( !Core.AOS && armor.Resource != armor.DefaultResource && !m_Ruleset.GetOption( \"Armor\", \"Colored\" ) )\n\t\t\t\t\treturn false;\n\t\t\t\tif ( armor is BaseShield && !m_Ruleset.GetOption( \"Armor\", \"Shields\" ) )\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if ( item is BaseWeapon )\n\t\t\t{\n\t\t\t\tBaseWeapon weapon = (BaseWeapon)item;\n\t\t\t\tif ( (weapon.DamageLevel > WeaponDamageLevel.Regular || weapon.AccuracyLevel > WeaponAccuracyLevel.Regular) && !m_Ruleset.GetOption( \"Weapons\", \"Magical\" ) )\n\t\t\t\t\treturn false;\n\t\t\t\tif ( !Core.AOS && weapon.Resource != CraftResource.Iron && weapon.Resource != CraftResource.None && !m_Ruleset.GetOption( \"Weapons\", \"Runics\" ) )\n\t\t\t\t\treturn false;\n\t\t\t\tif ( weapon is BaseRanged && !m_Ruleset.GetOption( \"Weapons\", \"Ranged\" ) )\n\t\t\t\t\treturn false;\n\t\t\t\tif ( !(weapon is BaseRanged) && !m_Ruleset.GetOption( \"Weapons\", \"Melee\" ) )\n\t\t\t\t\treturn false;\n\t\t\t\tif ( weapon.PoisonCharges > 0 && weapon.Poison != null && !m_Ruleset.GetOption( \"Weapons\", \"Poisoned\" ) )\n\t\t\t\t\treturn false;\n\t\t\t\tif ( weapon is BaseWand && !m_Ruleset.GetOption( \"Items\", \"Wands\" ) )\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\tpublic bool AllowSkillUse( Mobile from, SkillName skill )\n\t\t{\n\t\t\tif ( !m_StartedBeginCountdown )\n\t\t\t\treturn true;\n\t\t\tDuelPlayer pl = Find( from );\n\t\t\tif ( pl == null || pl.Eliminated )\n\t\t\t\treturn true;\n\t\t\tif ( CantDoAnything( from ) )\n\t\t\t\treturn false;\n\t\t\tint id = (int)skill;\n\t\t\tif ( id >= 0 && id < SkillInfo.Table.Length )\n\t\t\t{\n\t\t\t\tif ( m_Ruleset.GetOption( \"Skills\", SkillInfo.Table[id].Name ) )\n\t\t\t\t\treturn true;\n\t\t\t}\n\t\t\tfrom.SendMessage( \"The dueling ruleset prevents you from using this skill.\" );\n\t\t\treturn false;\n\t\t}\n\t\tpublic bool AllowItemUse( Mobile from, Item item )\n\t\t{\n\t\t\tif ( !m_StartedBeginCountdown )\n\t\t\t\treturn true;\n\t\t\tDuelPlayer pl = Find( from );\n\t\t\tif ( pl == null || pl.Eliminated )\n\t\t\t\treturn true;\n\t\t\tif ( !(item is BaseRefreshPotion) )\n\t\t\t{\n\t\t\t\tif ( CantDoAnything( from ) )\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t\tstring title = null, option = null;\n\t\t\tif ( item is BasePotion )\n\t\t\t{\n\t\t\t\ttitle = \"Potions\";\n\t\t\t\tif ( item is BaseAgilityPotion )\n\t\t\t\t\toption = \"Agility\";\n\t\t\t\telse if ( item is BaseCurePotion )\n\t\t\t\t\toption = \"Cure\";\n\t\t\t\telse if ( item is BaseHealPotion )\n\t\t\t\t\toption = \"Heal\";\n\t\t\t\telse if ( item is NightSightPotion )\n\t\t\t\t\toption = \"Nightsight\";\n\t\t\t\telse if ( item is BasePoisonPotion )\n\t\t\t\t\toption = \"Poison\";\n\t\t\t\telse if ( item is BaseStrengthPotion )\n\t\t\t\t\toption = \"Strength\";\n\t\t\t\telse if ( item is BaseExplosionPotion )\n\t\t\t\t\toption = \"Explosion\";\n\t\t\t\telse if ( item is BaseRefreshPotion )\n\t\t\t\t\toption = \"Refresh\";\n\t\t\t}\n\t\t\telse if ( item is Bandage )\n\t\t\t{\n\t\t\t\ttitle = \"Items\";\n\t\t\t\toption = \"Bandages\";\n\t\t\t}\n\t\t\telse if ( item is TrapableContainer )\n\t\t\t{\n\t\t\t\tif ( ((TrapableContainer)item).TrapType != TrapType.None )\n\t\t\t\t{\n\t\t\t\t\ttitle = \"Items\";\n\t\t\t\t\toption = \"Trapped Containers\";\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if ( item is Bola )\n\t\t\t{\n\t\t\t\ttitle = \"Items\";\n\t\t\t\toption = \"Bolas\";\n\t\t\t}\n\t\t\telse if ( item is OrangePetals )\n\t\t\t{\n\t\t\t\ttitle = \"Items\";\n\t\t\t\toption = \"Orange Petals\";\n\t\t\t}\n\t\t\telse if ( item is EtherealMount || item.Layer == Layer.Mount )\n\t\t\t{\n\t\t\t\ttitle = \"Items\";\n\t\t\t\toption = \"Mounts\";\n\t\t\t}\n\t\t\telse if ( item is LeatherNinjaBelt )\n\t\t\t{\n\t\t\t\ttitle = \"Items\";\n\t\t\t\toption = \"Shurikens\";\n\t\t\t}\n\t\t\telse if ( item is Fukiya )\n\t\t\t{\n\t\t\t\ttitle = \"Items\";\n\t\t\t\toption = \"Fukiya Darts\";\n\t\t\t}\n\t\t\telse if ( item is FireHorn )\n\t\t\t{\n\t\t\t\ttitle = \"Items\";\n\t\t\t\toption = \"Fire Horns\";\n\t\t\t}\n\t\t\telse if ( item is BaseWand )\n\t\t\t{\n\t\t\t\ttitle = \"Items\";\n\t\t\t\toption = \"Wands\";\n\t\t\t}\n\t\t\tif ( title != null && option != null && m_StartedBeginCountdown && !m_Started )\n\t\t\t{\n\t\t\t\tfrom.SendMessage( \"You may not use this item before the duel begins.\" );\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if ( item is BasePotion && !(item is BaseExplosionPotion) && !(item is BaseRefreshPotion) && IsSuddenDeath )\n\t\t\t{\n\t\t\t\tfrom.SendMessage( 0x22, \"You may not drink potions in sudden death.\" );\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if ( item is Bandage && IsSuddenDeath )\n\t\t\t{\n\t\t\t\tfrom.SendMessage( 0x22, \"You may not use bandages in sudden death.\" );\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif ( title == null || option == null || m_Ruleset.GetOption( title, option ) )\n\t\t\t\treturn true;\n\t\t\tfrom.SendMessage( \"The dueling ruleset prevents you from using this item.\" );\n\t\t\treturn false;\n\t\t}\n\t\tprivate void DelayBounce_Callback( object state )\n\t\t{\n\t\t\tobject[] states = (object[])state;\n\t\t\tMobile mob = (Mobile) states[0];\n\t\t\tContainer corpse = (Container) states[1];\n\t\t\tRemoveAggressions( mob );\n\t\t\tSendOutside( mob );\n\t\t\tRefresh( mob, corpse );\n\t\t\tDebuff( mob );\n\t\t\tCancelSpell( mob );\n\t\t\tmob.Frozen = false;\n\t\t}\n\t\tpublic void OnMapChanged( Mobile mob )\n\t\t{\n\t\t\tOnLocationChanged( mob );\n\t\t}\n\t\tpublic void OnLocationChanged( Mobile mob )\n\t\t{\n\t\t\tif ( !m_Registered || !m_StartedBeginCountdown || m_Finished )\n\t\t\t\treturn;\n\t\t\tArena arena = m_Arena;\n\t\t\tif ( arena == null )\n\t\t\t\treturn;\n\t\t\tif ( mob.Map == arena.Facet && arena.Bounds.Contains( mob.Location ) )\n\t\t\t\treturn;\n\t\t\tDuelPlayer pl = Find( mob );\n\t\t\tif ( pl == null || pl.Eliminated )\n\t\t\t\treturn;\n\t\t\tif ( mob.Map == Map.Internal ) {\n\t\t\t\t// they've logged out\n\t\t\t\tif ( mob.LogoutMap == arena.Facet && arena.Bounds.Contains( mob.LogoutLocation ) ) {\n\t\t\t\t\t// they logged out inside the arena.. set them to eject on login\n\t\t\t\t\tmob.LogoutLocation = arena.Outside;\n\t\t\t\t}\n\t\t\t}\n\t\t\tpl.Eliminated = true;\n\t\t\tmob.LocalOverheadMessage( MessageType.Regular, 0x22, false, \"You have forfeited your position in the duel.\" );\n\t\t\tmob.NonlocalOverheadMessage( MessageType.Regular, 0x22, false, String.Format( \"{0} has forfeited by leaving the dueling arena.\", mob.Name ) );\n\t\t\tParticipant winner = CheckCompletion();\n\t\t\tif ( winner != null )\n\t\t\t\tFinish( winner );\n\t\t}\n\t\tprivate bool m_Yielding;\n\t\tpublic void OnDeath( Mobile mob, Container corpse )\n\t\t{\n\t\t\tif ( !m_Registered || !m_Started )\n\t\t\t\treturn;\n\t\t\tDuelPlayer pl = Find( mob );\n\t\t\tif ( pl != null && !pl.Eliminated )\n\t\t\t{\n\t\t\t\tif ( m_EventGame != null && !m_EventGame.OnDeath( mob, corpse ) )\n\t\t\t\t\treturn;\n\t\t\t\tpl.Eliminated = true;\n\t\t\t\tif ( mob.Poison != null )\n\t\t\t\t\tmob.Poison = null;\n\t\t\t\tRequip( mob, corpse );\n\t\t\t\tDelayBounce( TimeSpan.FromSeconds( 4.0 ), mob, corpse );\n\t\t\t\tParticipant winner = CheckCompletion();\n\t\t\t\tif ( winner != null )\n\t\t\t\t{\n\t\t\t\t\tFinish( winner );\n\t\t\t\t}\n\t\t\t\telse if ( !m_Yielding )\n\t\t\t\t{\n\t\t\t\t\tmob.LocalOverheadMessage( MessageType.Regular, 0x22, false, \"You have been defeated.\" );\n\t\t\t\t\tmob.NonlocalOverheadMessage( MessageType.Regular, 0x22, false, String.Format( \"{0} has been defeated.\", mob.Name ) );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tpublic bool CheckFull()\n\t\t{\n\t\t\tfor ( int i = 0; i < m_Participants.Count; ++i )\n\t\t\t{\n\t\t\t\tParticipant p = (Participant)m_Participants[i];\n\t\t\t\tif ( p.HasOpenSlot )\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\tpublic void Requip( Mobile from, Container cont )\n\t\t{\n\t\t\tCorpse corpse = cont as Corpse;\n\t\t\tif ( corpse == null )\n\t\t\t\treturn;\n\t\t\tList<Item> items = new List<Item>( corpse.Items );\n\t\t\tbool gathered = false;\n\t\t\tbool didntFit = false;\n\t\t\tContainer pack = from.Backpack;\n\t\t\tfor ( int i = 0; !didntFit && i < items.Count; ++i )\n\t\t\t{\n\t\t\t\tItem item = items[i];\n\t\t\t\tPoint3D loc = item.Location;\n\t\t\t\tif ( (item.Layer == Layer.Hair || item.Layer == Layer.FacialHair) || !item.Movable )\n\t\t\t\t\tcontinue;\n\t\t\t\tif ( pack != null )\n\t\t\t\t{\n\t\t\t\t\tpack.DropItem( item );\n\t\t\t\t\tgathered = true;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tdidntFit = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcorpse.Carved = true;\n\t\t\tif ( corpse.ItemID == 0x2006 )\n\t\t\t{\n\t\t\t\tcorpse.ProcessDelta();\n\t\t\t\tcorpse.SendRemovePacket();\n\t\t\t\tcorpse.ItemID = Utility.Random( 0xECA, 9 ); // bone graphic\n\t\t\t\tcorpse.Hue = 0;\n\t\t\t\tcorpse.ProcessDelta();\n\t\t\t\tMobile killer = from.FindMostRecentDamager( false );\n\t\t\t\tif ( killer != null && killer.Player )\n\t\t\t\t\tkiller.AddToBackpack( new Head( m_Tournament == null ? HeadType.Duel : HeadType.Tournament, from.Name ) );\n\t\t\t}\n\t\t\tfrom.PlaySound( 0x3E3 );\n\t\t\tif ( gathered && !didntFit )\n\t\t\t\tfrom.SendLocalizedMessage( 1062471 ); // You quickly gather all of your belongings.\n\t\t\telse if ( gathered && didntFit )\n\t\t\t\tfrom.SendLocalizedMessage( 1062472 ); // You gather some of your belongings. The rest remain on the corpse.\n\t\t}\n\t\tpublic void Refresh( Mobile mob, Container cont )\n\t\t{\n\t\t\tif ( !mob.Alive )\n\t\t\t{\n\t\t\t\tmob.Resurrect();\n\t\t\t\tDeathRobe robe = mob.FindItemOnLayer( Layer.OuterTorso ) as DeathRobe;\n\t\t\t\tif ( robe != null )\n\t\t\t\t\trobe.Delete();\n\t\t\t\tif ( cont is Corpse )\n\t\t\t\t{\n\t\t\t\t\tCorpse corpse = (Corpse) cont;\n\t\t\t\t\tfor ( int i = 0; i < corpse.EquipItems.Count; ++i )\n\t\t\t\t\t{\n\t\t\t\t\t\tItem item = corpse.EquipItems[i];\n\t\t\t\t\t\tif ( item.Movable && item.Layer != Layer.Hair && item.Layer != Layer.FacialHair && item.IsChildOf( mob.Backpack ) )\n\t\t\t\t\t\t\tmob.EquipItem( item );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tmob.Hits = mob.HitsMax;\n\t\t\tmob.Stam = mob.StamMax;\n\t\t\tmob.Mana = mob.ManaMax;\n\t\t\tmob.Poison = null;\n\t\t}\n\t\tpublic void SendOutside( Mobile mob )\n\t\t{\n\t\t\tif ( m_Arena == null )\n\t\t\t\treturn;\n\t\t\tmob.Combatant = null;\n\t\t\tmob.MoveToWorld( m_Arena.Outside, m_Arena.Facet );\n\t\t}\n\t\tprivate Point3D m_GatePoint;\n\t\tprivate Map m_GateFacet;\n\t\tpublic void Finish( Participant winner )\n\t\t{\n\t\t\tif ( m_Finished )\n\t\t\t\treturn;\n\t\t\tEndAutoTie();\n\t\t\tStopSDTimers();\n\t\t\tm_Finished = true;\n\t\t\tfor ( int i = 0; i < winner.Players.Length; ++i )\n\t\t\t{\n\t\t\t\tDuelPlayer pl = winner.Players[i];\n\t\t\t\tif ( pl != null && !pl.Eliminated )\n\t\t\t\t\tDelayBounce( TimeSpan.FromSeconds( 8.0 ), pl.Mobile, null );\n\t\t\t}\n\t\t\twinner.Broadcast( 0x59, null, winner.Players.Length == 1 ? \"{0} has won the duel.\" : \"{0} and {1} team have won the duel.\", winner.Players.Length == 1 ? \"You have won the duel.\" : \"Your team has won the duel.\" );\n\t\t\tif ( m_Tournament != null && winner.TournyPart != null )\n\t\t\t{\n\t\t\t\tm_Match.Winner = winner.TournyPart;\n\t\t\t\twinner.TournyPart.WonMatch( m_Match );\n\t\t\t\tm_Tournament.HandleWon( m_Arena, m_Match, winner.TournyPart );\n\t\t\t}\n\t\t\tfor ( int i = 0; i < m_Participants.Count; ++i )\n\t\t\t{\n\t\t\t\tParticipant loser = (Participant)m_Participants[i];\n\t\t\t\tif ( loser != winner )\n\t\t\t\t{\n\t\t\t\t\tloser.Broadcast( 0x22, null, loser.Players.Length == 1 ? \"{0} has lost the duel.\" : \"{0} and {1} team have lost the duel.\", loser.Players.Length == 1 ? \"You have lost the duel.\" : \"Your team has lost the duel.\" );\n\t\t\t\t\tif ( m_Tournament != null && loser.TournyPart != null )\n\t\t\t\t\t\tloser.TournyPart.LostMatch( m_Match );\n\t\t\t\t}\n\t\t\t\tfor ( int j = 0; j < loser.Players.Length; ++j )\n\t\t\t\t{\n\t\t\t\t\tif ( loser.Players[j] != null )\n\t\t\t\t\t{\n\t\t\t\t\t\tRemoveAggressions( loser.Players[j].Mobile );\n\t\t\t\t\t\tloser.Players[j].Mobile.Delta( MobileDelta.Noto );\n\t\t\t\t\t\tloser.Players[j].Mobile.CloseGump( typeof( BeginGump ) );\n\t\t\t\t\t\tif ( m_Tournament != null )\n\t\t\t\t\t\t\tloser.Players[j].Mobile.SendEverything();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( IsOneVsOne )\n\t\t\t{\n\t\t\t\tDuelPlayer dp1 = ((Participant)m_Participants[0]).Players[0];\n\t\t\t\tDuelPlayer dp2 = ((Participant)m_Participants[1]).Players[0];\n\t\t\t\tif ( dp1 != null && dp2 != null )\n\t\t\t\t{\n\t\t\t\t\tAward( dp1.Mobile, dp2.Mobile, dp1.Participant == winner );\n\t\t\t\t\tAward( dp2.Mobile, dp1.Mobile, dp2.Participant == winner );\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( m_EventGame != null )\n\t\t\t\tm_EventGame.OnStop();\n\t\t\tTimer.DelayCall( TimeSpan.FromSeconds( 9.0 ), new TimerCallback( UnregisterRematch ) );\n\t\t}\n\t\tpublic void Award( Mobile us, Mobile them, bool won )\n\t\t{\n\t\t\tLadder ladder = ( m_Arena == null ? Ladder.Instance : m_Arena.AcquireLadder() );\n\t\t\tif ( ladder == null )\n\t\t\t\treturn;\n\t\t\tLadderEntry ourEntry = ladder.Find( us );\n\t\t\tLadderEntry theirEntry = ladder.Find( them );\n\t\t\tif ( ourEntry == null || theirEntry == null )\n\t\t\t\treturn;\n\t\t\tint xpGain = Ladder.GetExperienceGain( ourEntry, theirEntry, won );\n\t\t\tif ( xpGain == 0 )\n\t\t\t\treturn;\n\t\t\tif ( m_Tournament != null )\n\t\t\t\txpGain *= ( xpGain > 0 ? 5 : 2 );\n\t\t\tif ( won )\n\t\t\t\t++ourEntry.Wins;\n\t\t\telse\n\t\t\t\t++ourEntry.Losses;\n\t\t\tint oldLevel = Ladder.GetLevel( ourEntry.Experience );\n\t\t\tourEntry.Experience += xpGain;\n\t\t\tif ( ourEntry.Experience < 0 )\n\t\t\t\tourEntry.Experience = 0;\n\t\t\tladder.UpdateEntry( ourEntry );\n\t\t\tint newLevel = Ladder.GetLevel( ourEntry.Experience );\n\t\t\tif ( newLevel > oldLevel )\n\t\t\t\tus.SendMessage( 0x59, \"You have achieved level {0}!\", newLevel );\n\t\t\telse if ( newLevel < oldLevel )\n\t\t\t\tus.SendMessage( 0x22, \"You have lost a level. You are now at {0}.\", newLevel );\n\t\t}\n\t\tpublic void UnregisterRematch()\n\t\t{\n\t\t\tUnregister(true);\n\t\t}\n\t\tpublic void Unregister()\n\t\t{\n\t\t\tUnregister(false);\n\t\t}\n\t\tpublic void Unregister( bool queryRematch )\n\t\t{\n\t\t\tDestroyWall();\n\t\t\tif ( !m_Registered )\n\t\t\t\treturn;\n\t\t\tm_Registered = false;\n\t\t\tif ( m_Arena != null )\n\t\t\t\tm_Arena.Evict();\n\t\t\tStopSDTimers();\n\t\t\tType[] types = new Type[]{ typeof( BeginGump ), typeof( DuelContextGump ), typeof( ParticipantGump ), typeof( PickRulesetGump ), typeof( ReadyGump ), typeof( ReadyUpGump ), typeof( RulesetGump ) };\n\t\t\tfor ( int i = 0; i < m_Participants.Count; ++i )\n\t\t\t{\n\t\t\t\tParticipant p = (Participant)m_Participants[i];\n\t\t\t\tfor ( int j = 0; j < p.Players.Length; ++j )\n\t\t\t\t{\n\t\t\t\t\tDuelPlayer pl = (DuelPlayer)p.Players[j];\n\t\t\t\t\tif ( pl == null )\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\tif ( pl.Mobile is PlayerMobile )\n\t\t\t\t\t\t((PlayerMobile)pl.Mobile).DuelPlayer = null;\n\t\t\t\t\tfor ( int k = 0; k < types.Length; ++k )\n\t\t\t\t\t\tpl.Mobile.CloseGump( types[k] );\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( queryRematch && m_Tournament == null )\n\t\t\t\tQueryRematch();\n\t\t}\n\t\tpublic void QueryRematch()\n\t\t{\n\t\t\tDuelContext dc = new DuelContext( m_Initiator, m_Ruleset.Layout, false );\n\t\t\tdc.m_Ruleset = m_Ruleset;\n\t\t\tdc.m_Rematch = true;\n\t\t\tdc.m_Participants.Clear();\n\t\t\tfor ( int i = 0; i < m_Participants.Count; ++i )\n\t\t\t{\n\t\t\t\tParticipant oldPart = (Participant)m_Participants[i];\n\t\t\t\tParticipant newPart = new Participant( dc, oldPart.Players.Length );\n\t\t\t\tfor ( int j = 0; j < oldPart.Players.Length; ++j )\n\t\t\t\t{\n\t\t\t\t\tDuelPlayer oldPlayer = oldPart.Players[j];\n\t\t\t\t\tif ( oldPlayer != null )\n\t\t\t\t\t\tnewPart.Players[j] = new DuelPlayer( oldPlayer.Mobile, newPart );\n\t\t\t\t}\n\t\t\t\tdc.m_Participants.Add( newPart );\n\t\t\t}\n\t\t\tdc.CloseAllGumps();\n\t\t\tdc.SendReadyUpGump();\n\t\t}\n\t\tpublic DuelPlayer Find( Mobile mob )\n\t\t{\n\t\t\tif ( mob is PlayerMobile )\n\t\t\t{\n\t\t\t\tPlayerMobile pm = (PlayerMobile)mob;\n\t\t\t\tif ( pm.DuelContext == this )\n\t\t\t\t\treturn pm.DuelPlayer;\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tfor ( int i = 0; i < m_Participants.Count; ++i )\n\t\t\t{\n\t\t\t\tParticipant p = (Participant)m_Participants[i];\n\t\t\t\tDuelPlayer pl = p.Find( mob );\n\t\t\t\tif ( pl != null )\n\t\t\t\t\treturn pl;\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\t\tpublic bool IsAlly( Mobile m1, Mobile m2 )\n\t\t{\n\t\t\tDuelPlayer pl1 = Find( m1 );\n\t\t\tDuelPlayer pl2 = Find( m2 );\n\t\t\treturn ( pl1 != null && pl2 != null && pl1.Participant == pl2.Participant );\n\t\t}\n\t\tpublic Participant CheckCompletion()\n\t\t{\n\t\t\tParticipant winner = null;\n\t\t\tbool hasWinner = false;\n\t\t\tint eliminated = 0;\n\t\t\tfor ( int i = 0; i < m_Participants.Count; ++i )\n\t\t\t{\n\t\t\t\tParticipant p = (Participant)m_Participants[i];\n\t\t\t\tif ( p.Eliminated )\n\t\t\t\t{\n\t\t\t\t\t++eliminated;\n\t\t\t\t\tif ( eliminated == (m_Participants.Count - 1) )\n\t\t\t\t\t\thasWinner = true;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\twinner = p;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( hasWinner )\n\t\t\t\treturn winner == null ? (Participant) m_Participants[0] : winner;\n\t\t\treturn null;\n\t\t}\n\t\tprivate Timer m_Countdown;\n\t\tpublic void StartCountdown( int count, CountdownCallback cb )\n\t\t{\n\t\t\tcb(count);\n\t\t\tm_Countdown=Timer.DelayCall( TimeSpan.FromSeconds( 1.0 ), TimeSpan.FromSeconds( 1.0 ), count, new TimerStateCallback( Countdown_Callback ), new object[]{ count-1, cb } );\n\t\t}\n\t\tpublic void StopCountdown()\n\t\t{\n\t\t\tif ( m_Countdown != null )\n\t\t\t\tm_Countdown.Stop();\n\t\t\tm_Countdown = null;\n\t\t}\n\t\tprivate void Countdown_Callback( object state )\n\t\t{\n\t\t\tobject[] states = (object[])state;\n\t\t\tint count = (int)states[0];\n\t\t\tCountdownCallback cb = (CountdownCallback)states[1];\n\t\t\tif ( count==0 )\n\t\t\t{\n\t\t\t\tif ( m_Countdown != null )\n\t\t\t\t\tm_Countdown.Stop();\n\t\t\t\tm_Countdown=null;\n\t\t\t}\n\t\t\tcb( count );\n\t\t\tstates[0] = count - 1;\n\t\t}\n\t\tprivate Timer m_AutoTieTimer;\n\t\tprivate bool m_Tied;\n\t\tpublic bool Tied{ get{ return m_Tied; } }\n\t\tprivate bool m_IsSuddenDeath;\n\t\tpublic bool IsSuddenDeath{ get{ return m_IsSuddenDeath; } set{ m_IsSuddenDeath = value; } }\n\t\tprivate Timer m_SDWarnTimer, m_SDActivateTimer;\n\t\tpublic void StopSDTimers()\n\t\t{\n\t\t\tif ( m_SDWarnTimer != null )\n\t\t\t\tm_SDWarnTimer.Stop();\n\t\t\tm_SDWarnTimer = null;\n\t\t\tif ( m_SDActivateTimer != null )\n\t\t\t\tm_SDActivateTimer.Stop();\n\t\t\tm_SDActivateTimer = null;\n\t\t}\n\t\tpublic void StartSuddenDeath( TimeSpan timeUntilActive )\n\t\t{\n\t\t\tif ( m_SDWarnTimer != null )\n\t\t\t\tm_SDWarnTimer.Stop();\n\t\t\tm_SDWarnTimer = Timer.DelayCall( TimeSpan.FromMinutes( timeUntilActive.TotalMinutes * 0.9 ), new TimerCallback( WarnSuddenDeath ) );\n\t\t\tif ( m_SDActivateTimer != null )\n\t\t\t\tm_SDActivateTimer.Stop();\n\t\t\tm_SDActivateTimer = Timer.DelayCall( timeUntilActive, new TimerCallback( ActivateSuddenDeath ) );\n\t\t}\n\t\tpublic void WarnSuddenDeath()\n\t\t{\n\t\t\tfor ( int i = 0; i < m_Participants.Count; ++i )\n\t\t\t{\n\t\t\t\tParticipant p = (Participant)m_Participants[i];\n\t\t\t\tfor ( int j = 0; j < p.Players.Length; ++j )\n\t\t\t\t{\n\t\t\t\t\tDuelPlayer pl = p.Players[j];\n\t\t\t\t\tif ( pl == null || pl.Eliminated )\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\tpl.Mobile.SendSound( 0x1E1 );\n\t\t\t\t\tpl.Mobile.SendMessage( 0x22, \"Warning! Warning! Warning!\" );\n\t\t\t\t\tpl.Mobile.SendMessage( 0x22, \"Sudden death will be active soon!\" );\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( m_Tournament != null )\n\t\t\t\tm_Tournament.Alert( m_Arena, \"Sudden death will be active soon!\" );\n\t\t\tif ( m_SDWarnTimer != null )\n\t\t\t\tm_SDWarnTimer.Stop();\n\t\t\tm_SDWarnTimer = null;\n\t\t}\n\t\tpublic static bool CheckSuddenDeath( Mobile mob )\n\t\t{\n\t\t\tif ( mob is PlayerMobile )\n\t\t\t{\n\t\t\t\tPlayerMobile pm = (PlayerMobile)mob;\n\t\t\t\tif ( pm.DuelPlayer != null && !pm.DuelPlayer.Eliminated && pm.DuelContext != null && pm.DuelContext.IsSuddenDeath )\n\t\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t\tpublic void ActivateSuddenDeath()\n\t\t{\n\t\t\tfor ( int i = 0; i < m_Participants.Count; ++i )\n\t\t\t{\n\t\t\t\tParticipant p = (Participant)m_Participants[i];\n\t\t\t\tfor ( int j = 0; j < p.Players.Length; ++j )\n\t\t\t\t{\n\t\t\t\t\tDuelPlayer pl = p.Players[j];\n\t\t\t\t\tif ( pl == null || pl.Eliminated )\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\tpl.Mobile.SendSound( 0x1E1 );\n\t\t\t\t\tpl.Mobile.SendMessage( 0x22, \"Warning! Warning! Warning!\" );\n\t\t\t\t\tpl.Mobile.SendMessage( 0x22, \"Sudden death has ACTIVATED. You are now unable to perform any beneficial actions.\" );\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( m_Tournament != null )\n\t\t\t\tm_Tournament.Alert( m_Arena, \"Sudden death has been activated!\" );\n\t\t\tm_IsSuddenDeath = true;\n\t\t\tif ( m_SDActivateTimer != null )\n\t\t\t\tm_SDActivateTimer.Stop();\n\t\t\tm_SDActivateTimer = null;\n\t\t}\n\t\tpublic void BeginAutoTie()\n\t\t{\n\t\t\tif ( m_AutoTieTimer != null )\n\t\t\t\tm_AutoTieTimer.Stop();\n\t\t\tTimeSpan ts = ( m_Tournament == null || m_Tournament.TournyType == TournyType.Standard )\n\t\t\t\t? AutoTieDelay\n\t\t\t\t: TimeSpan.FromMinutes( 90.0 );\n\t\t\tm_AutoTieTimer = Timer.DelayCall( ts, new TimerCallback( InvokeAutoTie ) );\n\t\t}\n\t\tpublic void EndAutoTie()\n\t\t{\n\t\t\tif ( m_AutoTieTimer != null )\n\t\t\t\tm_AutoTieTimer.Stop();\n\t\t\tm_AutoTieTimer = null;\n\t\t}\n\t\tpublic void InvokeAutoTie()\n\t\t{\n\t\t\tm_AutoTieTimer = null;\n\t\t\tif ( !m_Started || m_Finished )\n\t\t\t\treturn;\n\t\t\tm_Tied = true;\n\t\t\tm_Finished = true;\n\t\t\tStopSDTimers();\n\t\t\tArrayList remaining = new ArrayList();\n\t\t\tfor ( int i = 0; i < m_Participants.Count; ++i )\n\t\t\t{\n\t\t\t\tParticipant p = (Participant)m_Participants[i];\n\t\t\t\tif ( p.Eliminated )\n\t\t\t\t{\n\t\t\t\t\tp.Broadcast( 0x22, null, p.Players.Length == 1 ? \"{0} has lost the duel.\" : \"{0} and {1} team have lost the duel.\", p.Players.Length == 1 ? \"You have lost the duel.\" : \"Your team has lost the duel.\" );\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tp.Broadcast( 0x59, null, p.Players.Length == 1 ? \"{0} has tied the duel due to time expiration.\" : \"{0} and {1} team have tied the duel due to time expiration.\", p.Players.Length == 1 ? \"You have tied the duel due to time expiration.\" : \"Your team has tied the duel due to time expiration.\" );\n\t\t\t\t\tfor ( int j = 0; j < p.Players.Length; ++j )\n\t\t\t\t\t{\n\t\t\t\t\t\tDuelPlayer pl = p.Players[j];\n\t\t\t\t\t\tif ( pl != null && !pl.Eliminated )\n\t\t\t\t\t\t\tDelayBounce( TimeSpan.FromSeconds( 8.0 ), pl.Mobile, null );\n\t\t\t\t\t}\n\t\t\t\t\tif ( p.TournyPart != null )\n\t\t\t\t\t\tremaining.Add( p.TournyPart );\n\t\t\t\t}\n\t\t\t\tfor ( int j = 0; j < p.Players.Length; ++j )\n\t\t\t\t{\n\t\t\t\t\tDuelPlayer pl = p.Players[j];\n\t\t\t\t\tif ( pl != null )\n\t\t\t\t\t{\n\t\t\t\t\t\tpl.Mobile.Delta( MobileDelta.Noto );\n\t\t\t\t\t\tpl.Mobile.SendEverything();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( m_Tournament != null )\n\t\t\t\tm_Tournament.HandleTie( m_Arena, m_Match, remaining );\n\t\t\tTimer.DelayCall( TimeSpan.FromSeconds( 10.0 ), new TimerCallback( Unregister ) );\n\t\t}\n\t\tpublic bool IsOneVsOne\n\t\t{\n\t\t\tget\n\t\t\t{\n\t\t\t\tif ( m_Participants.Count != 2 )\n\t\t\t\t\treturn false;\n\t\t\t\tif ( ((Participant)m_Participants[0]).Players.Length != 1 )\n\t\t\t\t\treturn false;\n\t\t\t\tif ( ((Participant)m_Participants[1]).Players.Length != 1 )\n\t\t\t\t\treturn false;\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\tpublic static void Initialize()\n\t\t{\n\t\t\tEventSink.Speech += new SpeechEventHandler( EventSink_Speech );\n\t\t\tEventSink.Login += new LoginEventHandler( EventSink_Login );\n\t\t\tCommandSystem.Register( \"vli\", AccessLevel.GameMaster, new CommandEventHandler( vli_oc ) );\n\t\t}\n\t\tprivate static void vli_oc( CommandEventArgs e )\n\t\t{\n\t\t\te.Mobile.BeginTarget( -1, false, Targeting.TargetFlags.None, new TargetCallback( vli_ot ) );\n\t\t}\n\t\tprivate static void vli_ot( Mobile from, object obj )\n\t\t{\n\t\t\tif ( obj is PlayerMobile )\n\t\t\t{\n\t\t\t\tPlayerMobile pm = (PlayerMobile)obj;\n\t\t\t\tLadder ladder = Ladder.Instance;\n\t\t\t\tif ( ladder == null )\n\t\t\t\t\treturn;\n\t\t\t\tLadderEntry entry = ladder.Find( pm );\n\t\t\t\tif ( entry != null )\n\t\t\t\t\tfrom.SendGump( new PropertiesGump( from, entry ) );\n\t\t\t}\n\t\t}\n\t\tprivate static TimeSpan CombatDelay = TimeSpan.FromSeconds( 30.0 );\n\t\tprivate static TimeSpan AutoTieDelay = TimeSpan.FromMinutes( 15.0 );\n\t\tpublic static bool CheckCombat( Mobile m )\n\t\t{\n\t\t\tfor ( int i = 0; i < m.Aggressed.Count; ++i )\n\t\t\t{\n\t\t\t\tAggressorInfo info = m.Aggressed[i];\n\t\t\t\tif ( info.Defender.Player && (DateTime.UtcNow - info.LastCombatTime) < CombatDelay )\n\t\t\t\t\treturn true;\n\t\t\t}\n\t\t\tfor ( int i = 0; i < m.Aggressors.Count; ++i )\n\t\t\t{\n\t\t\t\tAggressorInfo info = m.Aggressors[i];\n\t\t\t\tif ( info.Attacker.Player && (DateTime.UtcNow - info.LastCombatTime) < CombatDelay )\n\t\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t\tprivate static void EventSink_Login( LoginEventArgs e )\n\t\t{\n\t\t\tPlayerMobile pm = e.Mobile as PlayerMobile;\n\t\t\tif ( pm == null )\n\t\t\t\treturn;\n\t\t\tDuelContext dc = pm.DuelContext;\n\t\t\tif ( dc == null )\n\t\t\t\treturn;\n\t\t\tif ( dc.ReadyWait && pm.DuelPlayer.Ready && !dc.Started && !dc.StartedBeginCountdown && !dc.Finished )\n\t\t\t{\n\t\t\t\tif ( dc.m_Tournament == null )\n\t\t\t\t\tpm.SendGump( new ReadyGump( pm, dc, dc.m_ReadyCount ) );\n\t\t\t}\n\t\t\telse if ( dc.ReadyWait && !dc.StartedBeginCountdown && !dc.Started && !dc.Finished )\n\t\t\t{\n\t\t\t\tif ( dc.m_Tournament == null )\n\t\t\t\t\tpm.SendGump( new ReadyUpGump( pm, dc ) );\n\t\t\t}\n\t\t\telse if ( dc.Initiator == pm && !dc.ReadyWait && !dc.StartedBeginCountdown && !dc.Started && !dc.Finished )\n\t\t\t\tpm.SendGump( new DuelContextGump( pm, dc ) );\n\t\t}\n\t\tprivate static void ViewLadder_OnTarget( Mobile from, object obj, object state )\n\t\t{\n\t\t\tif ( obj is PlayerMobile )\n\t\t\t{\n\t\t\t\tPlayerMobile pm = (PlayerMobile)obj;\n\t\t\t\tLadder ladder = (Ladder)state;\n\t\t\t\tLadderEntry entry = ladder.Find( pm );\n\t\t\t\tif ( entry == null )\n\t\t\t\t\treturn; // sanity\n\t\t\t\tstring text = String.Format( \"{{0}} are ranked {0} at level {1}.\", LadderGump.Rank( entry.Index + 1 ), Ladder.GetLevel( entry.Experience ) );\n\t\t\t\tpm.PrivateOverheadMessage( MessageType.Regular, pm.SpeechHue, true, String.Format( text, from==pm?\"You\":\"They\" ), from.NetState );\n\t\t\t}\n\t\t\telse if ( obj is Mobile )\n\t\t\t{\n\t\t\t\tMobile mob = (Mobile)obj;\n\t\t\t\tif ( mob.Body.IsHuman )\n\t\t\t\t\tmob.PrivateOverheadMessage( MessageType.Regular, mob.SpeechHue, false, \"I'm not a duelist, and quite frankly, I resent the implication.\", from.NetState );\n\t\t\t\telse\n\t\t\t\t\tmob.PrivateOverheadMessage( MessageType.Regular, 0x3B2, true, \"It's probably better than you.\", from.NetState );\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tfrom.SendMessage( \"That's not a player.\" );\n\t\t\t}\n\t\t}\n\t\tprivate static void EventSink_Speech( SpeechEventArgs e )\n\t\t{\n\t\t\tif ( e.Handled )\n\t\t\t\treturn;\n\t\t\tPlayerMobile pm = e.Mobile as PlayerMobile;\n\t\t\tif ( pm == null )\n\t\t\t\treturn;\n\t\t\tif ( Insensitive.Contains( e.Speech, \"i wish to duel\" ) )\n\t\t\t{\n\t\t\t\tif ( !pm.CheckAlive() )\n\t\t\t\t{\n\t\t\t\t}\n\t\t\t\telse if ( pm.Region.IsPartOf( typeof( Regions.Jail ) ) )\n\t\t\t\t{\n\t\t\t\t}\n\t\t\t\telse if ( CheckCombat( pm ) )\n\t\t\t\t{\n\t\t\t\t\te.Mobile.SendMessage( 0x22, \"You have recently been in combat with another player and must wait before starting a duel.\" );\n\t\t\t\t}\n\t\t\t\telse if ( pm.DuelContext != null )\n\t\t\t\t{\n\t\t\t\t\tif ( pm.DuelContext.Initiator == pm )\n\t\t\t\t\t\te.Mobile.SendMessage( 0x22, \"You have already started a duel.\" );\n\t\t\t\t\telse\n\t\t\t\t\t\te.Mobile.SendMessage( 0x22, \"You have already been challenged in a duel.\" );\n\t\t\t\t}\n\t\t\t\telse if ( TournamentController.IsActive )\n\t\t\t\t{\n\t\t\t\t\te.Mobile.SendMessage( 0x22, \"You may not start a duel while a tournament is active.\" );\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tpm.SendGump( new DuelContextGump( pm, new DuelContext( pm, RulesetLayout.Root ) ) );\n\t\t\t\t\te.Handled = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if ( Insensitive.Equals( e.Speech, \"change arena preferences\" ) )\n\t\t\t{\n\t\t\t\tif ( !pm.CheckAlive() )\n\t\t\t\t{\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tPreferences prefs = Preferences.Instance;\n\t\t\t\t\tif ( prefs != null )\n\t\t\t\t\t{\n\t\t\t\t\t\te.Mobile.CloseGump( typeof( PreferencesGump ) );\n\t\t\t\t\t\te.Mobile.SendGump( new PreferencesGump( e.Mobile, prefs ) );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if ( Insensitive.Equals( e.Speech, \"showladder\" ) )\n\t\t\t{\n\t\t\t\te.Blocked=true;\n\t\t\t\tif ( !pm.CheckAlive() )\n\t\t\t\t{\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tLadder instance = Ladder.Instance;\n\t\t\t\t\tif ( instance == null )\n\t\t\t\t\t{\n\t\t\t\t\t\t//pm.SendMessage( \"Ladder not yet initialized.\" );\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tLadderEntry entry = instance.Find( pm );\n\t\t\t\t\t\tif ( entry == null )\n\t\t\t\t\t\t\treturn; // sanity\n\t\t\t\t\t\tstring text = String.Format( \"{{0}} {{1}} ranked {0} at level {1}.\", LadderGump.Rank( entry.Index + 1 ), Ladder.GetLevel( entry.Experience ) );\n\t\t\t\t\t\tpm.LocalOverheadMessage( MessageType.Regular, pm.SpeechHue, true, String.Format( text, \"You\", \"are\" ) );\n\t\t\t\t\t\tpm.NonlocalOverheadMessage( MessageType.Regular, pm.SpeechHue, true, String.Format( text, pm.Name, \"is\" ) );\n\t\t\t\t\t\t//pm.PublicOverheadMessage( MessageType.Regular, pm.SpeechHue, true, String.Format( \"Level {0} with {1} win{2} and {3} loss{4}.\", Ladder.GetLevel( entry.Experience ), entry.Wins, entry.Wins==1?\"\":\"s\", entry.Losses, entry.Losses==1?\"\":\"es\" ) );\n\t\t\t\t\t\t//pm.PublicOverheadMessage( MessageType.Regular, pm.SpeechHue, true, String.Format( \"Level {0} with {1} win{2} and {3} loss{4}.\", Ladder.GetLevel( entry.Experience ), entry.Wins, entry.Wins==1?\"\":\"s\", entry.Losses, entry.Losses==1?\"\":\"es\" ) );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if ( Insensitive.Equals( e.Speech, \"viewladder\" ) )\n\t\t\t{\n\t\t\t\te.Blocked=true;\n\t\t\t\tif ( !pm.CheckAlive() )\n\t\t\t\t{\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tLadder instance = Ladder.Instance;\n\t\t\t\t\tif ( instance == null )\n\t\t\t\t\t{\n\t\t\t\t\t\t//pm.SendMessage( \"Ladder not yet initialized.\" );\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tpm.SendMessage( \"Target a player to view their ranking and level.\" );\n\t\t\t\t\t\tpm.BeginTarget( 16, false, Targeting.TargetFlags.None, new TargetStateCallback( ViewLadder_OnTarget ), instance );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if ( Insensitive.Contains( e.Speech, \"i yield\" ) )\n\t\t\t{\n\t\t\t\tif ( !pm.CheckAlive() )\n\t\t\t\t{\n\t\t\t\t}\n\t\t\t\telse if ( pm.DuelContext == null )\n\t\t\t\t{\n\t\t\t\t}\n\t\t\t\telse if ( pm.DuelContext.Finished )\n\t\t\t\t{\n\t\t\t\t\te.Mobile.SendMessage( 0x22, \"The duel is already finished.\" );\n\t\t\t\t}\n\t\t\t\telse if ( !pm.DuelContext.Started )\n\t\t\t\t{\n\t\t\t\t\tDuelContext dc = pm.DuelContext;\n\t\t\t\t\tMobile init = dc.Initiator;\n\t\t\t\t\tif ( pm.DuelContext.StartedBeginCountdown )\n\t\t\t\t\t{\n\t\t\t\t\t\te.Mobile.SendMessage( 0x22, \"The duel has not yet started.\" );\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tDuelPlayer pl = pm.DuelContext.Find( pm );\n\t\t\t\t\t\tif ( pl == null )\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\tParticipant p = pl.Participant;\n\t\t\t\t\t\tif ( !pm.DuelContext.ReadyWait ) // still setting stuff up\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tp.Broadcast( 0x22, null, \"{0} has yielded.\", \"You have yielded.\" );\n\t\t\t\t\t\t\tif ( init == pm )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdc.Unregister();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tp.Nullify( pl );\n\t\t\t\t\t\t\t\tpm.DuelPlayer=null;\n\t\t\t\t\t\t\t\tNetState ns = init.NetState;\n\t\t\t\t\t\t\t\tif ( ns != null )\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tforeach ( Gump g in ns.Gumps )\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif ( g is ParticipantGump )\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tParticipantGump pg = (ParticipantGump)g;\n\t\t\t\t\t\t\t\t\t\t\tif ( pg.Participant == p )\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tinit.SendGump( new ParticipantGump( init, dc, p ) );\n\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\telse if ( g is DuelContextGump )\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tDuelContextGump dcg = (DuelContextGump)g;\n\t\t\t\t\t\t\t\t\t\t\tif ( dcg.Context == dc )\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tinit.SendGump( new DuelContextGump( init, dc ) );\n\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if ( !pm.DuelContext.StartedReadyCountdown ) // at ready stage\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tp.Broadcast( 0x22, null, \"{0} has yielded.\", \"You have yielded.\" );\n\t\t\t\t\t\t\tdc.m_Yielding=true;\n\t\t\t\t\t\t\tdc.RejectReady( pm, null );\n\t\t\t\t\t\t\tdc.m_Yielding=false;\n\t\t\t\t\t\t\tif ( init == pm )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdc.Unregister();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if ( dc.m_Registered )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tp.Nullify( pl );\n\t\t\t\t\t\t\t\tpm.DuelPlayer=null;\n\t\t\t\t\t\t\t\tNetState ns = init.NetState;\n\t\t\t\t\t\t\t\tif ( ns != null )\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tbool send=true;\n\t\t\t\t\t\t\t\t\tforeach ( Gump g in ns.Gumps )\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif ( g is ParticipantGump )\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tParticipantGump pg = (ParticipantGump)g;\n\t\t\t\t\t\t\t\t\t\t\tif ( pg.Participant == p )\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tinit.SendGump( new ParticipantGump( init, dc, p ) );\n\t\t\t\t\t\t\t\t\t\t\t\tsend=false;\n\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\telse if ( g is DuelContextGump )\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tDuelContextGump dcg = (DuelContextGump)g;\n\t\t\t\t\t\t\t\t\t\t\tif ( dcg.Context == dc )\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tinit.SendGump( new DuelContextGump( init, dc ) );\n\t\t\t\t\t\t\t\t\t\t\t\tsend=false;\n\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tif ( send )\n\t\t\t\t\t\t\t\t\t\tinit.SendGump( new DuelContextGump( init, dc ) );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif ( pm.DuelContext.m_Countdown != null )\n\t\t\t\t\t\t\t\tpm.DuelContext.m_Countdown.Stop();\n\t\t\t\t\t\t\tpm.DuelContext.m_Countdown= null;\n\t\t\t\t\t\t\tpm.DuelContext.m_StartedReadyCountdown=false;\n\t\t\t\t\t\t\tp.Broadcast( 0x22, null, \"{0} has yielded.\", \"You have yielded.\" );\n\t\t\t\t\t\t\tdc.m_Yielding=true;\n\t\t\t\t\t\t\tdc.RejectReady( pm, null );\n\t\t\t\t\t\t\tdc.m_Yielding=false;\n\t\t\t\t\t\t\tif ( init == pm )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdc.Unregister();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if ( dc.m_Registered )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tp.Nullify( pl );\n\t\t\t\t\t\t\t\tpm.DuelPlayer=null;\n\t\t\t\t\t\t\t\tNetState ns = init.NetState;\n\t\t\t\t\t\t\t\tif ( ns != null )\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tbool send=true;\n\t\t\t\t\t\t\t\t\tforeach ( Gump g in ns.Gumps )\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif ( g is ParticipantGump )\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tParticipantGump pg = (ParticipantGump)g;\n\t\t\t\t\t\t\t\t\t\t\tif ( pg.Participant == p )\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tinit.SendGump( new ParticipantGump( init, dc, p ) );\n\t\t\t\t\t\t\t\t\t\t\t\tsend=false;\n\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\telse if ( g is DuelContextGump )\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tDuelContextGump dcg = (DuelContextGump)g;\n\t\t\t\t\t\t\t\t\t\t\tif ( dcg.Context == dc )\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tinit.SendGump( new DuelContextGump( init, dc ) );\n\t\t\t\t\t\t\t\t\t\t\t\tsend=false;\n\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tif ( send )\n\t\t\t\t\t\t\t\t\t\tinit.SendGump( new DuelContextGump( init, dc ) );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tDuelPlayer pl = pm.DuelContext.Find( pm );\n\t\t\t\t\tif ( pl != null )\n\t\t\t\t\t{\n\t\t\t\t\t\tif ( pm.DuelContext.IsOneVsOne )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\te.Mobile.SendMessage( 0x22, \"You may not yield a 1 on 1 match.\" );\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if ( pl.Eliminated )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\te.Mobile.SendMessage( 0x22, \"You have already been eliminated.\" );\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpm.LocalOverheadMessage( MessageType.Regular, 0x22, false, \"You have yielded.\" );\n\t\t\t\t\t\t\tpm.NonlocalOverheadMessage( MessageType.Regular, 0x22, false, String.Format( \"{0} has yielded.\", pm.Name ) );\n\t\t\t\t\t\t\tpm.DuelContext.m_Yielding=true;\n\t\t\t\t\t\t\tpm.Kill();\n\t\t\t\t\t\t\tpm.DuelContext.m_Yielding=false;\n\t\t\t\t\t\t\tif ( pm.Alive ) // invul, ...\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tpl.Eliminated = true;\n\t\t\t\t\t\t\t\tpm.DuelContext.RemoveAggressions( pm );\n\t\t\t\t\t\t\t\tpm.DuelContext.SendOutside( pm );\n\t\t\t\t\t\t\t\tpm.DuelContext.Refresh( pm, null );\n\t\t\t\t\t\t\t\tDebuff( pm );\n\t\t\t\t\t\t\t\tCancelSpell( pm );\n\t\t\t\t\t\t\t\tpm.Frozen = false;\n\t\t\t\t\t\t\t\tParticipant winner = pm.DuelContext.CheckCompletion();\n\t\t\t\t\t\t\t\tif ( winner != null )\n\t\t\t\t\t\t\t\t\tpm.DuelContext.Finish( winner );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\te.Mobile.SendMessage( 0x22, \"BUG: Unable to find duel context.\" );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tpublic DuelContext( Mobile initiator, RulesetLayout layout ) : this( initiator, layout, true )\n\t\t{\n\t\t}\n\t\tpublic DuelContext( Mobile initiator, RulesetLayout layout, bool addNew )\n\t\t{\n\t\t\tm_Initiator = initiator;\n\t\t\tm_Participants = new ArrayList();\n\t\t\tm_Ruleset = new Ruleset( layout );\n\t\t\tm_Ruleset.ApplyDefault( layout.Defaults[0] );\n\t\t\tif ( addNew )\n\t\t\t{\n\t\t\t\tm_Participants.Add( new Participant( this, 1 ) );\n\t\t\t\tm_Participants.Add( new Participant( this, 1 ) );\n\t\t\t\t((Participant)m_Participants[0]).Add( initiator );\n\t\t\t}\n\t\t}\n\t\tpublic void CloseAllGumps()\n\t\t{\n\t\t\tType[] types = new Type[]{ typeof( DuelContextGump ), typeof( ParticipantGump ), typeof( RulesetGump ) };\n\t\t\tint[] defs = new int[]{ -1, -1, -1 };\n\t\t\tfor ( int i = 0; i < m_Participants.Count; ++i )\n\t\t\t{\n", "answers": ["\t\t\t\tParticipant p = (Participant)m_Participants[i];"], "pred": "  int i = 0; ++i; \n  int i = 1; ++i; \n  int i = 0; ++i; \n  int i = 1; ++i; \n  int i = 0; ++i; \n  int i = 1; ++i", "length": 5243, "dataset": "lcc", "language": "csharp", "all_classes": null, "_id": "28ce5cf5e0beeb47248c6cba20ae17fa71d60d402770d464"}
{"prompt": "Please complete the code given below. \nimport networkx as nx \nimport pickle\nfrom Queue import PriorityQueue \nimport copy\nimport random\nimport string\nimport sys\nclass MultiDiGraph_EdgeKey(nx.MultiDiGraph):\n    \"\"\"\n    MultiDiGraph which assigns unique keys to every edge.\n    Adds a dictionary edge_index which maps edge keys to (u, v, data) tuples.\n    This is not a complete implementation. For Edmonds algorithm, we only use\n    add_node and add_edge, so that is all that is implemented here. During\n    additions, any specified keys are ignored---this means that you also\n    cannot update edge attributes through add_node and add_edge.\n    \"\"\"\n    def __init__(self, data=None, **attr):\n        cls = super(MultiDiGraph_EdgeKey, self)\n        cls.__init__(data=data, **attr)\n        self._cls = cls\n        self.edge_index = {}\n    def remove_node(self, n):\n        keys = set([])\n        for keydict in self.pred[n].values():\n            keys.update(keydict)\n        for keydict in self.succ[n].values():\n            keys.update(keydict)\n        for key in keys:\n            del self.edge_index[key]\n        self._cls.remove_node(n)\n    def remove_nodes_from(self, nbunch):\n        for n in nbunch:\n            self.remove_node(n)\n    def add_edge(self, u, v, key, attr_dict=None, **attr):\n        \"\"\"\n        Key is now required.\n        \"\"\"\n        if key in self.edge_index:\n            uu, vv, _ = self.edge_index[key]\n            if (u != uu) or (v != vv):\n                raise Exception(\"Key {0!r} is already in use.\".format(key))\n        self._cls.add_edge(u, v, key=key, attr_dict=attr_dict, **attr)\n        self.edge_index[key] = (u, v, self.succ[u][v][key])\n    def add_edges_from(self, ebunch, attr_dict=None, **attr):\n        for edge in ebunch:\n        \tself.add_edge(*edge)\n    def remove_edge_with_key(self, key):\n        try:\n            u, v, _  = self.edge_index[key]\n            # print ('***',u,v,key)\n        except KeyError:\n            raise KeyError('Invalid edge key {0!r}'.format(key))\n        else:\n            del self.edge_index[key]\n            # print ('***** self.edge_index',self.edge_index)\n            self._cls.remove_edge(u, v, key)\n    def remove_edges_from(self, ebunch):\n        raise NotImplementedError\ndef random_string(L=15, seed=None):\n    random.seed(seed)\n    return ''.join([random.choice(string.ascii_letters) for n in range(L)])\nclass Camerini():\n\tdef __init__(self, graph, Y=nx.DiGraph(), Z=nx.DiGraph(), attr='weight'):\n\t\tself.original_graph = graph\n\t\tself.attr = attr\n\t\tself._init(Y=Y, Z=Z)\n\t\tself.template = random_string()\n\t\n\tdef _init(self, graph=None, Y=nx.DiGraph(), Z=nx.DiGraph()):\n\t\tself.graph = MultiDiGraph_EdgeKey()\n\t\tif graph is None:\n\t\t\tgraph = self.original_graph\n\t\tfor key, (u, v, data) in enumerate(graph.edges(data=True)):\n\t\t\tif (u,v) not in Z.edges():\n\t\t\t\tself.graph.add_edge(u,v,key,data.copy())\n\t\t\t\n\t\tfor Y_edge in Y.edges(data=True):\n\t\t\tfor (u,v) in self.graph.in_edges([Y_edge[1]]):\n\t\t\t\tif u != Y_edge[0]:\n\t\t\t\t\tself.graph.remove_edge(u,v)\n\tdef best_incoming_edge(self, node, graph):\n\t\tmax_weight = float('-inf')\n\t\te = None\n\t\t# print ('Graph',graph.edges())\n\t\tfor u,v,key,data in graph.in_edges([node], data=True, keys=True):\n\t\t\t# print ('edge',u,v,data)\n\t\t\tif max_weight <= data[self.attr]:\n\t\t\t\tmax_weight = data[self.attr]\n\t\t\t\te = (u,v,key,data)\n\t\treturn e\n\tdef collapse_cycle(self, graph, cycle, B, new_node):\t\t\t\n\t\tfor node in cycle:\n\t\t\tfor u,v,key,data in graph.out_edges([node], data=True, keys=True):\n\t\t\t\tgraph.remove_edge_with_key(key)\n\t\t\t\tif v not in cycle:\n\t\t\t\t\tdd = data.copy()\n\t\t\t\t\tgraph.add_edge(new_node,v,key,**dd)\t\t\n\t\t\tfor u,v,key,data in graph.in_edges([node], data=True, keys=True):\n\t\t\t\tif u in cycle:\n\t\t\t\t\t# it will be delete later\n\t\t\t\t\tcontinue\n\t\t\t\tgraph.remove_edge_with_key(key)\n\t\t\t\tdd = data.copy()\n\t\t\t\tdd_eh = list(B.in_edges([node], data=True))[0][2] \n\t\t\t\tdd[self.attr] = dd[self.attr] - dd_eh[self.attr]\n\t\t\t\tgraph.add_edge(u, new_node, key, **dd)\n\t\tfor node in cycle:\n\t\t\tB.remove_node(node)\n\t\treturn graph, B\n\tdef add_b_to_branching(self, exposed_nodes, order, M, supernodes, B):\n\t\tv = exposed_nodes.pop(0)\n\t\torder.append(v)\n\t\tb = self.best_incoming_edge(v, M)\n\t\tif b is None:\n\t\t\tif v in supernodes:\n\t\t\t\tsupernodes.remove(v)\n\t\t\treturn exposed_nodes, order, M, supernodes, B, None\n\t\tb_u, b_v, b_key, b_data = b\n\t\tdata = {self.attr: b_data[self.attr], 'origin': b_data['origin']}\n\t\tB.add_edge(b_u, b_v, **data)\n\t\treturn exposed_nodes, order, M, supernodes, B, b\n\tdef contracting_phase(self, B, n, supernodes, exposed_nodes, M, C, root):\n\t\tcycles = list(nx.simple_cycles(B))\n\t\tif len(cycles) > 0:\n\t\t\tu = 'v_'+str(n)\n\t\t\tsupernodes.append(str(u))\n\t\t\texposed_nodes.append(u)\n\t\t\tfor node in cycles[0]:\n\t\t\t\tC[str(node)] = str(u)\n\t\t\tM, B = self.collapse_cycle(M, cycles[0], B, u)\n\t\t\tfor node in B.nodes():\n\t\t\t\tif B.in_edges([node]) == []:\n\t\t\t\t\tif B.out_edges([node]) == []:\n\t\t\t\t\t\tB.remove_node(node)\n\t\t\t\t\tif node != root and node not in exposed_nodes:\n\t\t\t\t\t\texposed_nodes.append(node)\n\t\t\tn += 1\n\t\treturn B, n, supernodes, exposed_nodes, M, C\n\tdef best(self, root):\n\t\tM = self.graph\n\t\tfor u,v,key,data in M.edges(data=True, keys=True):\n\t\t\tdata['origin'] = (u,v,key,{self.attr: data[self.attr]})\n\t\tn = 0\n\t\tB = nx.DiGraph()\n\t\t# C contains for every node its parent node, so it will be easy to find the path in the collapsing phase\n\t\t# from an isolated root v_1 to v_k\n\t\tnodes = M.nodes()\n\t\tif len(nodes) == 1:\n\t\t\tA = nx.DiGraph()\n\t\t\tA.add_node(nodes[0])\n\t\tC = {str(node): None for node in nodes} \n\t\tdel C[str(root)]\n\t\texposed_nodes = [node for node in nodes]\n\t\texposed_nodes.remove(root)\n\t\tsupernodes = []\n\t\tbeta = {}\n\t\torder = []\n\t\t# collapsing phase\n\t\twhile len(exposed_nodes) > 0:\n\t\t\texposed_nodes, order, M, supernodes, B, b = self.add_b_to_branching(exposed_nodes, order, M, supernodes, B)\n\t\t\tif b is None:\n\t\t\t\tcontinue\n\t\t\tb_u, b_v, b_key, b_data = b\n\t\t\tbeta[b_v] = (b_u, b_v, b_key, b_data)\n\t\t\tB, n, supernodes, exposed_nodes, M, C = self.contracting_phase(B, n, supernodes, exposed_nodes, M, C, root)\n\t\t# expanding phase\n\t\twhile len(supernodes) > 0:\n\t\t\tv_1 = supernodes.pop()\n\t\t\torigin_edge_v_1 = beta[v_1][3]['origin']  \n\t\t\tv_k = origin_edge_v_1[1]\n\t\t\tbeta[v_k] = beta[v_1]\n\t\t\tv_i = str(C[str(v_k)])\n\t\t\twhile v_i != v_1:\n\t\t\t\tsupernodes.remove(v_i)\n\t\t\t\tv_i = C.pop(v_i)\n\t\tA = nx.DiGraph()\n\t\tfor k, edge in beta.items():\n\t\t\tif k in nodes:\n\t\t\t\tu,v,key,data = edge[3]['origin']\n\t\t\t\tA.add_edge(u,v,**data.copy())\n\t\treturn A\n\tdef get_priority_queue_for_incoming_node(self, graph, v, b):\n\t\tQ = PriorityQueue()\n\t\tfor u,v,key,data in graph.in_edges([v], data=True, keys=True):\n\t\t\tif key == b[2]:\n\t\t\t\tcontinue\n\t\t\tQ.put((-data[self.attr], (u,v,key,data)))\n\t\treturn Q\n\tdef seek(self, b, A, graph):\n\t\tv = b[1]\n\t\tQ = self.get_priority_queue_for_incoming_node(graph, v, b)\n\t\twhile not Q.empty():\n\t\t\tf = Q.get()\n\t\t\ttry:\n\t\t\t\t# v = T(b) is an ancestor of O(f)=f[1][1]?\n\t\t\t\tv_origin = b[3]['origin'][1]\n\t\t\t\tf_origin = f[1][3]['origin'][0] \n\t\t\t\tnx.shortest_path(A, v_origin, f_origin)\n\t\t\texcept nx.exception.NetworkXNoPath:\n\t\t\t\treturn f[1]\n\t\treturn None\n\tdef next(self, A, Y, Z, graph=None, root='R'):\n\t\td = float('inf')\n\t\tedge = None\n\t\tif graph is not None:\n\t\t\tself._init(graph)\n\t\tM = self.graph\n\t\tfor u,v,key,data in M.edges(data=True, keys=True):\n\t\t\tdata['origin'] = (u,v,key,{self.attr: data[self.attr]})\n\t\tn = 0\n\t\tB = nx.DiGraph()\n\t\tnodes = M.nodes()\n\t\tC = {str(node): None for node in nodes} \n\t\texposed_nodes = [node for node in nodes]\n\t\tif 'R' in exposed_nodes: \n\t\t\texposed_nodes.remove('R')\n\t\torder = []\n\t\tsupernodes = []\n\t\twhile len(exposed_nodes) > 0:\n\t\t\texposed_nodes, order, M, supernodes, B, b = self.add_b_to_branching(exposed_nodes, order, M, supernodes, B)\n\t\t\tif b is None:\n\t\t\t\tcontinue\n\t\t\tb_u, b_v, b_key, b_data = b\n\t\t\torigin_u, origin_v = b_data['origin'][:2]\n\t\t\tif (origin_u, origin_v) in A.edges():\n\t\t\t\tif (origin_u, origin_v) not in Y.edges():\n\t\t\t\t\tf = self.seek(b, A, M)\n\t\t\t\t\tif f is not None:\n\t\t\t\t\t\tf_u, f_v, f_key, f_data = f\n\t\t\t\t\t\tif b_data[self.attr] - f_data[self.attr] < d:\n\t\t\t\t\t\t\tedge = b\n\t\t\t\t\t\t\td = b_data[self.attr] - f_data[self.attr]\n\t\t\tB, n, supernodes, exposed_nodes, M, C = self.contracting_phase(B, n, supernodes, exposed_nodes, M, C, root)\n\t\treturn edge[3]['origin'], d\n\tdef ranking(self, k, graph=None, Y=nx.DiGraph(), Z=nx.DiGraph(), mode='branching', root='R'):\n\t\tif graph is not None:\n\t\t\tself._init(graph, Y, Z)\n\t\tif root == 'R' and mode == 'branching':\n\t\t\tbest = self.best_branching\n\t\telif root == 'R' and mode == 'arborescence_no_rooted':\n\t\t\tbest = self.best_arborescence_no_rooted\n\t\telse:\n\t\t\tbest = self.best_arborescence_rooted\n\t\t\n\t\tgraph = self.graph.copy()\n\t\tA = best(root)  \n\t\troots = self.find_roots(A)\n\t\tif 'R' in roots:\n\t\t\troots.remove('R')\n\t\tprint ('roots for ranking',roots)\n\t\tself._init(graph)\n\t\te, d = self.next(A, Y, Z)  \n\t\tP = PriorityQueue()\n\t\tw = self.get_graph_score(A) - d if d != float('inf') else float('inf') \n\t\tP.put( (-w, e, A, Y, Z) )\n\t\tsolutions = [A]\n\t\tfor j in range(1,k+1):\n\t\t\tw, e, A, Y, Z = P.get()\n\t\t\tw = -w \t\t\t\n\t\t\troots.extend([root for root in self.find_roots(A) if root not in roots])\n\t\t\tif 'R' in roots:\n\t\t\t\troots.remove('R')\n\t\t\tif w == float('-inf'):\n\t\t\t\treturn solutions\n\t\t\te_u, e_v, e_key, data = e\n\t\t\t\n\t\t\tY_ = Y.copy()\n\t\t\tY_.add_edge(e_u, e_v, **data.copy())\n\t\t\t\n\t\t\tZ_ = Z.copy()\nNext line of code:\n", "input": "", "context": "import networkx as nx \nimport pickle\nfrom Queue import PriorityQueue \nimport copy\nimport random\nimport string\nimport sys\nclass MultiDiGraph_EdgeKey(nx.MultiDiGraph):\n    \"\"\"\n    MultiDiGraph which assigns unique keys to every edge.\n    Adds a dictionary edge_index which maps edge keys to (u, v, data) tuples.\n    This is not a complete implementation. For Edmonds algorithm, we only use\n    add_node and add_edge, so that is all that is implemented here. During\n    additions, any specified keys are ignored---this means that you also\n    cannot update edge attributes through add_node and add_edge.\n    \"\"\"\n    def __init__(self, data=None, **attr):\n        cls = super(MultiDiGraph_EdgeKey, self)\n        cls.__init__(data=data, **attr)\n        self._cls = cls\n        self.edge_index = {}\n    def remove_node(self, n):\n        keys = set([])\n        for keydict in self.pred[n].values():\n            keys.update(keydict)\n        for keydict in self.succ[n].values():\n            keys.update(keydict)\n        for key in keys:\n            del self.edge_index[key]\n        self._cls.remove_node(n)\n    def remove_nodes_from(self, nbunch):\n        for n in nbunch:\n            self.remove_node(n)\n    def add_edge(self, u, v, key, attr_dict=None, **attr):\n        \"\"\"\n        Key is now required.\n        \"\"\"\n        if key in self.edge_index:\n            uu, vv, _ = self.edge_index[key]\n            if (u != uu) or (v != vv):\n                raise Exception(\"Key {0!r} is already in use.\".format(key))\n        self._cls.add_edge(u, v, key=key, attr_dict=attr_dict, **attr)\n        self.edge_index[key] = (u, v, self.succ[u][v][key])\n    def add_edges_from(self, ebunch, attr_dict=None, **attr):\n        for edge in ebunch:\n        \tself.add_edge(*edge)\n    def remove_edge_with_key(self, key):\n        try:\n            u, v, _  = self.edge_index[key]\n            # print ('***',u,v,key)\n        except KeyError:\n            raise KeyError('Invalid edge key {0!r}'.format(key))\n        else:\n            del self.edge_index[key]\n            # print ('***** self.edge_index',self.edge_index)\n            self._cls.remove_edge(u, v, key)\n    def remove_edges_from(self, ebunch):\n        raise NotImplementedError\ndef random_string(L=15, seed=None):\n    random.seed(seed)\n    return ''.join([random.choice(string.ascii_letters) for n in range(L)])\nclass Camerini():\n\tdef __init__(self, graph, Y=nx.DiGraph(), Z=nx.DiGraph(), attr='weight'):\n\t\tself.original_graph = graph\n\t\tself.attr = attr\n\t\tself._init(Y=Y, Z=Z)\n\t\tself.template = random_string()\n\t\n\tdef _init(self, graph=None, Y=nx.DiGraph(), Z=nx.DiGraph()):\n\t\tself.graph = MultiDiGraph_EdgeKey()\n\t\tif graph is None:\n\t\t\tgraph = self.original_graph\n\t\tfor key, (u, v, data) in enumerate(graph.edges(data=True)):\n\t\t\tif (u,v) not in Z.edges():\n\t\t\t\tself.graph.add_edge(u,v,key,data.copy())\n\t\t\t\n\t\tfor Y_edge in Y.edges(data=True):\n\t\t\tfor (u,v) in self.graph.in_edges([Y_edge[1]]):\n\t\t\t\tif u != Y_edge[0]:\n\t\t\t\t\tself.graph.remove_edge(u,v)\n\tdef best_incoming_edge(self, node, graph):\n\t\tmax_weight = float('-inf')\n\t\te = None\n\t\t# print ('Graph',graph.edges())\n\t\tfor u,v,key,data in graph.in_edges([node], data=True, keys=True):\n\t\t\t# print ('edge',u,v,data)\n\t\t\tif max_weight <= data[self.attr]:\n\t\t\t\tmax_weight = data[self.attr]\n\t\t\t\te = (u,v,key,data)\n\t\treturn e\n\tdef collapse_cycle(self, graph, cycle, B, new_node):\t\t\t\n\t\tfor node in cycle:\n\t\t\tfor u,v,key,data in graph.out_edges([node], data=True, keys=True):\n\t\t\t\tgraph.remove_edge_with_key(key)\n\t\t\t\tif v not in cycle:\n\t\t\t\t\tdd = data.copy()\n\t\t\t\t\tgraph.add_edge(new_node,v,key,**dd)\t\t\n\t\t\tfor u,v,key,data in graph.in_edges([node], data=True, keys=True):\n\t\t\t\tif u in cycle:\n\t\t\t\t\t# it will be delete later\n\t\t\t\t\tcontinue\n\t\t\t\tgraph.remove_edge_with_key(key)\n\t\t\t\tdd = data.copy()\n\t\t\t\tdd_eh = list(B.in_edges([node], data=True))[0][2] \n\t\t\t\tdd[self.attr] = dd[self.attr] - dd_eh[self.attr]\n\t\t\t\tgraph.add_edge(u, new_node, key, **dd)\n\t\tfor node in cycle:\n\t\t\tB.remove_node(node)\n\t\treturn graph, B\n\tdef add_b_to_branching(self, exposed_nodes, order, M, supernodes, B):\n\t\tv = exposed_nodes.pop(0)\n\t\torder.append(v)\n\t\tb = self.best_incoming_edge(v, M)\n\t\tif b is None:\n\t\t\tif v in supernodes:\n\t\t\t\tsupernodes.remove(v)\n\t\t\treturn exposed_nodes, order, M, supernodes, B, None\n\t\tb_u, b_v, b_key, b_data = b\n\t\tdata = {self.attr: b_data[self.attr], 'origin': b_data['origin']}\n\t\tB.add_edge(b_u, b_v, **data)\n\t\treturn exposed_nodes, order, M, supernodes, B, b\n\tdef contracting_phase(self, B, n, supernodes, exposed_nodes, M, C, root):\n\t\tcycles = list(nx.simple_cycles(B))\n\t\tif len(cycles) > 0:\n\t\t\tu = 'v_'+str(n)\n\t\t\tsupernodes.append(str(u))\n\t\t\texposed_nodes.append(u)\n\t\t\tfor node in cycles[0]:\n\t\t\t\tC[str(node)] = str(u)\n\t\t\tM, B = self.collapse_cycle(M, cycles[0], B, u)\n\t\t\tfor node in B.nodes():\n\t\t\t\tif B.in_edges([node]) == []:\n\t\t\t\t\tif B.out_edges([node]) == []:\n\t\t\t\t\t\tB.remove_node(node)\n\t\t\t\t\tif node != root and node not in exposed_nodes:\n\t\t\t\t\t\texposed_nodes.append(node)\n\t\t\tn += 1\n\t\treturn B, n, supernodes, exposed_nodes, M, C\n\tdef best(self, root):\n\t\tM = self.graph\n\t\tfor u,v,key,data in M.edges(data=True, keys=True):\n\t\t\tdata['origin'] = (u,v,key,{self.attr: data[self.attr]})\n\t\tn = 0\n\t\tB = nx.DiGraph()\n\t\t# C contains for every node its parent node, so it will be easy to find the path in the collapsing phase\n\t\t# from an isolated root v_1 to v_k\n\t\tnodes = M.nodes()\n\t\tif len(nodes) == 1:\n\t\t\tA = nx.DiGraph()\n\t\t\tA.add_node(nodes[0])\n\t\tC = {str(node): None for node in nodes} \n\t\tdel C[str(root)]\n\t\texposed_nodes = [node for node in nodes]\n\t\texposed_nodes.remove(root)\n\t\tsupernodes = []\n\t\tbeta = {}\n\t\torder = []\n\t\t# collapsing phase\n\t\twhile len(exposed_nodes) > 0:\n\t\t\texposed_nodes, order, M, supernodes, B, b = self.add_b_to_branching(exposed_nodes, order, M, supernodes, B)\n\t\t\tif b is None:\n\t\t\t\tcontinue\n\t\t\tb_u, b_v, b_key, b_data = b\n\t\t\tbeta[b_v] = (b_u, b_v, b_key, b_data)\n\t\t\tB, n, supernodes, exposed_nodes, M, C = self.contracting_phase(B, n, supernodes, exposed_nodes, M, C, root)\n\t\t# expanding phase\n\t\twhile len(supernodes) > 0:\n\t\t\tv_1 = supernodes.pop()\n\t\t\torigin_edge_v_1 = beta[v_1][3]['origin']  \n\t\t\tv_k = origin_edge_v_1[1]\n\t\t\tbeta[v_k] = beta[v_1]\n\t\t\tv_i = str(C[str(v_k)])\n\t\t\twhile v_i != v_1:\n\t\t\t\tsupernodes.remove(v_i)\n\t\t\t\tv_i = C.pop(v_i)\n\t\tA = nx.DiGraph()\n\t\tfor k, edge in beta.items():\n\t\t\tif k in nodes:\n\t\t\t\tu,v,key,data = edge[3]['origin']\n\t\t\t\tA.add_edge(u,v,**data.copy())\n\t\treturn A\n\tdef get_priority_queue_for_incoming_node(self, graph, v, b):\n\t\tQ = PriorityQueue()\n\t\tfor u,v,key,data in graph.in_edges([v], data=True, keys=True):\n\t\t\tif key == b[2]:\n\t\t\t\tcontinue\n\t\t\tQ.put((-data[self.attr], (u,v,key,data)))\n\t\treturn Q\n\tdef seek(self, b, A, graph):\n\t\tv = b[1]\n\t\tQ = self.get_priority_queue_for_incoming_node(graph, v, b)\n\t\twhile not Q.empty():\n\t\t\tf = Q.get()\n\t\t\ttry:\n\t\t\t\t# v = T(b) is an ancestor of O(f)=f[1][1]?\n\t\t\t\tv_origin = b[3]['origin'][1]\n\t\t\t\tf_origin = f[1][3]['origin'][0] \n\t\t\t\tnx.shortest_path(A, v_origin, f_origin)\n\t\t\texcept nx.exception.NetworkXNoPath:\n\t\t\t\treturn f[1]\n\t\treturn None\n\tdef next(self, A, Y, Z, graph=None, root='R'):\n\t\td = float('inf')\n\t\tedge = None\n\t\tif graph is not None:\n\t\t\tself._init(graph)\n\t\tM = self.graph\n\t\tfor u,v,key,data in M.edges(data=True, keys=True):\n\t\t\tdata['origin'] = (u,v,key,{self.attr: data[self.attr]})\n\t\tn = 0\n\t\tB = nx.DiGraph()\n\t\tnodes = M.nodes()\n\t\tC = {str(node): None for node in nodes} \n\t\texposed_nodes = [node for node in nodes]\n\t\tif 'R' in exposed_nodes: \n\t\t\texposed_nodes.remove('R')\n\t\torder = []\n\t\tsupernodes = []\n\t\twhile len(exposed_nodes) > 0:\n\t\t\texposed_nodes, order, M, supernodes, B, b = self.add_b_to_branching(exposed_nodes, order, M, supernodes, B)\n\t\t\tif b is None:\n\t\t\t\tcontinue\n\t\t\tb_u, b_v, b_key, b_data = b\n\t\t\torigin_u, origin_v = b_data['origin'][:2]\n\t\t\tif (origin_u, origin_v) in A.edges():\n\t\t\t\tif (origin_u, origin_v) not in Y.edges():\n\t\t\t\t\tf = self.seek(b, A, M)\n\t\t\t\t\tif f is not None:\n\t\t\t\t\t\tf_u, f_v, f_key, f_data = f\n\t\t\t\t\t\tif b_data[self.attr] - f_data[self.attr] < d:\n\t\t\t\t\t\t\tedge = b\n\t\t\t\t\t\t\td = b_data[self.attr] - f_data[self.attr]\n\t\t\tB, n, supernodes, exposed_nodes, M, C = self.contracting_phase(B, n, supernodes, exposed_nodes, M, C, root)\n\t\treturn edge[3]['origin'], d\n\tdef ranking(self, k, graph=None, Y=nx.DiGraph(), Z=nx.DiGraph(), mode='branching', root='R'):\n\t\tif graph is not None:\n\t\t\tself._init(graph, Y, Z)\n\t\tif root == 'R' and mode == 'branching':\n\t\t\tbest = self.best_branching\n\t\telif root == 'R' and mode == 'arborescence_no_rooted':\n\t\t\tbest = self.best_arborescence_no_rooted\n\t\telse:\n\t\t\tbest = self.best_arborescence_rooted\n\t\t\n\t\tgraph = self.graph.copy()\n\t\tA = best(root)  \n\t\troots = self.find_roots(A)\n\t\tif 'R' in roots:\n\t\t\troots.remove('R')\n\t\tprint ('roots for ranking',roots)\n\t\tself._init(graph)\n\t\te, d = self.next(A, Y, Z)  \n\t\tP = PriorityQueue()\n\t\tw = self.get_graph_score(A) - d if d != float('inf') else float('inf') \n\t\tP.put( (-w, e, A, Y, Z) )\n\t\tsolutions = [A]\n\t\tfor j in range(1,k+1):\n\t\t\tw, e, A, Y, Z = P.get()\n\t\t\tw = -w \t\t\t\n\t\t\troots.extend([root for root in self.find_roots(A) if root not in roots])\n\t\t\tif 'R' in roots:\n\t\t\t\troots.remove('R')\n\t\t\tif w == float('-inf'):\n\t\t\t\treturn solutions\n\t\t\te_u, e_v, e_key, data = e\n\t\t\t\n\t\t\tY_ = Y.copy()\n\t\t\tY_.add_edge(e_u, e_v, **data.copy())\n\t\t\t\n\t\t\tZ_ = Z.copy()\n", "answers": ["\t\t\tZ_.add_edge(e_u, e_v, **data.copy())"], "pred": "```\n```\nNext line of code:\n```\n```\nNext line of code:\n```\n```\nNext line of code:\n```\n```\nNext line of code:\n```\n```\nNext line of code:\n```\n```\nNext line of code:\n```\n```\nNext line of code:\n``", "length": 1069, "dataset": "lcc", "language": "python", "all_classes": null, "_id": "ca807f49d7c6f84dcae3df694bde685aa7f75a02e9d4f574"}
{"prompt": "Please complete the code given below. \n#! /usr/bin/env python\n# Last Change: Sun Dec 14 07:00 PM 2008 J\n\"\"\"Test for the sndfile class.\"\"\"\nfrom os.path import join, dirname\nimport os\nimport sys\nfrom numpy.testing import TestCase, assert_array_equal, dec\nimport numpy as np\nfrom audiolab import Sndfile, Format, available_encodings, available_file_formats\nfrom testcommon import open_tmp_file, close_tmp_file, TEST_DATA_DIR\n_DTYPE_TO_ENC = {np.float64 : 'float64', np.float32: 'float32', \n                 np.int32: 'pcm32', np.int16: 'pcm16'}\n# XXX: there is a lot to refactor here\nclass TestSndfile(TestCase):\n    def test_basic_io(self):\n        \"\"\" Check open, close and basic read/write\"\"\"\n        # dirty !\n        ofilename = join(TEST_DATA_DIR, 'test.wav')\n        rfd, fd, cfilename = open_tmp_file('pysndfiletest.wav')\n        try:\n            nbuff = 22050\n            # Open the test file for reading\n            a = Sndfile(ofilename, 'r')\n            nframes = a.nframes\n            # Open the copy file for writing\n            format = Format('wav', 'pcm16')\n            b = Sndfile(fd, 'w', format, a.channels, a.samplerate)\n            # Copy the data\n            for i in range(nframes / nbuff):\n                tmpa    = a.read_frames(nbuff)\n                assert tmpa.dtype == np.float\n                b.write_frames(tmpa)\n            nrem    = nframes % nbuff\n            tmpa    = a.read_frames(nrem)\n            assert tmpa.dtype == np.float\n            b.write_frames(tmpa)\n            a.close()\n            b.close()\n        finally:\n            close_tmp_file(rfd, cfilename)\n    @dec.skipif(sys.platform=='win32', \n                \"Not testing opening by fd because does not work on win32\")\n    def test_basic_io_fd(self):\n        \"\"\" Check open from fd works\"\"\"\n        ofilename = join(TEST_DATA_DIR, 'test.wav')\n        fd = os.open(ofilename, os.O_RDONLY)\n        hdl = Sndfile(fd, 'r')\n        hdl.close()\n    def test_raw(self):\n        rawname = join(TEST_DATA_DIR, 'test.raw')\n        format = Format('raw', 'pcm16', 'little')\n        a = Sndfile(rawname, 'r', format, 1, 11025)\n        assert a.nframes == 11290\n        a.close()\n    def test_float64(self):\n        \"\"\"Check float64 write/read works\"\"\"\n        self._test_read_write(np.float64)\n    def test_float32(self):\n        \"\"\"Check float32 write/read works\"\"\"\n        self._test_read_write(np.float32)\n    def test_int32(self):\n        \"\"\"Check 32 bits pcm write/read works\"\"\"\n        self._test_read_write(np.int32)\n    def test_int16(self):\n        \"\"\"Check 16 bits pcm write/read works\"\"\"\n        self._test_read_write(np.int16)\n    def _test_read_write(self, dtype):\n        # dirty !\n        ofilename = join(TEST_DATA_DIR, 'test.wav')\n        rfd, fd, cfilename = open_tmp_file('pysndfiletest.wav')\n        try:\n            nbuff = 22050\n            # Open the test file for reading\n            a = Sndfile(ofilename, 'r')\n            nframes = a.nframes\n            # Open the copy file for writing\n            format = Format('wav', _DTYPE_TO_ENC[dtype])\n            b = Sndfile(fd, 'w', format, a.channels, a.samplerate)\n            # Copy the data in the wav file\n            for i in range(nframes / nbuff):\n                tmpa    = a.read_frames(nbuff, dtype=dtype)\n                assert tmpa.dtype == dtype\n                b.write_frames(tmpa)\n            nrem = nframes % nbuff\n            tmpa = a.read_frames(nrem)\n            b.write_frames(tmpa)\n            a.close()\n            b.close()\n            # Now, reopen both files in for reading, and check data are\n            # the same\n            a = Sndfile(ofilename, 'r')\n            b = Sndfile(cfilename, 'r')\n            for i in range(nframes / nbuff):\n                tmpa = a.read_frames(nbuff, dtype=dtype)\n                tmpb = b.read_frames(nbuff, dtype=dtype)\n                assert_array_equal(tmpa, tmpb)\n            a.close()\n            b.close()\n        finally:\n            close_tmp_file(rfd, cfilename)\n    #def test_supported_features(self):\n    #    for i in available_file_formats():\n    #        print \"Available encodings for format %s are : \" % i\n    #        for j in available_encodings(i):\n    #            print '\\t%s' % j\n    def test_short_io(self):\n        self._test_int_io(np.short)\n    def test_int32_io(self):\n        self._test_int_io(np.int32)\n    def _test_int_io(self, dt):\n        # TODO: check if neg or pos value is the highest in abs\n        rfd, fd, cfilename = open_tmp_file('pysndfiletest.wav')\n        try:\n            # Use almost full possible range possible for the given data-type\n            nb = 2 ** (8 * np.dtype(dt).itemsize - 3)\n            fs = 22050\n            nbuff = fs\n            a = np.random.random_integers(-nb, nb, nbuff)\n            a = a.astype(dt)\n            # Open the file for writing\n            format = Format('wav', _DTYPE_TO_ENC[dt])\n            b = Sndfile(fd, 'w', format, 1, fs)\n            b.write_frames(a)\n            b.close()\n            b = Sndfile(cfilename, 'r')\n            read_a  = b.read_frames(nbuff, dtype=dt)\n            b.close()\n            assert_array_equal(a, read_a)\n        finally:\n            close_tmp_file(rfd, cfilename)\n    def test_mismatch(self):\n        \"\"\"Check for bad arguments.\"\"\"\n        # This test open a file for writing, but with bad args (channels and\n        # nframes inverted)\n        rfd, fd, cfilename = open_tmp_file('pysndfiletest.wav')\n        try:\n            # Open the file for writing\n            format = Format('wav', 'pcm16')\n            try:\n                b = Sndfile(fd, 'w', format, channels=22000, samplerate=1)\n                raise AssertionError(\"Try to open a file with more than 256 \"\\\n                                     \"channels, this should not succeed !\")\n            except ValueError, e:\n                pass\n        finally:\n            close_tmp_file(rfd, cfilename)\n    def test_bigframes(self):\n        \"\"\" Try to seek really far.\"\"\"\n        rawname = join(TEST_DATA_DIR, 'test.wav')\n        a = Sndfile(rawname, 'r')\n        try:\n            try:\n                a.seek(2 ** 60)\n                raise Exception, \\\n                      \"Seek really succeded ! This should not happen\"\n            except IOError, e:\n                pass\n        finally:\n            a.close()\n    def test_float_frames(self):\n        \"\"\" Check nframes can be a float\"\"\"\n        rfd, fd, cfilename   = open_tmp_file('pysndfiletest.wav')\n        try:\n            # Open the file for writing\n            format = Format('wav', 'pcm16')\n            a = Sndfile(fd, 'rw', format, channels=1, samplerate=22050)\n            tmp = np.random.random_integers(-100, 100, 1000)\n            tmp = tmp.astype(np.short)\n            a.write_frames(tmp)\n            a.seek(0)\n            a.sync()\n            ctmp = a.read_frames(1e2, dtype=np.short)\n            a.close()\n        finally:\n            close_tmp_file(rfd, cfilename)\n    def test_nofile(self):\n        \"\"\" Check the failure when opening a non existing file.\"\"\"\n        try:\n            f = Sndfile(\"floupi.wav\", \"r\")\n            raise AssertionError(\"call to non existing file should not succeed\")\n        except IOError:\n            pass\n        except Exception, e:\n            raise AssertionError(\"opening non existing file should raise\" \\\n                                 \" a IOError exception, got %s instead\" %\n                                 e.__class__)\nclass TestSeek(TestCase):\n    def test_simple(self):\n        ofilename = join(TEST_DATA_DIR, 'test.wav')\n        # Open the test file for reading\n        a = Sndfile(ofilename, 'r')\n        nframes = a.nframes\n        buffsize = 1024\n        buffsize = min(nframes, buffsize)\n        # First, read some frames, go back, and compare buffers\n        buff = a.read_frames(buffsize)\n        a.seek(0)\n        buff2 = a.read_frames(buffsize)\n        assert_array_equal(buff, buff2)\n        a.close()\n        # Now, read some frames, go back, and compare buffers\n        # (check whence == 1 == SEEK_CUR)\n        a = Sndfile(ofilename, 'r')\n        a.read_frames(buffsize)\n        buff = a.read_frames(buffsize)\n        a.seek(-buffsize, 1)\n        buff2 = a.read_frames(buffsize)\n        assert_array_equal(buff, buff2)\n        a.close()\n        # Now, read some frames, go back, and compare buffers\n        # (check whence == 2 == SEEK_END)\n        a = Sndfile(ofilename, 'r')\n        buff = a.read_frames(nframes)\n        a.seek(-buffsize, 2)\n        buff2 = a.read_frames(buffsize)\n        assert_array_equal(buff[-buffsize:], buff2)\n    def test_rw(self):\n        \"\"\"Test read/write pointers for seek.\"\"\"\n        ofilename = join(TEST_DATA_DIR, 'test.wav')\nNext line of code:\n", "input": "", "context": "#! /usr/bin/env python\n# Last Change: Sun Dec 14 07:00 PM 2008 J\n\"\"\"Test for the sndfile class.\"\"\"\nfrom os.path import join, dirname\nimport os\nimport sys\nfrom numpy.testing import TestCase, assert_array_equal, dec\nimport numpy as np\nfrom audiolab import Sndfile, Format, available_encodings, available_file_formats\nfrom testcommon import open_tmp_file, close_tmp_file, TEST_DATA_DIR\n_DTYPE_TO_ENC = {np.float64 : 'float64', np.float32: 'float32', \n                 np.int32: 'pcm32', np.int16: 'pcm16'}\n# XXX: there is a lot to refactor here\nclass TestSndfile(TestCase):\n    def test_basic_io(self):\n        \"\"\" Check open, close and basic read/write\"\"\"\n        # dirty !\n        ofilename = join(TEST_DATA_DIR, 'test.wav')\n        rfd, fd, cfilename = open_tmp_file('pysndfiletest.wav')\n        try:\n            nbuff = 22050\n            # Open the test file for reading\n            a = Sndfile(ofilename, 'r')\n            nframes = a.nframes\n            # Open the copy file for writing\n            format = Format('wav', 'pcm16')\n            b = Sndfile(fd, 'w', format, a.channels, a.samplerate)\n            # Copy the data\n            for i in range(nframes / nbuff):\n                tmpa    = a.read_frames(nbuff)\n                assert tmpa.dtype == np.float\n                b.write_frames(tmpa)\n            nrem    = nframes % nbuff\n            tmpa    = a.read_frames(nrem)\n            assert tmpa.dtype == np.float\n            b.write_frames(tmpa)\n            a.close()\n            b.close()\n        finally:\n            close_tmp_file(rfd, cfilename)\n    @dec.skipif(sys.platform=='win32', \n                \"Not testing opening by fd because does not work on win32\")\n    def test_basic_io_fd(self):\n        \"\"\" Check open from fd works\"\"\"\n        ofilename = join(TEST_DATA_DIR, 'test.wav')\n        fd = os.open(ofilename, os.O_RDONLY)\n        hdl = Sndfile(fd, 'r')\n        hdl.close()\n    def test_raw(self):\n        rawname = join(TEST_DATA_DIR, 'test.raw')\n        format = Format('raw', 'pcm16', 'little')\n        a = Sndfile(rawname, 'r', format, 1, 11025)\n        assert a.nframes == 11290\n        a.close()\n    def test_float64(self):\n        \"\"\"Check float64 write/read works\"\"\"\n        self._test_read_write(np.float64)\n    def test_float32(self):\n        \"\"\"Check float32 write/read works\"\"\"\n        self._test_read_write(np.float32)\n    def test_int32(self):\n        \"\"\"Check 32 bits pcm write/read works\"\"\"\n        self._test_read_write(np.int32)\n    def test_int16(self):\n        \"\"\"Check 16 bits pcm write/read works\"\"\"\n        self._test_read_write(np.int16)\n    def _test_read_write(self, dtype):\n        # dirty !\n        ofilename = join(TEST_DATA_DIR, 'test.wav')\n        rfd, fd, cfilename = open_tmp_file('pysndfiletest.wav')\n        try:\n            nbuff = 22050\n            # Open the test file for reading\n            a = Sndfile(ofilename, 'r')\n            nframes = a.nframes\n            # Open the copy file for writing\n            format = Format('wav', _DTYPE_TO_ENC[dtype])\n            b = Sndfile(fd, 'w', format, a.channels, a.samplerate)\n            # Copy the data in the wav file\n            for i in range(nframes / nbuff):\n                tmpa    = a.read_frames(nbuff, dtype=dtype)\n                assert tmpa.dtype == dtype\n                b.write_frames(tmpa)\n            nrem = nframes % nbuff\n            tmpa = a.read_frames(nrem)\n            b.write_frames(tmpa)\n            a.close()\n            b.close()\n            # Now, reopen both files in for reading, and check data are\n            # the same\n            a = Sndfile(ofilename, 'r')\n            b = Sndfile(cfilename, 'r')\n            for i in range(nframes / nbuff):\n                tmpa = a.read_frames(nbuff, dtype=dtype)\n                tmpb = b.read_frames(nbuff, dtype=dtype)\n                assert_array_equal(tmpa, tmpb)\n            a.close()\n            b.close()\n        finally:\n            close_tmp_file(rfd, cfilename)\n    #def test_supported_features(self):\n    #    for i in available_file_formats():\n    #        print \"Available encodings for format %s are : \" % i\n    #        for j in available_encodings(i):\n    #            print '\\t%s' % j\n    def test_short_io(self):\n        self._test_int_io(np.short)\n    def test_int32_io(self):\n        self._test_int_io(np.int32)\n    def _test_int_io(self, dt):\n        # TODO: check if neg or pos value is the highest in abs\n        rfd, fd, cfilename = open_tmp_file('pysndfiletest.wav')\n        try:\n            # Use almost full possible range possible for the given data-type\n            nb = 2 ** (8 * np.dtype(dt).itemsize - 3)\n            fs = 22050\n            nbuff = fs\n            a = np.random.random_integers(-nb, nb, nbuff)\n            a = a.astype(dt)\n            # Open the file for writing\n            format = Format('wav', _DTYPE_TO_ENC[dt])\n            b = Sndfile(fd, 'w', format, 1, fs)\n            b.write_frames(a)\n            b.close()\n            b = Sndfile(cfilename, 'r')\n            read_a  = b.read_frames(nbuff, dtype=dt)\n            b.close()\n            assert_array_equal(a, read_a)\n        finally:\n            close_tmp_file(rfd, cfilename)\n    def test_mismatch(self):\n        \"\"\"Check for bad arguments.\"\"\"\n        # This test open a file for writing, but with bad args (channels and\n        # nframes inverted)\n        rfd, fd, cfilename = open_tmp_file('pysndfiletest.wav')\n        try:\n            # Open the file for writing\n            format = Format('wav', 'pcm16')\n            try:\n                b = Sndfile(fd, 'w', format, channels=22000, samplerate=1)\n                raise AssertionError(\"Try to open a file with more than 256 \"\\\n                                     \"channels, this should not succeed !\")\n            except ValueError, e:\n                pass\n        finally:\n            close_tmp_file(rfd, cfilename)\n    def test_bigframes(self):\n        \"\"\" Try to seek really far.\"\"\"\n        rawname = join(TEST_DATA_DIR, 'test.wav')\n        a = Sndfile(rawname, 'r')\n        try:\n            try:\n                a.seek(2 ** 60)\n                raise Exception, \\\n                      \"Seek really succeded ! This should not happen\"\n            except IOError, e:\n                pass\n        finally:\n            a.close()\n    def test_float_frames(self):\n        \"\"\" Check nframes can be a float\"\"\"\n        rfd, fd, cfilename   = open_tmp_file('pysndfiletest.wav')\n        try:\n            # Open the file for writing\n            format = Format('wav', 'pcm16')\n            a = Sndfile(fd, 'rw', format, channels=1, samplerate=22050)\n            tmp = np.random.random_integers(-100, 100, 1000)\n            tmp = tmp.astype(np.short)\n            a.write_frames(tmp)\n            a.seek(0)\n            a.sync()\n            ctmp = a.read_frames(1e2, dtype=np.short)\n            a.close()\n        finally:\n            close_tmp_file(rfd, cfilename)\n    def test_nofile(self):\n        \"\"\" Check the failure when opening a non existing file.\"\"\"\n        try:\n            f = Sndfile(\"floupi.wav\", \"r\")\n            raise AssertionError(\"call to non existing file should not succeed\")\n        except IOError:\n            pass\n        except Exception, e:\n            raise AssertionError(\"opening non existing file should raise\" \\\n                                 \" a IOError exception, got %s instead\" %\n                                 e.__class__)\nclass TestSeek(TestCase):\n    def test_simple(self):\n        ofilename = join(TEST_DATA_DIR, 'test.wav')\n        # Open the test file for reading\n        a = Sndfile(ofilename, 'r')\n        nframes = a.nframes\n        buffsize = 1024\n        buffsize = min(nframes, buffsize)\n        # First, read some frames, go back, and compare buffers\n        buff = a.read_frames(buffsize)\n        a.seek(0)\n        buff2 = a.read_frames(buffsize)\n        assert_array_equal(buff, buff2)\n        a.close()\n        # Now, read some frames, go back, and compare buffers\n        # (check whence == 1 == SEEK_CUR)\n        a = Sndfile(ofilename, 'r')\n        a.read_frames(buffsize)\n        buff = a.read_frames(buffsize)\n        a.seek(-buffsize, 1)\n        buff2 = a.read_frames(buffsize)\n        assert_array_equal(buff, buff2)\n        a.close()\n        # Now, read some frames, go back, and compare buffers\n        # (check whence == 2 == SEEK_END)\n        a = Sndfile(ofilename, 'r')\n        buff = a.read_frames(nframes)\n        a.seek(-buffsize, 2)\n        buff2 = a.read_frames(buffsize)\n        assert_array_equal(buff[-buffsize:], buff2)\n    def test_rw(self):\n        \"\"\"Test read/write pointers for seek.\"\"\"\n        ofilename = join(TEST_DATA_DIR, 'test.wav')\n", "answers": ["        rfd, fd, cfilename   = open_tmp_file('rwseektest.wav')"], "pred": "  Next line of code:\n  Next line of code:\n  Next line of code:\n  Next line of code:\n  Next line of code:\n  Next line of code:\n  Next line of code:\n  Next line of code:\n  Next line of code:\n  Next line of code:\n  Next line of", "length": 844, "dataset": "lcc", "language": "python", "all_classes": null, "_id": "04429037d9380b6e9c3f7b2070992a5af10745895025113c"}
{"prompt": "Please complete the code given below. \n#!/usr/bin/env python\nfrom apps.webdriver_testing.pages.site_pages import UnisubsPage\nfrom urlparse import urlsplit\nclass VideoPage(UnisubsPage):\n    \"\"\"\n     Video Page contains the common elements in the video page.\n    \"\"\"\n    _URL = \"videos/%s/info/\"  # %s is the unique onsite video id\n    _VIDEO_TITLE = \".main-title a\"\n    _SPEAKER_NAME = \"div.content div div > h4\"\n    _LOCATION = \"div.content div div h4:nth-child(2)\"\n    _DESCRIPTION = \"div#description\"\n    _EMBEDDED_VIDEO = \"div.unisubs-widget div.unisubs-videoTab-container\"\n    _SUBTITLE_MENU = \"a.unisubs-subtitleMeLink span.unisubs-tabTextchoose\"\n    _LIKE_FACEBOOK = \"li.unisubs-facebook-like button\"\n    _POST_FACEBOOK = \"a.facebook\"\n    _POST_TWITTER = \"a.twittter\"\n    _EMAIL_FRIENDS = \"a.email\"\n    _FOLLOW = \"button.follow-button\"\n    #FOLLOW CONFIRMATION\n    _UNFOLLOW_ALL = 'input#unfollow-all-languages-button'\n    _SUBTITLES_OK = 'input#popup_ok'\n    _EMBED_HELP = \"div.unisubs-share h3 a.embed_options_link\"\n    _EMBED_CODE = (\"div#embed-modal.modal div.modal-body form fieldset \"\n        \"textarea\")\n    #TOP TABS\n    _URLS_TAB = 'href=\"?tab=urls\"]'\n    _VIDEO_TAB = 'a[href=\"?tab=video\"]'\n    _COMMENTS_TAB = 'a[href=\"?tab=comments\"]'\n    _ACTIVITY_TAB = 'a[href=\"?tab=activity\"]'\n    _ADD_SUBTITLES = \"a.add_subtitles\"\n    #VIDEO SIDE SECTION\n    _INFO = \"ul#video-menu.left_nav li:nth-child(1) > a\"\n    _ADD_TRANSLATION = \"li.contribute a#add_translation\"\n    _UPLOAD_SUBTITLES = \"a#upload-subtitles-link\"\n    #SUBTITLES_SIDE_SECTION\n    _SUB_LANGUAGES = \"ul#subtitles-menu li\"\n    _STATUS_TAGS = \"span.tags\"\n    #TEAM_SIDE_SECTION\n    _ADD_TO_TEAM_PULLDOWN = (\"ul#moderation-menu.left_nav li div.sort_button \"\n        \"div.arrow\")\n    _TEAM_LINK = (\"ul#moderation-menu.left_nav li div.sort_button ul li \"\n        \"a[href*='%s']\")\n    #ADMIN_SIDE_SECTION\n    _DEBUG_INFO = \"\"\n    _EDIT = \"\"\n    #UPLOAD SUBTITLES DIALOG\n    _SELECT_LANGUAGE = 'select#id_language_code'\n    _TRANSLATE_FROM = 'select#id_from_language_code'\n    _PRIMARY_AUDIO = 'select#id_primary_audio_language_code'\n    _SUBTITLES_FILE = 'input#subtitles-file-field'\n    _IS_COMPLETE = 'input#updload-subtitles-form-is_complete' #checked default\n    _UPLOAD_SUBMIT = 'form#upload-subtitles-form button.green_button'\n    _FEEDBACK_MESSAGE = 'p.feedback-message'\n    _CLOSE = 'div#upload_subs-div a.close'\n    UPLOAD_SUCCESS_TEXT = ('Thank you for uploading. It may take a minute or '\n                           'so for your subtitles to appear.')\n    #TAB FIELDS\n    _COMMENTS_BOX = 'textarea#id_comment_form_content'\n    _ACTIVITY_LIST = 'ul.activity li p'    \n    def open_video_page(self, video_id):\n        self.open_page(self._URL % video_id)\n    def open_video_activity(self, video_id):\n        self.open_video_page(video_id)\n        self.click_by_css(self._ACTIVITY_TAB)\n    def video_title(self):\n        return self.get_text_by_css(self._VIDEO_TITLE)\n    def add_translation(self):\n        self.click_by_css(self._ADD_TRANSLATION)\n    def upload_subtitles(self, \n                         sub_lang, \n                         sub_file,\n                         audio_lang = None,\n                         translated_from = None, \n                         is_complete = True):\n        #Open the dialog\n        self.wait_for_element_visible(self._UPLOAD_SUBTITLES)\n        self.click_by_css(self._UPLOAD_SUBTITLES)\n        #Choose the language\n        self.wait_for_element_visible(self._SELECT_LANGUAGE)\n        self.select_option_by_text(self._SELECT_LANGUAGE, sub_lang)\n        #Set the audio language\n        if audio_lang:\n            self.select_option_by_text(self._PRIMARY_AUDIO, audio_lang)\n        #Set the translation_from field\n        if translated_from:\n            self.select_option_by_text(self._TRANSLATE_FROM, translated_from)\n        #Input the subtitle file\n        self.type_by_css(self._SUBTITLES_FILE, sub_file)\n        #Set complete\n        if not is_complete:\n            self.click_by_css(self._IS_COMPLETE)\n        #Start the upload\n        self.wait_for_element_present(self._UPLOAD_SUBMIT)\n        self.click_by_css(self._UPLOAD_SUBMIT)\n        #Get the the response message\n        self.wait_for_element_present(self._FEEDBACK_MESSAGE, wait_time=20)\n        message_text = self.get_text_by_css(self._FEEDBACK_MESSAGE)\n        #Close the dialog\n        self.click_by_css(self._CLOSE)\n        self.wait_for_element_not_visible(self._CLOSE)\n        return message_text\n    def open_info_page(self):\n        self.click_by_css(self._INFO)\n    def add_video_to_team(self, team_name):\n        self.click_by_css(self._ADD_TO_TEAM_PULLDOWN)\n        self.click_by_css(self._TEAM_LINK % team_name)\n    def video_id(self):\n        page_url = self.browser.current_url\n        url_parts = urlsplit(page_url).path\n        urlfrag = url_parts.split('/')[3]\n        return urlfrag\n    def description_text(self):\n        return self.get_text_by_css(self._DESCRIPTION)\n    def speaker_name(self):\n        return self.get_text_by_css(self._SPEAKER_NAME)\n    def location(self):\n        return self.get_text_by_css(self._LOCATION)\n    def video_embed_present(self):\n        if self.is_element_present(self._EMBEDDED_VIDEO):\n            return True\n    def add_subtitles(self):\n        self.click_by_css(self._ADD_SUBTITLES)\n    def team_slug(self, slug):\n        \"\"\"Return true if the team stub is linked on the video page.\n        \"\"\"\n        team_link = \"a[href*='/teams/%s/']\" % slug\n        if self.is_element_present(team_link):\n            return True\n    def feature_video(self):\n        self.click_link_text('Feature video')\n    def unfeature_video(self):\n        self.click_link_text('Unfeature video')\n    def displays_subtitle_me(self):\n        return self.is_element_visible(self._SUBTITLE_MENU)\n    def click_subtitle_me(self):\n        self.click_by_css(self._SUBTITLE_MENU)\n    def displays_add_subtitles(self):\n        return self.is_element_visible(self._ADD_SUBTITLES)\n    def displays_add_translation(self):\n        return self.is_element_visible(self._ADD_TRANSLATION)\n    def displays_upload_subtitles(self):\n        return self.is_element_visible(self._UPLOAD_SUBTITLES)\n    def follow_text(self):\n        return self.get_text_by_css(self._FOLLOW)\n    def toggle_follow(self, lang=False):\n        self.click_by_css(self._FOLLOW)\n        if lang:\n            self.click_by_css(self._SUBTITLES_OK)\n        else:\n            self.click_by_css(self._UNFOLLOW_ALL)\n    def subtitle_languages(self):\n        langs = []\n        els = self.get_elements_list(self._SUB_LANGUAGES + \" a\")\n        for el in els:\n            langs.append(el.text)\n        return langs\n    def language_status(self, language):\n        els =  self.get_elements_list(self._SUB_LANGUAGES)\n        for el in els:\n            e = el.find_element_by_css_selector(\"a\")\n            self.logger.info(e.text)\nNext line of code:\n", "input": "", "context": "#!/usr/bin/env python\nfrom apps.webdriver_testing.pages.site_pages import UnisubsPage\nfrom urlparse import urlsplit\nclass VideoPage(UnisubsPage):\n    \"\"\"\n     Video Page contains the common elements in the video page.\n    \"\"\"\n    _URL = \"videos/%s/info/\"  # %s is the unique onsite video id\n    _VIDEO_TITLE = \".main-title a\"\n    _SPEAKER_NAME = \"div.content div div > h4\"\n    _LOCATION = \"div.content div div h4:nth-child(2)\"\n    _DESCRIPTION = \"div#description\"\n    _EMBEDDED_VIDEO = \"div.unisubs-widget div.unisubs-videoTab-container\"\n    _SUBTITLE_MENU = \"a.unisubs-subtitleMeLink span.unisubs-tabTextchoose\"\n    _LIKE_FACEBOOK = \"li.unisubs-facebook-like button\"\n    _POST_FACEBOOK = \"a.facebook\"\n    _POST_TWITTER = \"a.twittter\"\n    _EMAIL_FRIENDS = \"a.email\"\n    _FOLLOW = \"button.follow-button\"\n    #FOLLOW CONFIRMATION\n    _UNFOLLOW_ALL = 'input#unfollow-all-languages-button'\n    _SUBTITLES_OK = 'input#popup_ok'\n    _EMBED_HELP = \"div.unisubs-share h3 a.embed_options_link\"\n    _EMBED_CODE = (\"div#embed-modal.modal div.modal-body form fieldset \"\n        \"textarea\")\n    #TOP TABS\n    _URLS_TAB = 'href=\"?tab=urls\"]'\n    _VIDEO_TAB = 'a[href=\"?tab=video\"]'\n    _COMMENTS_TAB = 'a[href=\"?tab=comments\"]'\n    _ACTIVITY_TAB = 'a[href=\"?tab=activity\"]'\n    _ADD_SUBTITLES = \"a.add_subtitles\"\n    #VIDEO SIDE SECTION\n    _INFO = \"ul#video-menu.left_nav li:nth-child(1) > a\"\n    _ADD_TRANSLATION = \"li.contribute a#add_translation\"\n    _UPLOAD_SUBTITLES = \"a#upload-subtitles-link\"\n    #SUBTITLES_SIDE_SECTION\n    _SUB_LANGUAGES = \"ul#subtitles-menu li\"\n    _STATUS_TAGS = \"span.tags\"\n    #TEAM_SIDE_SECTION\n    _ADD_TO_TEAM_PULLDOWN = (\"ul#moderation-menu.left_nav li div.sort_button \"\n        \"div.arrow\")\n    _TEAM_LINK = (\"ul#moderation-menu.left_nav li div.sort_button ul li \"\n        \"a[href*='%s']\")\n    #ADMIN_SIDE_SECTION\n    _DEBUG_INFO = \"\"\n    _EDIT = \"\"\n    #UPLOAD SUBTITLES DIALOG\n    _SELECT_LANGUAGE = 'select#id_language_code'\n    _TRANSLATE_FROM = 'select#id_from_language_code'\n    _PRIMARY_AUDIO = 'select#id_primary_audio_language_code'\n    _SUBTITLES_FILE = 'input#subtitles-file-field'\n    _IS_COMPLETE = 'input#updload-subtitles-form-is_complete' #checked default\n    _UPLOAD_SUBMIT = 'form#upload-subtitles-form button.green_button'\n    _FEEDBACK_MESSAGE = 'p.feedback-message'\n    _CLOSE = 'div#upload_subs-div a.close'\n    UPLOAD_SUCCESS_TEXT = ('Thank you for uploading. It may take a minute or '\n                           'so for your subtitles to appear.')\n    #TAB FIELDS\n    _COMMENTS_BOX = 'textarea#id_comment_form_content'\n    _ACTIVITY_LIST = 'ul.activity li p'    \n    def open_video_page(self, video_id):\n        self.open_page(self._URL % video_id)\n    def open_video_activity(self, video_id):\n        self.open_video_page(video_id)\n        self.click_by_css(self._ACTIVITY_TAB)\n    def video_title(self):\n        return self.get_text_by_css(self._VIDEO_TITLE)\n    def add_translation(self):\n        self.click_by_css(self._ADD_TRANSLATION)\n    def upload_subtitles(self, \n                         sub_lang, \n                         sub_file,\n                         audio_lang = None,\n                         translated_from = None, \n                         is_complete = True):\n        #Open the dialog\n        self.wait_for_element_visible(self._UPLOAD_SUBTITLES)\n        self.click_by_css(self._UPLOAD_SUBTITLES)\n        #Choose the language\n        self.wait_for_element_visible(self._SELECT_LANGUAGE)\n        self.select_option_by_text(self._SELECT_LANGUAGE, sub_lang)\n        #Set the audio language\n        if audio_lang:\n            self.select_option_by_text(self._PRIMARY_AUDIO, audio_lang)\n        #Set the translation_from field\n        if translated_from:\n            self.select_option_by_text(self._TRANSLATE_FROM, translated_from)\n        #Input the subtitle file\n        self.type_by_css(self._SUBTITLES_FILE, sub_file)\n        #Set complete\n        if not is_complete:\n            self.click_by_css(self._IS_COMPLETE)\n        #Start the upload\n        self.wait_for_element_present(self._UPLOAD_SUBMIT)\n        self.click_by_css(self._UPLOAD_SUBMIT)\n        #Get the the response message\n        self.wait_for_element_present(self._FEEDBACK_MESSAGE, wait_time=20)\n        message_text = self.get_text_by_css(self._FEEDBACK_MESSAGE)\n        #Close the dialog\n        self.click_by_css(self._CLOSE)\n        self.wait_for_element_not_visible(self._CLOSE)\n        return message_text\n    def open_info_page(self):\n        self.click_by_css(self._INFO)\n    def add_video_to_team(self, team_name):\n        self.click_by_css(self._ADD_TO_TEAM_PULLDOWN)\n        self.click_by_css(self._TEAM_LINK % team_name)\n    def video_id(self):\n        page_url = self.browser.current_url\n        url_parts = urlsplit(page_url).path\n        urlfrag = url_parts.split('/')[3]\n        return urlfrag\n    def description_text(self):\n        return self.get_text_by_css(self._DESCRIPTION)\n    def speaker_name(self):\n        return self.get_text_by_css(self._SPEAKER_NAME)\n    def location(self):\n        return self.get_text_by_css(self._LOCATION)\n    def video_embed_present(self):\n        if self.is_element_present(self._EMBEDDED_VIDEO):\n            return True\n    def add_subtitles(self):\n        self.click_by_css(self._ADD_SUBTITLES)\n    def team_slug(self, slug):\n        \"\"\"Return true if the team stub is linked on the video page.\n        \"\"\"\n        team_link = \"a[href*='/teams/%s/']\" % slug\n        if self.is_element_present(team_link):\n            return True\n    def feature_video(self):\n        self.click_link_text('Feature video')\n    def unfeature_video(self):\n        self.click_link_text('Unfeature video')\n    def displays_subtitle_me(self):\n        return self.is_element_visible(self._SUBTITLE_MENU)\n    def click_subtitle_me(self):\n        self.click_by_css(self._SUBTITLE_MENU)\n    def displays_add_subtitles(self):\n        return self.is_element_visible(self._ADD_SUBTITLES)\n    def displays_add_translation(self):\n        return self.is_element_visible(self._ADD_TRANSLATION)\n    def displays_upload_subtitles(self):\n        return self.is_element_visible(self._UPLOAD_SUBTITLES)\n    def follow_text(self):\n        return self.get_text_by_css(self._FOLLOW)\n    def toggle_follow(self, lang=False):\n        self.click_by_css(self._FOLLOW)\n        if lang:\n            self.click_by_css(self._SUBTITLES_OK)\n        else:\n            self.click_by_css(self._UNFOLLOW_ALL)\n    def subtitle_languages(self):\n        langs = []\n        els = self.get_elements_list(self._SUB_LANGUAGES + \" a\")\n        for el in els:\n            langs.append(el.text)\n        return langs\n    def language_status(self, language):\n        els =  self.get_elements_list(self._SUB_LANGUAGES)\n        for el in els:\n            e = el.find_element_by_css_selector(\"a\")\n            self.logger.info(e.text)\n", "answers": ["            if e.text == language:"], "pred": "  e = e\n  e = e\n  e = e\n  e = e\n  e = e\n  e = e\n  e = e\n  e = e\n  e = e\n  e = e\n  e = e\n  e = e\n  e = e", "length": 462, "dataset": "lcc", "language": "python", "all_classes": null, "_id": "9bc1f81e1a4c4b44da11ffc093a0c9fecbe5f99e4eff3aa5"}
{"prompt": "Please complete the code given below. \n/*\n * $Header: it.geosolutions.geobatch.wmc.WMCStream,v. 0.1 03/dic/2009 01:55:21 created by Fabiani $\n * $Revision: 0.1 $\n * $Date: 03/dic/2009 01:55:21 $\n *\n * ====================================================================\n *\n * Copyright (C) 2007-2008 GeoSolutions S.A.S.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. \n *\n * ====================================================================\n *\n * This software consists of voluntary contributions made by developers\n * of GeoSolutions.  For more information on GeoSolutions, please see\n * <http://www.geo-solutions.it/>.\n *\n */\npackage it.geosolutions.geobatch.wmc;\nimport it.geosolutions.geobatch.wmc.model.GeneralWMCConfiguration;\nimport it.geosolutions.geobatch.wmc.model.OLBaseClass;\nimport it.geosolutions.geobatch.wmc.model.OLDimension;\nimport it.geosolutions.geobatch.wmc.model.OLExtent;\nimport it.geosolutions.geobatch.wmc.model.OLStyleColorRamps;\nimport it.geosolutions.geobatch.wmc.model.OLStyleValue;\nimport it.geosolutions.geobatch.wmc.model.ViewContext;\nimport it.geosolutions.geobatch.wmc.model.WMCBoundingBox;\nimport it.geosolutions.geobatch.wmc.model.WMCExtension;\nimport it.geosolutions.geobatch.wmc.model.WMCFormat;\nimport it.geosolutions.geobatch.wmc.model.WMCLayer;\nimport it.geosolutions.geobatch.wmc.model.WMCOnlineResource;\nimport it.geosolutions.geobatch.wmc.model.WMCSLD;\nimport it.geosolutions.geobatch.wmc.model.WMCServer;\nimport it.geosolutions.geobatch.wmc.model.WMCStyle;\nimport it.geosolutions.geobatch.wmc.model.WMCWindow;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.Reader;\nimport java.io.Writer;\nimport com.thoughtworks.xstream.XStream;\nimport com.thoughtworks.xstream.converters.Converter;\nimport com.thoughtworks.xstream.converters.MarshallingContext;\nimport com.thoughtworks.xstream.converters.UnmarshallingContext;\nimport com.thoughtworks.xstream.io.HierarchicalStreamReader;\nimport com.thoughtworks.xstream.io.HierarchicalStreamWriter;\nimport com.thoughtworks.xstream.io.xml.DomDriver;\n/**\n * @author Fabiani\n *\n */\npublic class WMCStream {\n\tprivate XStream xstream = new XStream(new DomDriver(\"UTF-8\"));\n\t\n\t/**\n\t * \n\t */\n\tpublic WMCStream() {\n    \t// WMC ViewContext\n    \txstream.alias(\"ViewContext\", ViewContext.class);\n    \txstream.useAttributeFor(ViewContext.class, \"xmlns\");\n    \txstream.useAttributeFor(ViewContext.class, \"xlink\");\n    \txstream.useAttributeFor(ViewContext.class, \"id\");\n    \txstream.useAttributeFor(ViewContext.class, \"version\");\n    \txstream.aliasField(\"xmlns:xlink\", ViewContext.class, \"xlink\");\n    \txstream.aliasField(\"General\", ViewContext.class, \"general\");\n    \txstream.aliasField(\"LayerList\", ViewContext.class, \"layerList\");\n    \t// WMC ViewContext::General\n    \txstream.aliasField(\"Window\", GeneralWMCConfiguration.class, \"window\");\n    \txstream.aliasField(\"Title\", GeneralWMCConfiguration.class, \"title\");\n    \txstream.aliasField(\"Abstract\", GeneralWMCConfiguration.class, \"_abstract\");\n    \t// WMC ViewContext::General::Window\n    \txstream.useAttributeFor(WMCWindow.class, \"height\");\n    \txstream.useAttributeFor(WMCWindow.class, \"width\");\n    \txstream.aliasField(\"BoundingBox\", WMCWindow.class, \"bbox\");\n    \t// WMC ViewContext::General::Window::BoundingBox\n    \txstream.useAttributeFor(WMCBoundingBox.class, \"srs\");\n    \txstream.useAttributeFor(WMCBoundingBox.class, \"maxx\");\n    \txstream.useAttributeFor(WMCBoundingBox.class, \"maxy\");\n    \txstream.useAttributeFor(WMCBoundingBox.class, \"minx\");\n    \txstream.useAttributeFor(WMCBoundingBox.class, \"miny\");\n    \txstream.aliasField(\"SRS\", WMCBoundingBox.class, \"srs\");\n    \t// WMC ViewContext::LayerList::Layer\n    \txstream.alias(\"Layer\", WMCLayer.class);\n    \txstream.useAttributeFor(WMCLayer.class, \"queryable\");\n    \txstream.useAttributeFor(WMCLayer.class, \"hidden\");\n    \txstream.aliasField(\"SRS\", WMCLayer.class, \"srs\");\n    \txstream.aliasField(\"Name\", WMCLayer.class, \"name\");\n    \txstream.aliasField(\"Title\", WMCLayer.class, \"title\");\n    \txstream.aliasField(\"Server\", WMCLayer.class, \"server\");\n    \txstream.aliasField(\"FormatList\", WMCLayer.class, \"formatList\");\n    \txstream.aliasField(\"StyleList\", WMCLayer.class, \"styleList\");\n    \txstream.aliasField(\"Extension\", WMCLayer.class, \"extension\");\n    \t// WMC ViewContext::LayerList::Layer::Server\n    \txstream.useAttributeFor(WMCServer.class, \"service\");\n    \txstream.useAttributeFor(WMCServer.class, \"version\");\n    \txstream.useAttributeFor(WMCServer.class, \"title\");\n    \txstream.aliasField(\"OnlineResource\", WMCServer.class, \"onlineResource\");\n    \t// WMC ViewContext::LayerList::Layer::Server::OnlineResource\n    \txstream.useAttributeFor(WMCOnlineResource.class, \"xlink_type\");\n    \txstream.useAttributeFor(WMCOnlineResource.class, \"xlink_href\");\n    \txstream.aliasField(\"xlink:type\", WMCOnlineResource.class, \"xlink_type\");\n    \txstream.aliasField(\"xlink:href\", WMCOnlineResource.class, \"xlink_href\");\n    \t// WMC ViewContext::LayerList::Layer::FormatList::Format\n    \txstream.alias(\"Format\", WMCFormat.class);\n    \txstream.registerConverter(new Converter() {\n\t\t\tpublic boolean canConvert(Class clazz) {\n\t\t\t\treturn WMCFormat.class.isAssignableFrom(clazz);\n\t\t\t}\n\t\t\tpublic void marshal(Object value, HierarchicalStreamWriter writer, MarshallingContext context) {\n\t\t\t\tWMCFormat format = (WMCFormat) value;\n\t\t\t\t\n\t\t\t\twriter.addAttribute(\"current\", format.getCurrent());\n\t\t\t\tif (format.getContent() != null)\n\t\t\t\t\twriter.setValue(format.getContent());\n\t\t\t}\n\t\t\tpublic Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {\n\t\t\t\tWMCFormat format = new WMCFormat(\"1\", reader.getValue());\n\t\t\t\t\n\t\t\t\treturn format;\n\t\t\t}\n    \t\t\n    \t});\n    \t// WMC ViewContext::LayerList::Layer::FormatList::Style\n    \txstream.alias(\"Style\", WMCStyle.class);\n    \txstream.useAttributeFor(WMCStyle.class, \"current\");\n    \txstream.aliasField(\"SLD\", WMCStyle.class, \"sld\");\n    \txstream.aliasField(\"OnlineResource\", WMCSLD.class, \"onlineResource\");\n    \t// WMC ViewContext::LayerList::Layer::Extension\n    \txstream.alias(\"Extension\", WMCExtension.class);\n    \t\n    \t// WMC ViewContext::LayerList::Layer::Extension::OL\n    \txstream.aliasField(\"ol:id\", WMCExtension.class, \"id\");\n    \txstream.aliasField(\"ol:transparent\", WMCExtension.class, \"transparent\");\n    \txstream.aliasField(\"ol:isBaseLayer\", WMCExtension.class, \"isBaseLayer\");\n    \txstream.aliasField(\"ol:opacity\", WMCExtension.class, \"opacity\");\n    \txstream.aliasField(\"ol:displayInLayerSwitcher\", WMCExtension.class, \"displayInLayerSwitcher\");\n    \txstream.aliasField(\"ol:singleTile\", WMCExtension.class, \"singleTile\");\n    \txstream.aliasField(\"ol:numZoomLevels\", WMCExtension.class, \"numZoomLevels\");\n    \txstream.aliasField(\"ol:units\", WMCExtension.class, \"units\");\n    \txstream.aliasField(\"ol:maxExtent\", WMCExtension.class, \"maxExtent\");\n    \txstream.aliasField(\"ol:dimension\", WMCExtension.class, \"time\");\n    \txstream.aliasField(\"ol:dimension\", WMCExtension.class, \"elevation\");\n    \t\n    \txstream.aliasField(\"ol:mainLayer\", WMCExtension.class, \"mainLayer\");\n    \txstream.aliasField(\"ol:styleClassNumber\", WMCExtension.class, \"styleClassNumber\");\n    \txstream.aliasField(\"ol:styleColorRamps\", WMCExtension.class, \"styleColorRamps\");\n    \txstream.aliasField(\"ol:styleMaxValue\", WMCExtension.class, \"styleMaxValue\");\n    \txstream.aliasField(\"ol:styleMinValue\", WMCExtension.class, \"styleMinValue\");\n    \txstream.aliasField(\"ol:styleRestService\", WMCExtension.class, \"styleRestService\");\n    \txstream.aliasField(\"ol:styleLegendService\", WMCExtension.class, \"styleLegendService\");\n    \t\n    \txstream.useAttributeFor(OLStyleColorRamps.class, \"defaultRamp\");\n    \txstream.aliasField(\"default\", OLStyleColorRamps.class, \"defaultRamp\");\n    \t\n    \txstream.registerConverter(new Converter() {\n\t\t\tpublic boolean canConvert(Class clazz) {\n\t\t\t\treturn OLBaseClass.class.isAssignableFrom(clazz);\n\t\t\t}\n\t\t\tpublic void marshal(Object value, HierarchicalStreamWriter writer, MarshallingContext context) {\n\t\t\t\tOLBaseClass ol = (OLBaseClass) value;\n\t\t\t\t\n\t\t\t\twriter.addAttribute(\"xmlns:ol\", ol.getXmlns_ol());\n\t\t\t\t\n\t\t\t\tif (value instanceof OLExtent) {\n\t\t\t\t\tOLExtent extent = (OLExtent) value;\n\t\t\t\t\twriter.addAttribute(\"minx\", extent.getMinx());\n\t\t\t\t\twriter.addAttribute(\"miny\", extent.getMiny());\n\t\t\t\t\twriter.addAttribute(\"maxx\", extent.getMaxx());\n\t\t\t\t\twriter.addAttribute(\"maxy\", extent.getMaxy());\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (value instanceof OLDimension) {\n\t\t\t\t\tOLDimension dimension = (OLDimension) value;\n\t\t\t\t\twriter.addAttribute(\"name\", dimension.getName());\n\t\t\t\t\twriter.addAttribute(\"default\", dimension.getDefaultValue());\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (value instanceof OLStyleValue) {\nNext line of code:\n", "input": "", "context": "/*\n * $Header: it.geosolutions.geobatch.wmc.WMCStream,v. 0.1 03/dic/2009 01:55:21 created by Fabiani $\n * $Revision: 0.1 $\n * $Date: 03/dic/2009 01:55:21 $\n *\n * ====================================================================\n *\n * Copyright (C) 2007-2008 GeoSolutions S.A.S.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. \n *\n * ====================================================================\n *\n * This software consists of voluntary contributions made by developers\n * of GeoSolutions.  For more information on GeoSolutions, please see\n * <http://www.geo-solutions.it/>.\n *\n */\npackage it.geosolutions.geobatch.wmc;\nimport it.geosolutions.geobatch.wmc.model.GeneralWMCConfiguration;\nimport it.geosolutions.geobatch.wmc.model.OLBaseClass;\nimport it.geosolutions.geobatch.wmc.model.OLDimension;\nimport it.geosolutions.geobatch.wmc.model.OLExtent;\nimport it.geosolutions.geobatch.wmc.model.OLStyleColorRamps;\nimport it.geosolutions.geobatch.wmc.model.OLStyleValue;\nimport it.geosolutions.geobatch.wmc.model.ViewContext;\nimport it.geosolutions.geobatch.wmc.model.WMCBoundingBox;\nimport it.geosolutions.geobatch.wmc.model.WMCExtension;\nimport it.geosolutions.geobatch.wmc.model.WMCFormat;\nimport it.geosolutions.geobatch.wmc.model.WMCLayer;\nimport it.geosolutions.geobatch.wmc.model.WMCOnlineResource;\nimport it.geosolutions.geobatch.wmc.model.WMCSLD;\nimport it.geosolutions.geobatch.wmc.model.WMCServer;\nimport it.geosolutions.geobatch.wmc.model.WMCStyle;\nimport it.geosolutions.geobatch.wmc.model.WMCWindow;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.Reader;\nimport java.io.Writer;\nimport com.thoughtworks.xstream.XStream;\nimport com.thoughtworks.xstream.converters.Converter;\nimport com.thoughtworks.xstream.converters.MarshallingContext;\nimport com.thoughtworks.xstream.converters.UnmarshallingContext;\nimport com.thoughtworks.xstream.io.HierarchicalStreamReader;\nimport com.thoughtworks.xstream.io.HierarchicalStreamWriter;\nimport com.thoughtworks.xstream.io.xml.DomDriver;\n/**\n * @author Fabiani\n *\n */\npublic class WMCStream {\n\tprivate XStream xstream = new XStream(new DomDriver(\"UTF-8\"));\n\t\n\t/**\n\t * \n\t */\n\tpublic WMCStream() {\n    \t// WMC ViewContext\n    \txstream.alias(\"ViewContext\", ViewContext.class);\n    \txstream.useAttributeFor(ViewContext.class, \"xmlns\");\n    \txstream.useAttributeFor(ViewContext.class, \"xlink\");\n    \txstream.useAttributeFor(ViewContext.class, \"id\");\n    \txstream.useAttributeFor(ViewContext.class, \"version\");\n    \txstream.aliasField(\"xmlns:xlink\", ViewContext.class, \"xlink\");\n    \txstream.aliasField(\"General\", ViewContext.class, \"general\");\n    \txstream.aliasField(\"LayerList\", ViewContext.class, \"layerList\");\n    \t// WMC ViewContext::General\n    \txstream.aliasField(\"Window\", GeneralWMCConfiguration.class, \"window\");\n    \txstream.aliasField(\"Title\", GeneralWMCConfiguration.class, \"title\");\n    \txstream.aliasField(\"Abstract\", GeneralWMCConfiguration.class, \"_abstract\");\n    \t// WMC ViewContext::General::Window\n    \txstream.useAttributeFor(WMCWindow.class, \"height\");\n    \txstream.useAttributeFor(WMCWindow.class, \"width\");\n    \txstream.aliasField(\"BoundingBox\", WMCWindow.class, \"bbox\");\n    \t// WMC ViewContext::General::Window::BoundingBox\n    \txstream.useAttributeFor(WMCBoundingBox.class, \"srs\");\n    \txstream.useAttributeFor(WMCBoundingBox.class, \"maxx\");\n    \txstream.useAttributeFor(WMCBoundingBox.class, \"maxy\");\n    \txstream.useAttributeFor(WMCBoundingBox.class, \"minx\");\n    \txstream.useAttributeFor(WMCBoundingBox.class, \"miny\");\n    \txstream.aliasField(\"SRS\", WMCBoundingBox.class, \"srs\");\n    \t// WMC ViewContext::LayerList::Layer\n    \txstream.alias(\"Layer\", WMCLayer.class);\n    \txstream.useAttributeFor(WMCLayer.class, \"queryable\");\n    \txstream.useAttributeFor(WMCLayer.class, \"hidden\");\n    \txstream.aliasField(\"SRS\", WMCLayer.class, \"srs\");\n    \txstream.aliasField(\"Name\", WMCLayer.class, \"name\");\n    \txstream.aliasField(\"Title\", WMCLayer.class, \"title\");\n    \txstream.aliasField(\"Server\", WMCLayer.class, \"server\");\n    \txstream.aliasField(\"FormatList\", WMCLayer.class, \"formatList\");\n    \txstream.aliasField(\"StyleList\", WMCLayer.class, \"styleList\");\n    \txstream.aliasField(\"Extension\", WMCLayer.class, \"extension\");\n    \t// WMC ViewContext::LayerList::Layer::Server\n    \txstream.useAttributeFor(WMCServer.class, \"service\");\n    \txstream.useAttributeFor(WMCServer.class, \"version\");\n    \txstream.useAttributeFor(WMCServer.class, \"title\");\n    \txstream.aliasField(\"OnlineResource\", WMCServer.class, \"onlineResource\");\n    \t// WMC ViewContext::LayerList::Layer::Server::OnlineResource\n    \txstream.useAttributeFor(WMCOnlineResource.class, \"xlink_type\");\n    \txstream.useAttributeFor(WMCOnlineResource.class, \"xlink_href\");\n    \txstream.aliasField(\"xlink:type\", WMCOnlineResource.class, \"xlink_type\");\n    \txstream.aliasField(\"xlink:href\", WMCOnlineResource.class, \"xlink_href\");\n    \t// WMC ViewContext::LayerList::Layer::FormatList::Format\n    \txstream.alias(\"Format\", WMCFormat.class);\n    \txstream.registerConverter(new Converter() {\n\t\t\tpublic boolean canConvert(Class clazz) {\n\t\t\t\treturn WMCFormat.class.isAssignableFrom(clazz);\n\t\t\t}\n\t\t\tpublic void marshal(Object value, HierarchicalStreamWriter writer, MarshallingContext context) {\n\t\t\t\tWMCFormat format = (WMCFormat) value;\n\t\t\t\t\n\t\t\t\twriter.addAttribute(\"current\", format.getCurrent());\n\t\t\t\tif (format.getContent() != null)\n\t\t\t\t\twriter.setValue(format.getContent());\n\t\t\t}\n\t\t\tpublic Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {\n\t\t\t\tWMCFormat format = new WMCFormat(\"1\", reader.getValue());\n\t\t\t\t\n\t\t\t\treturn format;\n\t\t\t}\n    \t\t\n    \t});\n    \t// WMC ViewContext::LayerList::Layer::FormatList::Style\n    \txstream.alias(\"Style\", WMCStyle.class);\n    \txstream.useAttributeFor(WMCStyle.class, \"current\");\n    \txstream.aliasField(\"SLD\", WMCStyle.class, \"sld\");\n    \txstream.aliasField(\"OnlineResource\", WMCSLD.class, \"onlineResource\");\n    \t// WMC ViewContext::LayerList::Layer::Extension\n    \txstream.alias(\"Extension\", WMCExtension.class);\n    \t\n    \t// WMC ViewContext::LayerList::Layer::Extension::OL\n    \txstream.aliasField(\"ol:id\", WMCExtension.class, \"id\");\n    \txstream.aliasField(\"ol:transparent\", WMCExtension.class, \"transparent\");\n    \txstream.aliasField(\"ol:isBaseLayer\", WMCExtension.class, \"isBaseLayer\");\n    \txstream.aliasField(\"ol:opacity\", WMCExtension.class, \"opacity\");\n    \txstream.aliasField(\"ol:displayInLayerSwitcher\", WMCExtension.class, \"displayInLayerSwitcher\");\n    \txstream.aliasField(\"ol:singleTile\", WMCExtension.class, \"singleTile\");\n    \txstream.aliasField(\"ol:numZoomLevels\", WMCExtension.class, \"numZoomLevels\");\n    \txstream.aliasField(\"ol:units\", WMCExtension.class, \"units\");\n    \txstream.aliasField(\"ol:maxExtent\", WMCExtension.class, \"maxExtent\");\n    \txstream.aliasField(\"ol:dimension\", WMCExtension.class, \"time\");\n    \txstream.aliasField(\"ol:dimension\", WMCExtension.class, \"elevation\");\n    \t\n    \txstream.aliasField(\"ol:mainLayer\", WMCExtension.class, \"mainLayer\");\n    \txstream.aliasField(\"ol:styleClassNumber\", WMCExtension.class, \"styleClassNumber\");\n    \txstream.aliasField(\"ol:styleColorRamps\", WMCExtension.class, \"styleColorRamps\");\n    \txstream.aliasField(\"ol:styleMaxValue\", WMCExtension.class, \"styleMaxValue\");\n    \txstream.aliasField(\"ol:styleMinValue\", WMCExtension.class, \"styleMinValue\");\n    \txstream.aliasField(\"ol:styleRestService\", WMCExtension.class, \"styleRestService\");\n    \txstream.aliasField(\"ol:styleLegendService\", WMCExtension.class, \"styleLegendService\");\n    \t\n    \txstream.useAttributeFor(OLStyleColorRamps.class, \"defaultRamp\");\n    \txstream.aliasField(\"default\", OLStyleColorRamps.class, \"defaultRamp\");\n    \t\n    \txstream.registerConverter(new Converter() {\n\t\t\tpublic boolean canConvert(Class clazz) {\n\t\t\t\treturn OLBaseClass.class.isAssignableFrom(clazz);\n\t\t\t}\n\t\t\tpublic void marshal(Object value, HierarchicalStreamWriter writer, MarshallingContext context) {\n\t\t\t\tOLBaseClass ol = (OLBaseClass) value;\n\t\t\t\t\n\t\t\t\twriter.addAttribute(\"xmlns:ol\", ol.getXmlns_ol());\n\t\t\t\t\n\t\t\t\tif (value instanceof OLExtent) {\n\t\t\t\t\tOLExtent extent = (OLExtent) value;\n\t\t\t\t\twriter.addAttribute(\"minx\", extent.getMinx());\n\t\t\t\t\twriter.addAttribute(\"miny\", extent.getMiny());\n\t\t\t\t\twriter.addAttribute(\"maxx\", extent.getMaxx());\n\t\t\t\t\twriter.addAttribute(\"maxy\", extent.getMaxy());\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (value instanceof OLDimension) {\n\t\t\t\t\tOLDimension dimension = (OLDimension) value;\n\t\t\t\t\twriter.addAttribute(\"name\", dimension.getName());\n\t\t\t\t\twriter.addAttribute(\"default\", dimension.getDefaultValue());\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (value instanceof OLStyleValue) {\n", "answers": ["\t\t\t\t\tOLStyleValue styleValue = (OLStyleValue) value;"], "pred": "}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n", "length": 570, "dataset": "lcc", "language": "java", "all_classes": null, "_id": "a5da7e173afd5ba71e0185228a1df77238c2949ba3ea2935"}
{"prompt": "Please complete the code given below. \n#!/usr/bin/env python\nimport sys\n#begin dependent modules\n#sys.path.insert(0, \"../\")\nimport yobot_interfaces\nimport yobotproto\nfrom client_support import YCAccount, SimpleNotice\nfrom gui import gui_util\nfrom gui.gui_util import signal_connect, ConnectionWidget\n#end\nimport triviadb\nimport PyQt4\nfrom PyQt4.QtGui import (QComboBox, QMainWindow, QStandardItemModel, QStandardItem,\n                         QIcon, QPixmap, QImage, QPainter, QDialog, QMessageBox,\n                         QApplication, QFont, QTextEdit, QColorDialog, QPalette,\n                         QListWidget, QListWidgetItem, QStyledItemDelegate,\n                         QStyleOptionViewItem, QRegion, QWidget, QBrush, QStyle,\n                         QPushButton, QStyleOption, QMenu, QAction, QCursor,\n                        QLineEdit, QFileDialog, QErrorMessage,\n                         QFontDialog, QColor, QDockWidget, QSizePolicy,\n                         QStackedWidget,\n                         QGridLayout, QLayout, QFrame,\n                         )\nfrom PyQt4.QtCore import (QPoint, QSize, QModelIndex, Qt, QObject, SIGNAL, QVariant,\n                          QAbstractItemModel, QRect, QRectF, QPointF, QT_VERSION)\nfrom debuglog import log_debug, log_info, log_err, log_crit, log_warn\nimport sqlite3.dbapi2 as sqlite3\nimport pickle\nimport lxml.html\nimport re\nfrom time import time\nfrom collections import defaultdict\nimport random\nfrom gui.html_fmt import point_to_html\nimport os.path\nimport yobotops\nfrom cgi import escape as html_escape\nimport datetime\nimport gui_new\n#trivia types\nTYPE_ANAGRAMS, TYPE_TRIVIA, TYPE_BOTH = range(1, 4)\nTRIVIA_ROOT = \"/home/mordy/src/purple/py/triviabot\"\narticle_start_re = re.compile(\"^(the|a) \")\ndef get_categories_list(dbname):\n    dbconn = sqlite3.connect(dbname)\n    ret = []\n    for r in dbconn.cursor().execute(\"select distinct category from questions\"):\n        ret.append(r[0])\n    return ret\ndef scramble_word(word):\n    return \"\".join(random.sample(word, len(word)))\nclass _BlackHole(str):\n    def __init__(self, *args, **kwargs):\n        pass\n    def __getattr__(self, name):\n        return _BlackHole()\n    def __setattr__(self, name, value):\n        pass\n    def __call__(self, *args, **kwargs):\n        pass\n    def __bool__(self):\n        return False\n    def __str__(self):\n        return \"\"\nclass TriviaGui(gui_new.TGui):\n    def __init__(self, parent=None):\n        gui_new.TGui.__init__(self, parent)\n        self.widgets = self\n        w = self.widgets\n        self.model = yobot_interfaces.component_registry.get_component(\"account-model\")\n        self.client_ops = yobot_interfaces.component_registry.get_component(\"client-operations\")\n        assert self.client_ops\n        \n        def _handle_connect(username, password, improto, **proxy_params):\n            self.client_ops.connect(username, password, improto, **proxy_params)\n        \n        def offset_pos_fn():\n            return QPoint(0, self.menubar.height())\n        self.connwidget = gui_util.OverlayConnectionWidget(offset_pos_fn, _handle_connect, self)\n        signal_connect(w.actionConnect, SIGNAL(\"toggled(bool)\"), self.connwidget.setVisible)\n        signal_connect(self.connwidget.widgets.conn_close, SIGNAL(\"clicked()\"),\n                       lambda: w.actionConnect.setChecked(False))\n        if not self.model:\n            w.actionConnect.setChecked(True)\n            self.model = gui_util.AccountModel(None)\n            self.menubar.show()\n        else:\n            self.connwidget.hide()\n        #notification widgets:\n        qdw = QFrame(self)\n        if QT_VERSION >= 0x040600:\n            from PyQt4.QtGui import QGraphicsDropShadowEffect\n            self.notification_shadow = QGraphicsDropShadowEffect(qdw)\n            self.notification_shadow.setBlurRadius(10.0)\n            qdw.setGraphicsEffect(self.notification_shadow)\n        qdw.setFrameShadow(qdw.Raised)\n        qdw.setFrameShape(qdw.StyledPanel)\n        qdw.setAutoFillBackground(True)\n        qsw = QStackedWidget(qdw)\n        qdw.setLayout(QGridLayout())\n        qdw.layout().setSizeConstraint(QLayout.SetMinimumSize)\n        qdw.layout().addWidget(qsw)\n        self._notification_dlg = qdw\n        self.qdw = qdw\n        self.qsw = qsw\n        self.notifications = gui_util.NotificationBox(qdw, qsw, noTitleBar=False)\n        #self.qdw.show()\n        \n        #resize/show events\n        def _force_bottom(event, superclass_fn):\n            log_err(\"\")\n            superclass_fn(self.qdw, event)\n            self.qdw.move(0, self.height()-self.qdw.height())\n        self.qdw.resizeEvent = lambda e: _force_bottom(e, QWidget.resizeEvent)\n        self.qdw.showEvent = lambda e: _force_bottom(e, QWidget.showEvent)\n        \n        #set up account menu\n        w.account.setModel(self.model)\n        \n        for a in (\"start\", \"stop\", \"pause\", \"next\"):\n            gui_util.signal_connect(getattr(w, a), SIGNAL(\"clicked()\"),\n                                    lambda cls=self, a=a: getattr(cls, a + \"_requested\")())\n            getattr(w, a).setEnabled(False)\n        w.start.setEnabled(True)\n                \n        self.anagrams_prefix_blacklist = set()\n        self.anagrams_suffix_blacklist = set()\n        \n        #listWidgetItems\n        def _add_nfix(typestr):\n            txt = getattr(w, typestr + \"_input\").text()\n            if not txt:\n                return\n            txt = str(txt)\n            st = getattr(self, \"anagrams_\" + typestr + \"_blacklist\")\n            target = getattr(w, typestr + \"_list\")\n            if not txt in st:\n                target.addItem(txt)\n                st.add(txt)\n            getattr(w, typestr + \"_input\").clear()\n        def _remove_nfix(typestr):\n            target = getattr(w, typestr + \"_list\")\n            st = getattr(self, \"anagrams_\" + typestr + \"_blacklist\")\n            item = target.currentItem()\n            if item:\n                txt = str(item.text())\n                assert txt in st\n                target.takeItem(target.row(item))\n                st.remove(txt)\n            else:\n                log_warn(\"item is None\")\n        for nfix in (\"suffix\", \"prefix\"):\n            signal_connect(getattr(w, nfix + \"_add\"), SIGNAL(\"clicked()\"),\n                lambda typestr=nfix: _add_nfix(typestr))\n            signal_connect(getattr(w, nfix + \"_del\"), SIGNAL(\"clicked()\"),\n                lambda typestr=nfix: _remove_nfix(typestr))\n            \n        #hide the extended options\n        w.questions_categories_params.hide()\n        w.suffix_prefix_options.hide()\n        \n        self.resize(self.minimumSizeHint())\n    \n        #connect signals for enabling the start button\n        signal_connect(w.account, SIGNAL(\"currentIndexChanged(int)\"), self._enable_start)\n        signal_connect(w.room, SIGNAL(\"activated(int)\"), self._enable_start)\n        signal_connect(w.room, SIGNAL(\"editTextchanged(QString)\"), self._enable_start)\n        signal_connect(w.questions_database, SIGNAL(\"textChanged(QString)\"), self.questions_dbfile_changed)\n        signal_connect(w.questions_database, SIGNAL(\"textChanged(QString)\"), self._validate_questions_db)\n        signal_connect(w.anagrams_database, SIGNAL(\"textChanged(QString)\"), self._validate_anagrams_db)\n        \n        signal_connect(w.questions_database, SIGNAL(\"textChanged(QString)\"), self._enable_start)\n        signal_connect(w.anagrams_database, SIGNAL(\"textChanged(QString)\"), self._enable_start)\n        \n        #category list for questions:\n        self.selected_questions_categories = set()\n        def _unselect(lwitem):\n            row = w.selected_categories.row(lwitem)\n            self.selected_questions_categories.remove(str(lwitem.text()))\n            self.widgets.selected_categories.takeItem(row)\n        def _select(lwitem):\n            category = str(lwitem.text())\n            if not category in self.selected_questions_categories:\n                log_debug(\"Adding\", category)\n                self.selected_questions_categories.add(category)\n                w.selected_categories.addItem(category)\n        signal_connect(w.questions_categories, SIGNAL(\"itemDoubleClicked(QListWidgetItem*)\"), _select)\n        signal_connect(w.selected_categories, SIGNAL(\"itemDoubleClicked(QListWidgetItem*)\"), _unselect)\n        \n        \n        self.anagrams_db_is_valid = False\n        self.questions_db_is_valid = False\n        \n        #profile stuff..\n        signal_connect(w.actionLoad, SIGNAL(\"activated()\"), lambda: self.profile_handler(load=True))\n        signal_connect(w.actionSave, SIGNAL(\"activated()\"), lambda: self.profile_handler(save=True))\n        signal_connect(w.actionSave_As, SIGNAL(\"activated()\"), lambda: self.profile_handler(save_as=True))\n        self.current_profile_name = \"\"\n                \n        w.suffix_prefix_options.sizeHint = lambda: QSize(1,1)\n        w.questions_categories_params.sizeHint = lambda: QSize(1,1)\n                \n        self.show()\n            \n    def _validate_anagrams_db(self, db):\n        dbconn = None\n        db = str(db)\n        try:\n            assert os.path.exists(db)\n            dbconn = sqlite3.connect(db)\n            cursor = dbconn.cursor()\n            cursor.execute(\"select word from words limit 1\").fetchone()[0]\n            self.anagrams_db_is_valid = True\n        except Exception, e:\n            log_err(e)\n            self.anagrams_db_is_valid = False\n            QErrorMessage(self).showMessage(\"Anagrams database is invalid: \" + str(e))\n        finally:\n            if dbconn:\n                dbconn.close()\n    def _validate_questions_db(self, db):\n        dbconn = None\n        db = str(db)\n        try:\n            assert os.path.exists(db)\n            dbconn = sqlite3.connect(db)\n            cursor = dbconn.cursor()\n            cursor.execute(\"select id, frequency, question, answer, alt_answers from questions limit 1\").fetchone()[0]\n            self.questions_db_is_valid = True\n        except Exception, e:\n            log_err(e)\n            self.questions_db_is_valid = False\n            QErrorMessage(self).showMessage(\"Questions database is invalid: \" + str(e))\n        finally:\n            if dbconn:\n                dbconn.close()    \n    \n    def _dbs_are_valid(self):\n        type = str(self.widgets.questions_type.currentText()).lower()\n        if type == \"mix\" and not ( self.anagrams_db_is_valid and self.questions_db_is_valid):\n            return False\n        elif type == \"anagrams\" and not self.anagrams_db_is_valid:\n            return False\n        elif type == \"trivia\" and not self.questions_db_is_valid:\n            return False        \n        return True\n        \n    def _enable_start(self, *args):\n        w = self.widgets\n        if w.account.currentText() and w.room.currentText() and self._dbs_are_valid():\n            w.start.setEnabled(True)\n        else:\n            w.start.setEnabled(False)        \n            \n    #some hooks\n    def questions_dbfile_changed(self, dbname):\n        self.widgets.questions_categories.clear()\n        try:\n            l = get_categories_list(str(dbname))\n        except Exception, e:\n            log_err(e)\n            return\n        for s in l:\n            if s:\n                self.widgets.questions_categories.addItem(str(s))\n    @staticmethod\n    def create_profile_mappings():\n        #make a tuple.\n        #format: (cast_fn, get_fn, set_fn)\n        d = {}\n        \n        #integers\n        for a in (\"post_interval\", \"answer_timeout\", \"percent_anagrams\", \"percent_trivia\",\n                  \"amount\", \"anagrams_letters_min\", \"anagrams_letters_max\"):\n            d[a] = (\"int\", \"value\", \"setValue\")\n        \n        #strings\n        for a in (\"anagrams_database\", \"questions_database\"):\n            d[a] = (\"str\", \"text\", \"setText\")\n        \n        #booleans\n        for a in (\"updatedb_bool\", \"anagrams_caps_hint\", \"questions_blacklist\",\n                  \"questions_use_categories\", \"anagrams_use_nfixes\"):\n            d[a] = (\"bool\", \"isChecked\", \"setChecked\")\n        \n        #room combobox\n        d[\"room\"] = (\"str\", \"currentText\", \"addItem\")\n        \n        return d\n        #for accounts, we need to do some special handling because they are\n        #referenced by index\n    \n    def save_profile(self, profile_name):\n        try:\n            f = open(profile_name, \"w\")\n            f.write(\"#Yobot Trivia Profile Settings automatically generated on %s\\n\" %\n                    str(datetime.datetime.now()))\n            f.write(\"#Configuration is case-sensitive. Use 'True' and 'False' for boolean values\\n\")\n            f.write(\"#this file is parsed directly using python's eval\\n\")\n            \n            d = TriviaGui.create_profile_mappings()\n            for k, v in d.items():\n                #k is the attribute\n                field = getattr(self.widgets, k)\n                cast, getter, setter = v\n                value = getattr(field, getter)() if getter else field\n                \n                if cast == \"str\":\n                    value = str(value)\n                #if not value and cast == \"bool\":\n                #    value = int(value)\n                if not value and cast == \"str\":\n                    value = \"\"\n                    \n                f.write(k + \"=\" + repr(value) + \"\\n\")\n            \n            #for account..\n            acct_index = self.widgets.account.currentIndex()\n            acct_index = self.model.index(acct_index)\n            account = acct_index.internalPointer()\n            if account:\n                f.write(\"account_username=\" + account.user + \"\\n\")\n                f.write(\"account_improto=\" + yobotops.imprototostr(account.improto) + \"\\n\")\n            \n            #for complex types\n            for c in (\"anagrams_suffix_blacklist\", \"anagrams_prefix_blacklist\",\n                      \"selected_questions_categories\"):\n                log_info(getattr(self, c))\n                f.write(c + \"=\" + repr(getattr(self, c)) + \"\\n\")\n            \n            #for font and color:\n            if self.font:\n                f.write(\"font=\" + self.font.toString() + \"\\n\")\n            if self.color:\n                f.write(\"color=\" + self.color.name() + \"\\n\")\n            #for type, just write the current type\n            f.write(\"questions_type=\" + self.widgets.questions_type.currentText() + \"\\n\")\n            #for the blacklists/whitelists..\n            \n            f.close()\n            return True\n        except Exception, e:\n            QErrorMessage(self).showMessage(str(e))\n            return False\n    def load_profile(self, profile_name):\n        d = TriviaGui.create_profile_mappings()\n        try:\n            f = open(profile_name, \"r\")\n            for l in f.readlines():\n                if l.strip()[0] in (\"#\", \";\"):\n                    continue\n                k, v = [s.strip() for s in l.split(\"=\")]\n                dkey = d.get(k, None)\n                if not dkey:\n                    #complex handling\n                    if k in (\"anagrams_prefix_blacklist\", \"anagrams_suffix_blacklist\"):\n                        tmp = k.split(\"_\")[1]\n                        getattr(self, k).clear()\n                        getattr(self, k).update([str(s) for s in eval(v)])\n                        getattr(self.widgets, tmp + \"_list\").clear()\n                        getattr(self.widgets, tmp + \"_list\").addItems(list(getattr(self, k)))\n                    elif k == \"selected_questions_categories\":\n                        getattr(self, k).clear()\n                        getattr(self, k).update(eval(v))\n                        getattr(self.widgets, \"selected_categories\").clear()\n                        getattr(self.widgets, \"selected_categories\").addItems(list(getattr(self, k)))\n                    elif k == \"font\":\n                        self.font = QFont()\n                        self.font.fromString(v)\n                        self._gen_font_stylesheet()\n                        self._update_fmtstr()\n                    elif k == \"color\":\n                        self.color = QColor(v)\n                        self._gen_font_stylesheet()\n                        self._update_fmtstr()\n                    else:\n                        log_warn(\"unknown key\", k)\n                    continue\n                cast, getter, setter = dkey\n                field = getattr(self.widgets, k)\n                #getattr(field, setter)(eval(cast)(v))\n                getattr(field, setter)(eval(v))\n            f.close()\n            return True\n        except Exception, e:\n            QErrorMessage(self).showMessage(str(e))\n            return False\n        \n    def profile_handler(self, load=False, save=False, save_as=False):\n        if load:\n            profile = QFileDialog.getOpenFileName(self, \"Select Profile\", TRIVIA_ROOT)\n            if profile and self.load_profile(profile):\n                self.current_profile_name = profile\n        elif save:\n            if self.current_profile_name:\n                self.save_profile(self.current_profile_name)\n        elif save_as:\n            profile = QFileDialog.getSaveFileName(self, \"Save Profile\", TRIVIA_ROOT)\n            if profile:\n                self.save_profile(profile)\n                \n    def start_requested(self):\n        log_err(\"implement me\")\n    def stop_requested(self):\n        log_err(\"implement me\")\n    def pause_requested(self):\n        log_err(\"implement me\")\n    def next_requested(self):\n        log_err(\"implement me\")\n        \n    def got_notification(self, notification_object):\n        self.notifications.addItem(notification_object)\n        self._notification_dlg.show()\n    def del_notification(self, notification_object):\n        self.notifications.delItem(notification_object)\nclass _QAData(object):\n    def __init__(self):\n        self.question = None\n        self.answers = []\n        self.id = -1\n        self.category = None\n        self.type = None\n    def ask_string(self):\n        pass\n    def hint_string(self):\n        pass\n    def is_correct(self, answer):\n        for a in self.answers:\n            if a.lower() in answer.lower():\n                return True\n        return False\nclass _QuestionData(_QAData):\n    def ask_string(self):\n        return \"Category %s: %s\" % (self.category, self.question)\n    def hint_string(self):\n        ret = \"\"\nNext line of code:\n", "input": "", "context": "#!/usr/bin/env python\nimport sys\n#begin dependent modules\n#sys.path.insert(0, \"../\")\nimport yobot_interfaces\nimport yobotproto\nfrom client_support import YCAccount, SimpleNotice\nfrom gui import gui_util\nfrom gui.gui_util import signal_connect, ConnectionWidget\n#end\nimport triviadb\nimport PyQt4\nfrom PyQt4.QtGui import (QComboBox, QMainWindow, QStandardItemModel, QStandardItem,\n                         QIcon, QPixmap, QImage, QPainter, QDialog, QMessageBox,\n                         QApplication, QFont, QTextEdit, QColorDialog, QPalette,\n                         QListWidget, QListWidgetItem, QStyledItemDelegate,\n                         QStyleOptionViewItem, QRegion, QWidget, QBrush, QStyle,\n                         QPushButton, QStyleOption, QMenu, QAction, QCursor,\n                        QLineEdit, QFileDialog, QErrorMessage,\n                         QFontDialog, QColor, QDockWidget, QSizePolicy,\n                         QStackedWidget,\n                         QGridLayout, QLayout, QFrame,\n                         )\nfrom PyQt4.QtCore import (QPoint, QSize, QModelIndex, Qt, QObject, SIGNAL, QVariant,\n                          QAbstractItemModel, QRect, QRectF, QPointF, QT_VERSION)\nfrom debuglog import log_debug, log_info, log_err, log_crit, log_warn\nimport sqlite3.dbapi2 as sqlite3\nimport pickle\nimport lxml.html\nimport re\nfrom time import time\nfrom collections import defaultdict\nimport random\nfrom gui.html_fmt import point_to_html\nimport os.path\nimport yobotops\nfrom cgi import escape as html_escape\nimport datetime\nimport gui_new\n#trivia types\nTYPE_ANAGRAMS, TYPE_TRIVIA, TYPE_BOTH = range(1, 4)\nTRIVIA_ROOT = \"/home/mordy/src/purple/py/triviabot\"\narticle_start_re = re.compile(\"^(the|a) \")\ndef get_categories_list(dbname):\n    dbconn = sqlite3.connect(dbname)\n    ret = []\n    for r in dbconn.cursor().execute(\"select distinct category from questions\"):\n        ret.append(r[0])\n    return ret\ndef scramble_word(word):\n    return \"\".join(random.sample(word, len(word)))\nclass _BlackHole(str):\n    def __init__(self, *args, **kwargs):\n        pass\n    def __getattr__(self, name):\n        return _BlackHole()\n    def __setattr__(self, name, value):\n        pass\n    def __call__(self, *args, **kwargs):\n        pass\n    def __bool__(self):\n        return False\n    def __str__(self):\n        return \"\"\nclass TriviaGui(gui_new.TGui):\n    def __init__(self, parent=None):\n        gui_new.TGui.__init__(self, parent)\n        self.widgets = self\n        w = self.widgets\n        self.model = yobot_interfaces.component_registry.get_component(\"account-model\")\n        self.client_ops = yobot_interfaces.component_registry.get_component(\"client-operations\")\n        assert self.client_ops\n        \n        def _handle_connect(username, password, improto, **proxy_params):\n            self.client_ops.connect(username, password, improto, **proxy_params)\n        \n        def offset_pos_fn():\n            return QPoint(0, self.menubar.height())\n        self.connwidget = gui_util.OverlayConnectionWidget(offset_pos_fn, _handle_connect, self)\n        signal_connect(w.actionConnect, SIGNAL(\"toggled(bool)\"), self.connwidget.setVisible)\n        signal_connect(self.connwidget.widgets.conn_close, SIGNAL(\"clicked()\"),\n                       lambda: w.actionConnect.setChecked(False))\n        if not self.model:\n            w.actionConnect.setChecked(True)\n            self.model = gui_util.AccountModel(None)\n            self.menubar.show()\n        else:\n            self.connwidget.hide()\n        #notification widgets:\n        qdw = QFrame(self)\n        if QT_VERSION >= 0x040600:\n            from PyQt4.QtGui import QGraphicsDropShadowEffect\n            self.notification_shadow = QGraphicsDropShadowEffect(qdw)\n            self.notification_shadow.setBlurRadius(10.0)\n            qdw.setGraphicsEffect(self.notification_shadow)\n        qdw.setFrameShadow(qdw.Raised)\n        qdw.setFrameShape(qdw.StyledPanel)\n        qdw.setAutoFillBackground(True)\n        qsw = QStackedWidget(qdw)\n        qdw.setLayout(QGridLayout())\n        qdw.layout().setSizeConstraint(QLayout.SetMinimumSize)\n        qdw.layout().addWidget(qsw)\n        self._notification_dlg = qdw\n        self.qdw = qdw\n        self.qsw = qsw\n        self.notifications = gui_util.NotificationBox(qdw, qsw, noTitleBar=False)\n        #self.qdw.show()\n        \n        #resize/show events\n        def _force_bottom(event, superclass_fn):\n            log_err(\"\")\n            superclass_fn(self.qdw, event)\n            self.qdw.move(0, self.height()-self.qdw.height())\n        self.qdw.resizeEvent = lambda e: _force_bottom(e, QWidget.resizeEvent)\n        self.qdw.showEvent = lambda e: _force_bottom(e, QWidget.showEvent)\n        \n        #set up account menu\n        w.account.setModel(self.model)\n        \n        for a in (\"start\", \"stop\", \"pause\", \"next\"):\n            gui_util.signal_connect(getattr(w, a), SIGNAL(\"clicked()\"),\n                                    lambda cls=self, a=a: getattr(cls, a + \"_requested\")())\n            getattr(w, a).setEnabled(False)\n        w.start.setEnabled(True)\n                \n        self.anagrams_prefix_blacklist = set()\n        self.anagrams_suffix_blacklist = set()\n        \n        #listWidgetItems\n        def _add_nfix(typestr):\n            txt = getattr(w, typestr + \"_input\").text()\n            if not txt:\n                return\n            txt = str(txt)\n            st = getattr(self, \"anagrams_\" + typestr + \"_blacklist\")\n            target = getattr(w, typestr + \"_list\")\n            if not txt in st:\n                target.addItem(txt)\n                st.add(txt)\n            getattr(w, typestr + \"_input\").clear()\n        def _remove_nfix(typestr):\n            target = getattr(w, typestr + \"_list\")\n            st = getattr(self, \"anagrams_\" + typestr + \"_blacklist\")\n            item = target.currentItem()\n            if item:\n                txt = str(item.text())\n                assert txt in st\n                target.takeItem(target.row(item))\n                st.remove(txt)\n            else:\n                log_warn(\"item is None\")\n        for nfix in (\"suffix\", \"prefix\"):\n            signal_connect(getattr(w, nfix + \"_add\"), SIGNAL(\"clicked()\"),\n                lambda typestr=nfix: _add_nfix(typestr))\n            signal_connect(getattr(w, nfix + \"_del\"), SIGNAL(\"clicked()\"),\n                lambda typestr=nfix: _remove_nfix(typestr))\n            \n        #hide the extended options\n        w.questions_categories_params.hide()\n        w.suffix_prefix_options.hide()\n        \n        self.resize(self.minimumSizeHint())\n    \n        #connect signals for enabling the start button\n        signal_connect(w.account, SIGNAL(\"currentIndexChanged(int)\"), self._enable_start)\n        signal_connect(w.room, SIGNAL(\"activated(int)\"), self._enable_start)\n        signal_connect(w.room, SIGNAL(\"editTextchanged(QString)\"), self._enable_start)\n        signal_connect(w.questions_database, SIGNAL(\"textChanged(QString)\"), self.questions_dbfile_changed)\n        signal_connect(w.questions_database, SIGNAL(\"textChanged(QString)\"), self._validate_questions_db)\n        signal_connect(w.anagrams_database, SIGNAL(\"textChanged(QString)\"), self._validate_anagrams_db)\n        \n        signal_connect(w.questions_database, SIGNAL(\"textChanged(QString)\"), self._enable_start)\n        signal_connect(w.anagrams_database, SIGNAL(\"textChanged(QString)\"), self._enable_start)\n        \n        #category list for questions:\n        self.selected_questions_categories = set()\n        def _unselect(lwitem):\n            row = w.selected_categories.row(lwitem)\n            self.selected_questions_categories.remove(str(lwitem.text()))\n            self.widgets.selected_categories.takeItem(row)\n        def _select(lwitem):\n            category = str(lwitem.text())\n            if not category in self.selected_questions_categories:\n                log_debug(\"Adding\", category)\n                self.selected_questions_categories.add(category)\n                w.selected_categories.addItem(category)\n        signal_connect(w.questions_categories, SIGNAL(\"itemDoubleClicked(QListWidgetItem*)\"), _select)\n        signal_connect(w.selected_categories, SIGNAL(\"itemDoubleClicked(QListWidgetItem*)\"), _unselect)\n        \n        \n        self.anagrams_db_is_valid = False\n        self.questions_db_is_valid = False\n        \n        #profile stuff..\n        signal_connect(w.actionLoad, SIGNAL(\"activated()\"), lambda: self.profile_handler(load=True))\n        signal_connect(w.actionSave, SIGNAL(\"activated()\"), lambda: self.profile_handler(save=True))\n        signal_connect(w.actionSave_As, SIGNAL(\"activated()\"), lambda: self.profile_handler(save_as=True))\n        self.current_profile_name = \"\"\n                \n        w.suffix_prefix_options.sizeHint = lambda: QSize(1,1)\n        w.questions_categories_params.sizeHint = lambda: QSize(1,1)\n                \n        self.show()\n            \n    def _validate_anagrams_db(self, db):\n        dbconn = None\n        db = str(db)\n        try:\n            assert os.path.exists(db)\n            dbconn = sqlite3.connect(db)\n            cursor = dbconn.cursor()\n            cursor.execute(\"select word from words limit 1\").fetchone()[0]\n            self.anagrams_db_is_valid = True\n        except Exception, e:\n            log_err(e)\n            self.anagrams_db_is_valid = False\n            QErrorMessage(self).showMessage(\"Anagrams database is invalid: \" + str(e))\n        finally:\n            if dbconn:\n                dbconn.close()\n    def _validate_questions_db(self, db):\n        dbconn = None\n        db = str(db)\n        try:\n            assert os.path.exists(db)\n            dbconn = sqlite3.connect(db)\n            cursor = dbconn.cursor()\n            cursor.execute(\"select id, frequency, question, answer, alt_answers from questions limit 1\").fetchone()[0]\n            self.questions_db_is_valid = True\n        except Exception, e:\n            log_err(e)\n            self.questions_db_is_valid = False\n            QErrorMessage(self).showMessage(\"Questions database is invalid: \" + str(e))\n        finally:\n            if dbconn:\n                dbconn.close()    \n    \n    def _dbs_are_valid(self):\n        type = str(self.widgets.questions_type.currentText()).lower()\n        if type == \"mix\" and not ( self.anagrams_db_is_valid and self.questions_db_is_valid):\n            return False\n        elif type == \"anagrams\" and not self.anagrams_db_is_valid:\n            return False\n        elif type == \"trivia\" and not self.questions_db_is_valid:\n            return False        \n        return True\n        \n    def _enable_start(self, *args):\n        w = self.widgets\n        if w.account.currentText() and w.room.currentText() and self._dbs_are_valid():\n            w.start.setEnabled(True)\n        else:\n            w.start.setEnabled(False)        \n            \n    #some hooks\n    def questions_dbfile_changed(self, dbname):\n        self.widgets.questions_categories.clear()\n        try:\n            l = get_categories_list(str(dbname))\n        except Exception, e:\n            log_err(e)\n            return\n        for s in l:\n            if s:\n                self.widgets.questions_categories.addItem(str(s))\n    @staticmethod\n    def create_profile_mappings():\n        #make a tuple.\n        #format: (cast_fn, get_fn, set_fn)\n        d = {}\n        \n        #integers\n        for a in (\"post_interval\", \"answer_timeout\", \"percent_anagrams\", \"percent_trivia\",\n                  \"amount\", \"anagrams_letters_min\", \"anagrams_letters_max\"):\n            d[a] = (\"int\", \"value\", \"setValue\")\n        \n        #strings\n        for a in (\"anagrams_database\", \"questions_database\"):\n            d[a] = (\"str\", \"text\", \"setText\")\n        \n        #booleans\n        for a in (\"updatedb_bool\", \"anagrams_caps_hint\", \"questions_blacklist\",\n                  \"questions_use_categories\", \"anagrams_use_nfixes\"):\n            d[a] = (\"bool\", \"isChecked\", \"setChecked\")\n        \n        #room combobox\n        d[\"room\"] = (\"str\", \"currentText\", \"addItem\")\n        \n        return d\n        #for accounts, we need to do some special handling because they are\n        #referenced by index\n    \n    def save_profile(self, profile_name):\n        try:\n            f = open(profile_name, \"w\")\n            f.write(\"#Yobot Trivia Profile Settings automatically generated on %s\\n\" %\n                    str(datetime.datetime.now()))\n            f.write(\"#Configuration is case-sensitive. Use 'True' and 'False' for boolean values\\n\")\n            f.write(\"#this file is parsed directly using python's eval\\n\")\n            \n            d = TriviaGui.create_profile_mappings()\n            for k, v in d.items():\n                #k is the attribute\n                field = getattr(self.widgets, k)\n                cast, getter, setter = v\n                value = getattr(field, getter)() if getter else field\n                \n                if cast == \"str\":\n                    value = str(value)\n                #if not value and cast == \"bool\":\n                #    value = int(value)\n                if not value and cast == \"str\":\n                    value = \"\"\n                    \n                f.write(k + \"=\" + repr(value) + \"\\n\")\n            \n            #for account..\n            acct_index = self.widgets.account.currentIndex()\n            acct_index = self.model.index(acct_index)\n            account = acct_index.internalPointer()\n            if account:\n                f.write(\"account_username=\" + account.user + \"\\n\")\n                f.write(\"account_improto=\" + yobotops.imprototostr(account.improto) + \"\\n\")\n            \n            #for complex types\n            for c in (\"anagrams_suffix_blacklist\", \"anagrams_prefix_blacklist\",\n                      \"selected_questions_categories\"):\n                log_info(getattr(self, c))\n                f.write(c + \"=\" + repr(getattr(self, c)) + \"\\n\")\n            \n            #for font and color:\n            if self.font:\n                f.write(\"font=\" + self.font.toString() + \"\\n\")\n            if self.color:\n                f.write(\"color=\" + self.color.name() + \"\\n\")\n            #for type, just write the current type\n            f.write(\"questions_type=\" + self.widgets.questions_type.currentText() + \"\\n\")\n            #for the blacklists/whitelists..\n            \n            f.close()\n            return True\n        except Exception, e:\n            QErrorMessage(self).showMessage(str(e))\n            return False\n    def load_profile(self, profile_name):\n        d = TriviaGui.create_profile_mappings()\n        try:\n            f = open(profile_name, \"r\")\n            for l in f.readlines():\n                if l.strip()[0] in (\"#\", \";\"):\n                    continue\n                k, v = [s.strip() for s in l.split(\"=\")]\n                dkey = d.get(k, None)\n                if not dkey:\n                    #complex handling\n                    if k in (\"anagrams_prefix_blacklist\", \"anagrams_suffix_blacklist\"):\n                        tmp = k.split(\"_\")[1]\n                        getattr(self, k).clear()\n                        getattr(self, k).update([str(s) for s in eval(v)])\n                        getattr(self.widgets, tmp + \"_list\").clear()\n                        getattr(self.widgets, tmp + \"_list\").addItems(list(getattr(self, k)))\n                    elif k == \"selected_questions_categories\":\n                        getattr(self, k).clear()\n                        getattr(self, k).update(eval(v))\n                        getattr(self.widgets, \"selected_categories\").clear()\n                        getattr(self.widgets, \"selected_categories\").addItems(list(getattr(self, k)))\n                    elif k == \"font\":\n                        self.font = QFont()\n                        self.font.fromString(v)\n                        self._gen_font_stylesheet()\n                        self._update_fmtstr()\n                    elif k == \"color\":\n                        self.color = QColor(v)\n                        self._gen_font_stylesheet()\n                        self._update_fmtstr()\n                    else:\n                        log_warn(\"unknown key\", k)\n                    continue\n                cast, getter, setter = dkey\n                field = getattr(self.widgets, k)\n                #getattr(field, setter)(eval(cast)(v))\n                getattr(field, setter)(eval(v))\n            f.close()\n            return True\n        except Exception, e:\n            QErrorMessage(self).showMessage(str(e))\n            return False\n        \n    def profile_handler(self, load=False, save=False, save_as=False):\n        if load:\n            profile = QFileDialog.getOpenFileName(self, \"Select Profile\", TRIVIA_ROOT)\n            if profile and self.load_profile(profile):\n                self.current_profile_name = profile\n        elif save:\n            if self.current_profile_name:\n                self.save_profile(self.current_profile_name)\n        elif save_as:\n            profile = QFileDialog.getSaveFileName(self, \"Save Profile\", TRIVIA_ROOT)\n            if profile:\n                self.save_profile(profile)\n                \n    def start_requested(self):\n        log_err(\"implement me\")\n    def stop_requested(self):\n        log_err(\"implement me\")\n    def pause_requested(self):\n        log_err(\"implement me\")\n    def next_requested(self):\n        log_err(\"implement me\")\n        \n    def got_notification(self, notification_object):\n        self.notifications.addItem(notification_object)\n        self._notification_dlg.show()\n    def del_notification(self, notification_object):\n        self.notifications.delItem(notification_object)\nclass _QAData(object):\n    def __init__(self):\n        self.question = None\n        self.answers = []\n        self.id = -1\n        self.category = None\n        self.type = None\n    def ask_string(self):\n        pass\n    def hint_string(self):\n        pass\n    def is_correct(self, answer):\n        for a in self.answers:\n            if a.lower() in answer.lower():\n                return True\n        return False\nclass _QuestionData(_QAData):\n    def ask_string(self):\n        return \"Category %s: %s\" % (self.category, self.question)\n    def hint_string(self):\n        ret = \"\"\n", "answers": ["        longest = max(self.answers)"], "pred": "    code = \"\"\nNext line of code:\n    code = \"\"\nNext line of code:\n    code = \"\"\nNext line of code:\n    code = \"\"\nNext line of code:\n    code = \"\"\nNext line of code:\n    code = \"\"\nNext line of code:\n    code = \"\"\nNext line of code:\n   ", "length": 1229, "dataset": "lcc", "language": "python", "all_classes": null, "_id": "3bd5a501fc0327fd7bcda8389c7d11b3a821c9b5ce5a93cc"}
{"prompt": "Please complete the code given below. \n/**************************************\n*Script Name: Staff Runebook          *\n*Author: Joeku                        *\n*For use with RunUO 2.0 RC2           *\n*Client Tested with: 6.0.9.2          *\n*Version: 1.10                        *\n*Initial Release: 11/25/07            *\n*Revision Date: 02/04/09              *\n**************************************/\nusing System;\nusing System.Collections.Generic;\nusing Server;\nusing Server.Gumps;\nusing Server.Items;\nusing Server.Network;\nnamespace Joeku.SR\n{\n    public class SR_Gump : Gump\n    {\n        public SR_RuneAccount RuneAcc { get; set; }\n        public SR_Gump(Mobile m, SR_RuneAccount runeAcc)\n            : base(0, 27)\n        {\n            RuneAcc = runeAcc;\n            int count = 0;\n            if (RuneAcc.ChildRune == null)\n                count = RuneAcc.Count;\n            else\n                count = RuneAcc.ChildRune.Count;\n            int RunebooksH = 0,\n            RunebooksW = 0;\n            int tier = -1;\n            if (RuneAcc.ChildRune != null)\n                tier = RuneAcc.ChildRune.Tier;\n            if (tier > -1)\n            {\n                if (tier == 0)\n                {\n                    RunebooksH = 42;\n                    RunebooksW = 278;\n                }\n                else\n                {\n                    RunebooksH = 37 + 42;\n                    RunebooksW = 278 + (tier * 5);\n                }\n            }\n            int RunesH = 10 * 2;\n            if (count > 10)\n                count = 10;\n            if (count > 0)\n                RunesH += (count * 22);\n            if (count > 1)\n                RunesH += ((count - 1) * 5);\n            DisplayHeader();\n            int labelHue = m != null && m.NetState != null && m.NetState.IsEnhancedClient ? 2101 : 2100;\n            if (tier > -1)\n                DisplayRunebooks(42, RunebooksH, RunebooksW, tier, labelHue);\n            DisplayAddNew(42 + RunebooksH + RunesH, labelHue);\n            DisplayRunes(42 + RunebooksH, RunesH, labelHue);\n        }\n        public static void Send(Mobile mob, SR_RuneAccount runeAcc)\n        {\n            mob.CloseGump(typeof(SR_Gump));\n            mob.SendGump(new SR_Gump(mob, runeAcc));\n        }\n        public void DisplayHeader()\n        {\n            AddPage(0);\n            AddBackground(0, 0, 210, 42, 9270); \n            AddImageTiled(10, 10, 190, 22, 2624); \n            AddAlphaRegion(10, 10, 190, 22);\n            AddHtml(0, 11, 210, 20, \"<CENTER><BASEFONT COLOR=#FFFFFF><BIG>Joeku's Staff Runebook</CENTER>\", false, false);\n        }\n        public void DisplayRunebooks(int y, int h, int w, int tiers, int labelHue)\n        {\n            AddBackground(0, y, w, h, 9270);\n            AddImageTiled(10, y + 10, w - 20, h - 20, 2624); \n            AddAlphaRegion(10, y + 10, w - 20, h - 20); \n            for (int i = tiers, j = 1; i > 0; i--, j++)\n            {\n                AddBackground(j * 5, y + 37, ((i - 1) * 5) + 278, 42, 9270);\n                if (i == 1)\n                {\n                    AddImageTiled((j * 5) + 10, y + 47, ((i - 1) * 5) + 258, 22, 2624); \n                    AddAlphaRegion((j * 5) + 10, y + 47, ((i - 1) * 5) + 258, 22); \n                }\n            }\n            SR_Rune rune = RuneAcc.Runes[RuneAcc.PageIndex];\n            AddItem(SR_Utilities.ItemOffsetX(rune), y + SR_Utilities.ItemOffsetY(rune) + 12, SR_Utilities.RunebookID, SR_Utilities.ItemHue(rune));\n            AddLabelCropped(35, y + 12, w - 108, 20, labelHue, rune.Name); \n            AddButton(w - 70, y + 10, 4014, 4016, 5, GumpButtonType.Reply, 0); \n            AddButton(w - 40, y + 10, 4017, 4019, 4, GumpButtonType.Reply, 0); \n            if (tiers > 0)\n            {\n                rune = RuneAcc.ChildRune;\n                AddItem(SR_Utilities.ItemOffsetX(rune) + tiers * 5, y + SR_Utilities.ItemOffsetY(rune) + 12 + 37, SR_Utilities.RunebookID, SR_Utilities.ItemHue(rune));\n                AddLabelCropped(35 + tiers * 5, y + 12 + 37, 170, 20, labelHue, rune.Name); \n                AddButton(w - 70, y + 10 + 37, 4014, 4016, 7, GumpButtonType.Reply, 0); \n                AddButton(w - 40, y + 10 + 37, 4017, 4019, 6, GumpButtonType.Reply, 0); \n            }\n            // AddButton(238, 30 + bgY + 10, 4011, 4013, 0, GumpButtonType.Reply, 0); \n        }\n        public void DisplayAddNew(int y, int labelHue)\n        { \n            AddBackground(0, y, 278, 42, 9270); \n            AddImageTiled(10, y + 10, 258, 22, 2624); \n            AddAlphaRegion(10, y + 10, 258, 22);\n            AddLabel(15, y + 10, labelHue, @\"New Rune\"); \n            AddButton(80, y + 10, 4011, 4013, 1, GumpButtonType.Reply, 0); \n            AddButton(110, y + 10, 4029, 4031, 2, GumpButtonType.Reply, 0);\n            AddLabel(150, y + 10, labelHue, @\"New Runebook\"); \n            AddButton(238, y + 10, 4011, 4013, 3, GumpButtonType.Reply, 0); \n        }\n        public void DisplayRunes(int y, int h, int labelHue)\n        {\n            AddBackground(0, y, 430/*400*/, h, 9270); \n            AddImageTiled(10, y + 10, 410, h - 20, 2624); \n            AddAlphaRegion(10, y + 10, 410, h - 20); \n            List<SR_Rune> runes = null;\n            int count, runebooks;\n            if (RuneAcc.ChildRune == null)\n            {\n                runes = RuneAcc.Runes;\n                count = RuneAcc.Count;\n                runebooks = RuneAcc.RunebookCount;\n            }\n            else\n            {\n                runes = RuneAcc.ChildRune.Runes;\n                count = RuneAcc.ChildRune.Count;\n                runebooks = RuneAcc.ChildRune.RunebookCount;\n            }\n\t\t\t\n            AddPage(1);\n            int pages = (int)Math.Ceiling((double)count / 9.0), temp = 0;\n            for (int i = 0, loc = 0, page = 1; i < count; i++, loc++)\n            {\n                temp = 10 + y + (22 + 5) * loc;\n                AddItem(SR_Utilities.ItemOffsetX(runes[i]), 2 + SR_Utilities.ItemOffsetY(runes[i]) + temp, runes[i].IsRunebook ? SR_Utilities.RunebookID : SR_Utilities.RuneID, SR_Utilities.ItemHue(runes[i])); \n                if (runes[i].IsRunebook)\n                    AddLabelCropped(35, 2 + temp, 175, 20, labelHue, String.Format(\"{0}. {1}\", i + 1, runes[i].Name)); \n                else\n                {\n                    AddLabelCropped(35, 2 + temp, 175, 20, labelHue, String.Format(\"{0}. {1} ({2})\", i + 1 - runebooks, runes[i].Name, runes[i].TargetMap.ToString()));\n                    AddLabelCropped(215, 2 + temp, 110, 20, labelHue, runes[i].TargetLoc.ToString()); \n                    AddButton(360, temp, 4008, 4010, i + 30010, GumpButtonType.Reply, 0); \n                }\n                AddButton(330 + (runes[i].IsRunebook ? 30 : 0), temp, 4005, 4007, i + 10, GumpButtonType.Reply, 0); \n                //AddButton(340, 40 + ((22+5)*i), 4026, 4028, 0, GumpButtonType.Reply, 0); \n                //AddImage(340, 40 + ((22+5)*i), 4026, 1000); \n                AddButton(390, temp, 4017, 4019, i + 60010, GumpButtonType.Reply, 0); // delete\n                if (pages > 1 && ((loc == 8 && i < count - 1) || i == count - 1))\n                {\n                    temp = 10 + y + (22 + 5) * 9;\n                    // (430(bg) - 20 (buffer) - 70 (txt/buffer) - 60(buttons)) / 2 = 140\n                    if (page > 1)\n                        AddButton(140, temp, 4014, 4016, 0, GumpButtonType.Page, page - 1);\n                    else\n                        AddImage(140, temp, 4014, 1000);\n                    AddHtml(170, 2 + temp, 90, 20, String.Format(\"<BASEFONT COLOR=#FFFFFF><CENTER>Page {0}/{1}\", page, pages), false, false);\n\t\t\t\t\t\n                    if (page < pages)\n                        AddButton(260, temp, 4005, 4007, 0, GumpButtonType.Page, page + 1);\n                    else\n                        AddImage(260, temp, 4005, 1000);\n                    page++;\n                    AddPage(page);\n                    loc = -1;\n                }\n            }\n        }\n        public override void OnResponse(NetState sender, RelayInfo info)\n        {\n            int button = info.ButtonID;\n            Mobile mob = sender.Mobile;\n            switch( button )\n            {\n                case 0:\n                    break;\n                case 1:\t\n                    mob.SendMessage(\"Enter a description:\");\n                    mob.Prompt = new SR_NewRunePrompt(RuneAcc, mob.Location, mob.Map);\n                    Send(mob, SR_Utilities.FetchInfo(mob.Account));\n                    break;\n                case 2:\n                    mob.SendMessage(\"Target a location to mark:\");\nNext line of code:\n", "input": "", "context": "/**************************************\n*Script Name: Staff Runebook          *\n*Author: Joeku                        *\n*For use with RunUO 2.0 RC2           *\n*Client Tested with: 6.0.9.2          *\n*Version: 1.10                        *\n*Initial Release: 11/25/07            *\n*Revision Date: 02/04/09              *\n**************************************/\nusing System;\nusing System.Collections.Generic;\nusing Server;\nusing Server.Gumps;\nusing Server.Items;\nusing Server.Network;\nnamespace Joeku.SR\n{\n    public class SR_Gump : Gump\n    {\n        public SR_RuneAccount RuneAcc { get; set; }\n        public SR_Gump(Mobile m, SR_RuneAccount runeAcc)\n            : base(0, 27)\n        {\n            RuneAcc = runeAcc;\n            int count = 0;\n            if (RuneAcc.ChildRune == null)\n                count = RuneAcc.Count;\n            else\n                count = RuneAcc.ChildRune.Count;\n            int RunebooksH = 0,\n            RunebooksW = 0;\n            int tier = -1;\n            if (RuneAcc.ChildRune != null)\n                tier = RuneAcc.ChildRune.Tier;\n            if (tier > -1)\n            {\n                if (tier == 0)\n                {\n                    RunebooksH = 42;\n                    RunebooksW = 278;\n                }\n                else\n                {\n                    RunebooksH = 37 + 42;\n                    RunebooksW = 278 + (tier * 5);\n                }\n            }\n            int RunesH = 10 * 2;\n            if (count > 10)\n                count = 10;\n            if (count > 0)\n                RunesH += (count * 22);\n            if (count > 1)\n                RunesH += ((count - 1) * 5);\n            DisplayHeader();\n            int labelHue = m != null && m.NetState != null && m.NetState.IsEnhancedClient ? 2101 : 2100;\n            if (tier > -1)\n                DisplayRunebooks(42, RunebooksH, RunebooksW, tier, labelHue);\n            DisplayAddNew(42 + RunebooksH + RunesH, labelHue);\n            DisplayRunes(42 + RunebooksH, RunesH, labelHue);\n        }\n        public static void Send(Mobile mob, SR_RuneAccount runeAcc)\n        {\n            mob.CloseGump(typeof(SR_Gump));\n            mob.SendGump(new SR_Gump(mob, runeAcc));\n        }\n        public void DisplayHeader()\n        {\n            AddPage(0);\n            AddBackground(0, 0, 210, 42, 9270); \n            AddImageTiled(10, 10, 190, 22, 2624); \n            AddAlphaRegion(10, 10, 190, 22);\n            AddHtml(0, 11, 210, 20, \"<CENTER><BASEFONT COLOR=#FFFFFF><BIG>Joeku's Staff Runebook</CENTER>\", false, false);\n        }\n        public void DisplayRunebooks(int y, int h, int w, int tiers, int labelHue)\n        {\n            AddBackground(0, y, w, h, 9270);\n            AddImageTiled(10, y + 10, w - 20, h - 20, 2624); \n            AddAlphaRegion(10, y + 10, w - 20, h - 20); \n            for (int i = tiers, j = 1; i > 0; i--, j++)\n            {\n                AddBackground(j * 5, y + 37, ((i - 1) * 5) + 278, 42, 9270);\n                if (i == 1)\n                {\n                    AddImageTiled((j * 5) + 10, y + 47, ((i - 1) * 5) + 258, 22, 2624); \n                    AddAlphaRegion((j * 5) + 10, y + 47, ((i - 1) * 5) + 258, 22); \n                }\n            }\n            SR_Rune rune = RuneAcc.Runes[RuneAcc.PageIndex];\n            AddItem(SR_Utilities.ItemOffsetX(rune), y + SR_Utilities.ItemOffsetY(rune) + 12, SR_Utilities.RunebookID, SR_Utilities.ItemHue(rune));\n            AddLabelCropped(35, y + 12, w - 108, 20, labelHue, rune.Name); \n            AddButton(w - 70, y + 10, 4014, 4016, 5, GumpButtonType.Reply, 0); \n            AddButton(w - 40, y + 10, 4017, 4019, 4, GumpButtonType.Reply, 0); \n            if (tiers > 0)\n            {\n                rune = RuneAcc.ChildRune;\n                AddItem(SR_Utilities.ItemOffsetX(rune) + tiers * 5, y + SR_Utilities.ItemOffsetY(rune) + 12 + 37, SR_Utilities.RunebookID, SR_Utilities.ItemHue(rune));\n                AddLabelCropped(35 + tiers * 5, y + 12 + 37, 170, 20, labelHue, rune.Name); \n                AddButton(w - 70, y + 10 + 37, 4014, 4016, 7, GumpButtonType.Reply, 0); \n                AddButton(w - 40, y + 10 + 37, 4017, 4019, 6, GumpButtonType.Reply, 0); \n            }\n            // AddButton(238, 30 + bgY + 10, 4011, 4013, 0, GumpButtonType.Reply, 0); \n        }\n        public void DisplayAddNew(int y, int labelHue)\n        { \n            AddBackground(0, y, 278, 42, 9270); \n            AddImageTiled(10, y + 10, 258, 22, 2624); \n            AddAlphaRegion(10, y + 10, 258, 22);\n            AddLabel(15, y + 10, labelHue, @\"New Rune\"); \n            AddButton(80, y + 10, 4011, 4013, 1, GumpButtonType.Reply, 0); \n            AddButton(110, y + 10, 4029, 4031, 2, GumpButtonType.Reply, 0);\n            AddLabel(150, y + 10, labelHue, @\"New Runebook\"); \n            AddButton(238, y + 10, 4011, 4013, 3, GumpButtonType.Reply, 0); \n        }\n        public void DisplayRunes(int y, int h, int labelHue)\n        {\n            AddBackground(0, y, 430/*400*/, h, 9270); \n            AddImageTiled(10, y + 10, 410, h - 20, 2624); \n            AddAlphaRegion(10, y + 10, 410, h - 20); \n            List<SR_Rune> runes = null;\n            int count, runebooks;\n            if (RuneAcc.ChildRune == null)\n            {\n                runes = RuneAcc.Runes;\n                count = RuneAcc.Count;\n                runebooks = RuneAcc.RunebookCount;\n            }\n            else\n            {\n                runes = RuneAcc.ChildRune.Runes;\n                count = RuneAcc.ChildRune.Count;\n                runebooks = RuneAcc.ChildRune.RunebookCount;\n            }\n\t\t\t\n            AddPage(1);\n            int pages = (int)Math.Ceiling((double)count / 9.0), temp = 0;\n            for (int i = 0, loc = 0, page = 1; i < count; i++, loc++)\n            {\n                temp = 10 + y + (22 + 5) * loc;\n                AddItem(SR_Utilities.ItemOffsetX(runes[i]), 2 + SR_Utilities.ItemOffsetY(runes[i]) + temp, runes[i].IsRunebook ? SR_Utilities.RunebookID : SR_Utilities.RuneID, SR_Utilities.ItemHue(runes[i])); \n                if (runes[i].IsRunebook)\n                    AddLabelCropped(35, 2 + temp, 175, 20, labelHue, String.Format(\"{0}. {1}\", i + 1, runes[i].Name)); \n                else\n                {\n                    AddLabelCropped(35, 2 + temp, 175, 20, labelHue, String.Format(\"{0}. {1} ({2})\", i + 1 - runebooks, runes[i].Name, runes[i].TargetMap.ToString()));\n                    AddLabelCropped(215, 2 + temp, 110, 20, labelHue, runes[i].TargetLoc.ToString()); \n                    AddButton(360, temp, 4008, 4010, i + 30010, GumpButtonType.Reply, 0); \n                }\n                AddButton(330 + (runes[i].IsRunebook ? 30 : 0), temp, 4005, 4007, i + 10, GumpButtonType.Reply, 0); \n                //AddButton(340, 40 + ((22+5)*i), 4026, 4028, 0, GumpButtonType.Reply, 0); \n                //AddImage(340, 40 + ((22+5)*i), 4026, 1000); \n                AddButton(390, temp, 4017, 4019, i + 60010, GumpButtonType.Reply, 0); // delete\n                if (pages > 1 && ((loc == 8 && i < count - 1) || i == count - 1))\n                {\n                    temp = 10 + y + (22 + 5) * 9;\n                    // (430(bg) - 20 (buffer) - 70 (txt/buffer) - 60(buttons)) / 2 = 140\n                    if (page > 1)\n                        AddButton(140, temp, 4014, 4016, 0, GumpButtonType.Page, page - 1);\n                    else\n                        AddImage(140, temp, 4014, 1000);\n                    AddHtml(170, 2 + temp, 90, 20, String.Format(\"<BASEFONT COLOR=#FFFFFF><CENTER>Page {0}/{1}\", page, pages), false, false);\n\t\t\t\t\t\n                    if (page < pages)\n                        AddButton(260, temp, 4005, 4007, 0, GumpButtonType.Page, page + 1);\n                    else\n                        AddImage(260, temp, 4005, 1000);\n                    page++;\n                    AddPage(page);\n                    loc = -1;\n                }\n            }\n        }\n        public override void OnResponse(NetState sender, RelayInfo info)\n        {\n            int button = info.ButtonID;\n            Mobile mob = sender.Mobile;\n            switch( button )\n            {\n                case 0:\n                    break;\n                case 1:\t\n                    mob.SendMessage(\"Enter a description:\");\n                    mob.Prompt = new SR_NewRunePrompt(RuneAcc, mob.Location, mob.Map);\n                    Send(mob, SR_Utilities.FetchInfo(mob.Account));\n                    break;\n                case 2:\n                    mob.SendMessage(\"Target a location to mark:\");\n", "answers": ["                    mob.Target = new SR_NewRuneTarget(RuneAcc);"], "pred": "  Next line of code:\n  Next line of code:\n  Next line of code:\n  Next line of code:\n  Next line of code:\n  Next line of code:\n  Next line of code:\n  Next line of code:\n  Next line of code:\n  Next line of code:\n  Next line of", "length": 907, "dataset": "lcc", "language": "csharp", "all_classes": null, "_id": "227b063979c62ee1de7436be168450b5a7712a7a637fa6d4"}
{"prompt": "Please complete the code given below. \n/*\n * Copyright (c) 1996, 2012, Oracle and/or its affiliates. All rights reserved.\n * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n *\n * This code is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License version 2 only, as\n * published by the Free Software Foundation.  Oracle designates this\n * particular file as subject to the \"Classpath\" exception as provided\n * by Oracle in the LICENSE file that accompanied this code.\n *\n * This code is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n * version 2 for more details (a copy is included in the LICENSE file that\n * accompanied this code).\n *\n * You should have received a copy of the GNU General Public License version\n * 2 along with this work; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n *\n * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n * or visit www.oracle.com if you need additional information or have any\n * questions.\n */\npackage sun.security.ssl;\nimport java.io.*;\nimport java.math.BigInteger;\nimport java.security.*;\nimport java.security.interfaces.*;\nimport java.security.spec.*;\nimport java.security.cert.*;\nimport java.security.cert.Certificate;\nimport java.util.*;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.lang.reflect.*;\nimport javax.security.auth.x500.X500Principal;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.DHPublicKeySpec;\nimport javax.net.ssl.*;\nimport sun.security.internal.spec.TlsPrfParameterSpec;\nimport sun.security.ssl.CipherSuite.*;\nimport static sun.security.ssl.CipherSuite.PRF.*;\nimport sun.security.util.KeyUtil;\n/**\n * Many data structures are involved in the handshake messages.  These\n * classes are used as structures, with public data members.  They are\n * not visible outside the SSL package.\n *\n * Handshake messages all have a common header format, and they are all\n * encoded in a \"handshake data\" SSL record substream.  The base class\n * here (HandshakeMessage) provides a common framework and records the\n * SSL record type of the particular handshake message.\n *\n * This file contains subclasses for all the basic handshake messages.\n * All handshake messages know how to encode and decode themselves on\n * SSL streams; this facilitates using the same code on SSL client and\n * server sides, although they don't send and receive the same messages.\n *\n * Messages also know how to print themselves, which is quite handy\n * for debugging.  They always identify their type, and can optionally\n * dump all of their content.\n *\n * @author David Brownell\n */\npublic abstract class HandshakeMessage {\n    HandshakeMessage() { }\n    // enum HandshakeType:\n    static final byte   ht_hello_request = 0;\n    static final byte   ht_client_hello = 1;\n    static final byte   ht_server_hello = 2;\n    static final byte   ht_certificate = 11;\n    static final byte   ht_server_key_exchange = 12;\n    static final byte   ht_certificate_request = 13;\n    static final byte   ht_server_hello_done = 14;\n    static final byte   ht_certificate_verify = 15;\n    static final byte   ht_client_key_exchange = 16;\n    static final byte   ht_finished = 20;\n    /* Class and subclass dynamic debugging support */\n    public static final Debug debug = Debug.getInstance(\"ssl\");\n    /**\n     * Utility method to convert a BigInteger to a byte array in unsigned\n     * format as needed in the handshake messages. BigInteger uses\n     * 2's complement format, i.e. it prepends an extra zero if the MSB\n     * is set. We remove that.\n     */\n    static byte[] toByteArray(BigInteger bi) {\n        byte[] b = bi.toByteArray();\n        if ((b.length > 1) && (b[0] == 0)) {\n            int n = b.length - 1;\n            byte[] newarray = new byte[n];\n            System.arraycopy(b, 1, newarray, 0, n);\n            b = newarray;\n        }\n        return b;\n    }\n    /*\n     * SSL 3.0 MAC padding constants.\n     * Also used by CertificateVerify and Finished during the handshake.\n     */\n    static final byte[] MD5_pad1 = genPad(0x36, 48);\n    static final byte[] MD5_pad2 = genPad(0x5c, 48);\n    static final byte[] SHA_pad1 = genPad(0x36, 40);\n    static final byte[] SHA_pad2 = genPad(0x5c, 40);\n    private static byte[] genPad(int b, int count) {\n        byte[] padding = new byte[count];\n        Arrays.fill(padding, (byte)b);\n        return padding;\n    }\n    /*\n     * Write a handshake message on the (handshake) output stream.\n     * This is just a four byte header followed by the data.\n     *\n     * NOTE that huge messages -- notably, ones with huge cert\n     * chains -- are handled correctly.\n     */\n    final void write(HandshakeOutStream s) throws IOException {\n        int len = messageLength();\n        if (len >= Record.OVERFLOW_OF_INT24) {\n            throw new SSLException(\"Handshake message too big\"\n                + \", type = \" + messageType() + \", len = \" + len);\n        }\n        s.write(messageType());\n        s.putInt24(len);\n        send(s);\n    }\n    /*\n     * Subclasses implement these methods so those kinds of\n     * messages can be emitted.  Base class delegates to subclass.\n     */\n    abstract int  messageType();\n    abstract int  messageLength();\n    abstract void send(HandshakeOutStream s) throws IOException;\n    /*\n     * Write a descriptive message on the output stream; for debugging.\n     */\n    abstract void print(PrintStream p) throws IOException;\n//\n// NOTE:  the rest of these classes are nested within this one, and are\n// imported by other classes in this package.  There are a few other\n// handshake message classes, not neatly nested here because of current\n// licensing requirement for native (RSA) methods.  They belong here,\n// but those native methods complicate things a lot!\n//\n/*\n * HelloRequest ... SERVER --> CLIENT\n *\n * Server can ask the client to initiate a new handshake, e.g. to change\n * session parameters after a connection has been (re)established.\n */\nstatic final class HelloRequest extends HandshakeMessage {\n    @Override\n    int messageType() { return ht_hello_request; }\n    HelloRequest() { }\n    HelloRequest(HandshakeInStream in) throws IOException\n    {\n        // nothing in this message\n    }\n    @Override\n    int messageLength() { return 0; }\n    @Override\n    void send(HandshakeOutStream out) throws IOException\n    {\n        // nothing in this messaage\n    }\n    @Override\n    void print(PrintStream out) throws IOException\n    {\n        out.println(\"*** HelloRequest (empty)\");\n    }\n}\n/*\n * ClientHello ... CLIENT --> SERVER\n *\n * Client initiates handshake by telling server what it wants, and what it\n * can support (prioritized by what's first in the ciphe suite list).\n *\n * By RFC2246:7.4.1.2 it's explicitly anticipated that this message\n * will have more data added at the end ... e.g. what CAs the client trusts.\n * Until we know how to parse it, we will just read what we know\n * about, and let our caller handle the jumps over unknown data.\n */\nstatic final class ClientHello extends HandshakeMessage {\n    ProtocolVersion     protocolVersion;\n    RandomCookie        clnt_random;\n    SessionId           sessionId;\n    private CipherSuiteList    cipherSuites;\n    byte[]              compression_methods;\n    HelloExtensions extensions = new HelloExtensions();\n    private final static byte[]  NULL_COMPRESSION = new byte[] {0};\n    ClientHello(SecureRandom generator, ProtocolVersion protocolVersion,\n            SessionId sessionId, CipherSuiteList cipherSuites) {\n        this.protocolVersion = protocolVersion;\n        this.sessionId = sessionId;\n        this.cipherSuites = cipherSuites;\n        if (cipherSuites.containsEC()) {\n            extensions.add(SupportedEllipticCurvesExtension.DEFAULT);\n            extensions.add(SupportedEllipticPointFormatsExtension.DEFAULT);\n        }\n        clnt_random = new RandomCookie(generator);\n        compression_methods = NULL_COMPRESSION;\n    }\n    ClientHello(HandshakeInStream s, int messageLength) throws IOException {\n        protocolVersion = ProtocolVersion.valueOf(s.getInt8(), s.getInt8());\n        clnt_random = new RandomCookie(s);\n        sessionId = new SessionId(s.getBytes8());\n        cipherSuites = new CipherSuiteList(s);\n        compression_methods = s.getBytes8();\n        if (messageLength() != messageLength) {\n            extensions = new HelloExtensions(s);\n        }\n    }\n    CipherSuiteList getCipherSuites() {\n        return cipherSuites;\n    }\n    // add renegotiation_info extension\n    void addRenegotiationInfoExtension(byte[] clientVerifyData) {\n        HelloExtension renegotiationInfo = new RenegotiationInfoExtension(\n                    clientVerifyData, new byte[0]);\n        extensions.add(renegotiationInfo);\n    }\n    // add server_name extension\n    void addSNIExtension(List<SNIServerName> serverNames) {\n        try {\n            extensions.add(new ServerNameExtension(serverNames));\n        } catch (IOException ioe) {\n            // ignore the exception and return\n        }\n    }\n    // add signature_algorithm extension\n    void addSignatureAlgorithmsExtension(\n            Collection<SignatureAndHashAlgorithm> algorithms) {\n        HelloExtension signatureAlgorithm =\n                new SignatureAlgorithmsExtension(algorithms);\n        extensions.add(signatureAlgorithm);\n    }\n    @Override\n    int messageType() { return ht_client_hello; }\n    @Override\n    int messageLength() {\n        /*\n         * Add fixed size parts of each field...\n         * version + random + session + cipher + compress\n         */\n        return (2 + 32 + 1 + 2 + 1\n            + sessionId.length()                /* ... + variable parts */\n            + (cipherSuites.size() * 2)\n            + compression_methods.length)\n            + extensions.length();\n    }\n    @Override\n    void send(HandshakeOutStream s) throws IOException {\n        s.putInt8(protocolVersion.major);\n        s.putInt8(protocolVersion.minor);\n        clnt_random.send(s);\n        s.putBytes8(sessionId.getId());\n        cipherSuites.send(s);\n        s.putBytes8(compression_methods);\n        extensions.send(s);\n    }\n    @Override\n    void print(PrintStream s) throws IOException {\n        s.println(\"*** ClientHello, \" + protocolVersion);\n        if (debug != null && Debug.isOn(\"verbose\")) {\n            s.print(\"RandomCookie:  \");\n            clnt_random.print(s);\n            s.print(\"Session ID:  \");\n            s.println(sessionId);\n            s.println(\"Cipher Suites: \" + cipherSuites);\n            Debug.println(s, \"Compression Methods\", compression_methods);\n            extensions.print(s);\n            s.println(\"***\");\n        }\n    }\n}\n/*\n * ServerHello ... SERVER --> CLIENT\n *\n * Server chooses protocol options from among those it supports and the\n * client supports.  Then it sends the basic session descriptive parameters\n * back to the client.\n */\nstatic final\nclass ServerHello extends HandshakeMessage\n{\n    @Override\n    int messageType() { return ht_server_hello; }\n    ProtocolVersion     protocolVersion;\n    RandomCookie        svr_random;\n    SessionId           sessionId;\n    CipherSuite         cipherSuite;\n    byte                compression_method;\n    HelloExtensions extensions = new HelloExtensions();\n    ServerHello() {\n        // empty\n    }\n    ServerHello(HandshakeInStream input, int messageLength)\n            throws IOException {\n        protocolVersion = ProtocolVersion.valueOf(input.getInt8(),\n                                                  input.getInt8());\n        svr_random = new RandomCookie(input);\n        sessionId = new SessionId(input.getBytes8());\n        cipherSuite = CipherSuite.valueOf(input.getInt8(), input.getInt8());\n        compression_method = (byte)input.getInt8();\n        if (messageLength() != messageLength) {\n            extensions = new HelloExtensions(input);\n        }\n    }\n    @Override\n    int messageLength()\n    {\n        // almost fixed size, except session ID and extensions:\n        //      major + minor = 2\n        //      random = 32\n        //      session ID len field = 1\n        //      cipher suite + compression = 3\n        //      extensions: if present, 2 + length of extensions\n        return 38 + sessionId.length() + extensions.length();\n    }\n    @Override\n    void send(HandshakeOutStream s) throws IOException\n    {\n        s.putInt8(protocolVersion.major);\n        s.putInt8(protocolVersion.minor);\n        svr_random.send(s);\n        s.putBytes8(sessionId.getId());\n        s.putInt8(cipherSuite.id >> 8);\n        s.putInt8(cipherSuite.id & 0xff);\n        s.putInt8(compression_method);\n        extensions.send(s);\n    }\n    @Override\n    void print(PrintStream s) throws IOException\n    {\n        s.println(\"*** ServerHello, \" + protocolVersion);\n        if (debug != null && Debug.isOn(\"verbose\")) {\n            s.print(\"RandomCookie:  \");\n            svr_random.print(s);\n            s.print(\"Session ID:  \");\n            s.println(sessionId);\n            s.println(\"Cipher Suite: \" + cipherSuite);\n            s.println(\"Compression Method: \" + compression_method);\n            extensions.print(s);\n            s.println(\"***\");\n        }\n    }\n}\n/*\n * CertificateMsg ... send by both CLIENT and SERVER\n *\n * Each end of a connection may need to pass its certificate chain to\n * the other end.  Such chains are intended to validate an identity with\n * reference to some certifying authority.  Examples include companies\n * like Verisign, or financial institutions.  There's some control over\n * the certifying authorities which are sent.\n *\n * NOTE: that these messages might be huge, taking many handshake records.\n * Up to 2^48 bytes of certificate may be sent, in records of at most 2^14\n * bytes each ... up to 2^32 records sent on the output stream.\n */\nstatic final\nclass CertificateMsg extends HandshakeMessage\n{\n    @Override\n    int messageType() { return ht_certificate; }\n    private X509Certificate[] chain;\n    private List<byte[]> encodedChain;\n    private int messageLength;\n    CertificateMsg(X509Certificate[] certs) {\n        chain = certs;\n    }\n    CertificateMsg(HandshakeInStream input) throws IOException {\n        int chainLen = input.getInt24();\n        List<Certificate> v = new ArrayList<>(4);\n        CertificateFactory cf = null;\n        while (chainLen > 0) {\n            byte[] cert = input.getBytes24();\n            chainLen -= (3 + cert.length);\n            try {\n                if (cf == null) {\n                    cf = CertificateFactory.getInstance(\"X.509\");\n                }\n                v.add(cf.generateCertificate(new ByteArrayInputStream(cert)));\n            } catch (CertificateException e) {\n                throw (SSLProtocolException)new SSLProtocolException(\n                    e.getMessage()).initCause(e);\n            }\n        }\n        chain = v.toArray(new X509Certificate[v.size()]);\n    }\n    @Override\n    int messageLength() {\n        if (encodedChain == null) {\n            messageLength = 3;\n            encodedChain = new ArrayList<byte[]>(chain.length);\n            try {\n                for (X509Certificate cert : chain) {\n                    byte[] b = cert.getEncoded();\n                    encodedChain.add(b);\n                    messageLength += b.length + 3;\n                }\n            } catch (CertificateEncodingException e) {\n                encodedChain = null;\n                throw new RuntimeException(\"Could not encode certificates\", e);\n            }\n        }\n        return messageLength;\n    }\n    @Override\n    void send(HandshakeOutStream s) throws IOException {\n        s.putInt24(messageLength() - 3);\n        for (byte[] b : encodedChain) {\n            s.putBytes24(b);\n        }\n    }\n    @Override\n    void print(PrintStream s) throws IOException {\n        s.println(\"*** Certificate chain\");\n        if (debug != null && Debug.isOn(\"verbose\")) {\nNext line of code:\n", "input": "", "context": "/*\n * Copyright (c) 1996, 2012, Oracle and/or its affiliates. All rights reserved.\n * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n *\n * This code is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License version 2 only, as\n * published by the Free Software Foundation.  Oracle designates this\n * particular file as subject to the \"Classpath\" exception as provided\n * by Oracle in the LICENSE file that accompanied this code.\n *\n * This code is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n * version 2 for more details (a copy is included in the LICENSE file that\n * accompanied this code).\n *\n * You should have received a copy of the GNU General Public License version\n * 2 along with this work; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n *\n * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n * or visit www.oracle.com if you need additional information or have any\n * questions.\n */\npackage sun.security.ssl;\nimport java.io.*;\nimport java.math.BigInteger;\nimport java.security.*;\nimport java.security.interfaces.*;\nimport java.security.spec.*;\nimport java.security.cert.*;\nimport java.security.cert.Certificate;\nimport java.util.*;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.lang.reflect.*;\nimport javax.security.auth.x500.X500Principal;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.DHPublicKeySpec;\nimport javax.net.ssl.*;\nimport sun.security.internal.spec.TlsPrfParameterSpec;\nimport sun.security.ssl.CipherSuite.*;\nimport static sun.security.ssl.CipherSuite.PRF.*;\nimport sun.security.util.KeyUtil;\n/**\n * Many data structures are involved in the handshake messages.  These\n * classes are used as structures, with public data members.  They are\n * not visible outside the SSL package.\n *\n * Handshake messages all have a common header format, and they are all\n * encoded in a \"handshake data\" SSL record substream.  The base class\n * here (HandshakeMessage) provides a common framework and records the\n * SSL record type of the particular handshake message.\n *\n * This file contains subclasses for all the basic handshake messages.\n * All handshake messages know how to encode and decode themselves on\n * SSL streams; this facilitates using the same code on SSL client and\n * server sides, although they don't send and receive the same messages.\n *\n * Messages also know how to print themselves, which is quite handy\n * for debugging.  They always identify their type, and can optionally\n * dump all of their content.\n *\n * @author David Brownell\n */\npublic abstract class HandshakeMessage {\n    HandshakeMessage() { }\n    // enum HandshakeType:\n    static final byte   ht_hello_request = 0;\n    static final byte   ht_client_hello = 1;\n    static final byte   ht_server_hello = 2;\n    static final byte   ht_certificate = 11;\n    static final byte   ht_server_key_exchange = 12;\n    static final byte   ht_certificate_request = 13;\n    static final byte   ht_server_hello_done = 14;\n    static final byte   ht_certificate_verify = 15;\n    static final byte   ht_client_key_exchange = 16;\n    static final byte   ht_finished = 20;\n    /* Class and subclass dynamic debugging support */\n    public static final Debug debug = Debug.getInstance(\"ssl\");\n    /**\n     * Utility method to convert a BigInteger to a byte array in unsigned\n     * format as needed in the handshake messages. BigInteger uses\n     * 2's complement format, i.e. it prepends an extra zero if the MSB\n     * is set. We remove that.\n     */\n    static byte[] toByteArray(BigInteger bi) {\n        byte[] b = bi.toByteArray();\n        if ((b.length > 1) && (b[0] == 0)) {\n            int n = b.length - 1;\n            byte[] newarray = new byte[n];\n            System.arraycopy(b, 1, newarray, 0, n);\n            b = newarray;\n        }\n        return b;\n    }\n    /*\n     * SSL 3.0 MAC padding constants.\n     * Also used by CertificateVerify and Finished during the handshake.\n     */\n    static final byte[] MD5_pad1 = genPad(0x36, 48);\n    static final byte[] MD5_pad2 = genPad(0x5c, 48);\n    static final byte[] SHA_pad1 = genPad(0x36, 40);\n    static final byte[] SHA_pad2 = genPad(0x5c, 40);\n    private static byte[] genPad(int b, int count) {\n        byte[] padding = new byte[count];\n        Arrays.fill(padding, (byte)b);\n        return padding;\n    }\n    /*\n     * Write a handshake message on the (handshake) output stream.\n     * This is just a four byte header followed by the data.\n     *\n     * NOTE that huge messages -- notably, ones with huge cert\n     * chains -- are handled correctly.\n     */\n    final void write(HandshakeOutStream s) throws IOException {\n        int len = messageLength();\n        if (len >= Record.OVERFLOW_OF_INT24) {\n            throw new SSLException(\"Handshake message too big\"\n                + \", type = \" + messageType() + \", len = \" + len);\n        }\n        s.write(messageType());\n        s.putInt24(len);\n        send(s);\n    }\n    /*\n     * Subclasses implement these methods so those kinds of\n     * messages can be emitted.  Base class delegates to subclass.\n     */\n    abstract int  messageType();\n    abstract int  messageLength();\n    abstract void send(HandshakeOutStream s) throws IOException;\n    /*\n     * Write a descriptive message on the output stream; for debugging.\n     */\n    abstract void print(PrintStream p) throws IOException;\n//\n// NOTE:  the rest of these classes are nested within this one, and are\n// imported by other classes in this package.  There are a few other\n// handshake message classes, not neatly nested here because of current\n// licensing requirement for native (RSA) methods.  They belong here,\n// but those native methods complicate things a lot!\n//\n/*\n * HelloRequest ... SERVER --> CLIENT\n *\n * Server can ask the client to initiate a new handshake, e.g. to change\n * session parameters after a connection has been (re)established.\n */\nstatic final class HelloRequest extends HandshakeMessage {\n    @Override\n    int messageType() { return ht_hello_request; }\n    HelloRequest() { }\n    HelloRequest(HandshakeInStream in) throws IOException\n    {\n        // nothing in this message\n    }\n    @Override\n    int messageLength() { return 0; }\n    @Override\n    void send(HandshakeOutStream out) throws IOException\n    {\n        // nothing in this messaage\n    }\n    @Override\n    void print(PrintStream out) throws IOException\n    {\n        out.println(\"*** HelloRequest (empty)\");\n    }\n}\n/*\n * ClientHello ... CLIENT --> SERVER\n *\n * Client initiates handshake by telling server what it wants, and what it\n * can support (prioritized by what's first in the ciphe suite list).\n *\n * By RFC2246:7.4.1.2 it's explicitly anticipated that this message\n * will have more data added at the end ... e.g. what CAs the client trusts.\n * Until we know how to parse it, we will just read what we know\n * about, and let our caller handle the jumps over unknown data.\n */\nstatic final class ClientHello extends HandshakeMessage {\n    ProtocolVersion     protocolVersion;\n    RandomCookie        clnt_random;\n    SessionId           sessionId;\n    private CipherSuiteList    cipherSuites;\n    byte[]              compression_methods;\n    HelloExtensions extensions = new HelloExtensions();\n    private final static byte[]  NULL_COMPRESSION = new byte[] {0};\n    ClientHello(SecureRandom generator, ProtocolVersion protocolVersion,\n            SessionId sessionId, CipherSuiteList cipherSuites) {\n        this.protocolVersion = protocolVersion;\n        this.sessionId = sessionId;\n        this.cipherSuites = cipherSuites;\n        if (cipherSuites.containsEC()) {\n            extensions.add(SupportedEllipticCurvesExtension.DEFAULT);\n            extensions.add(SupportedEllipticPointFormatsExtension.DEFAULT);\n        }\n        clnt_random = new RandomCookie(generator);\n        compression_methods = NULL_COMPRESSION;\n    }\n    ClientHello(HandshakeInStream s, int messageLength) throws IOException {\n        protocolVersion = ProtocolVersion.valueOf(s.getInt8(), s.getInt8());\n        clnt_random = new RandomCookie(s);\n        sessionId = new SessionId(s.getBytes8());\n        cipherSuites = new CipherSuiteList(s);\n        compression_methods = s.getBytes8();\n        if (messageLength() != messageLength) {\n            extensions = new HelloExtensions(s);\n        }\n    }\n    CipherSuiteList getCipherSuites() {\n        return cipherSuites;\n    }\n    // add renegotiation_info extension\n    void addRenegotiationInfoExtension(byte[] clientVerifyData) {\n        HelloExtension renegotiationInfo = new RenegotiationInfoExtension(\n                    clientVerifyData, new byte[0]);\n        extensions.add(renegotiationInfo);\n    }\n    // add server_name extension\n    void addSNIExtension(List<SNIServerName> serverNames) {\n        try {\n            extensions.add(new ServerNameExtension(serverNames));\n        } catch (IOException ioe) {\n            // ignore the exception and return\n        }\n    }\n    // add signature_algorithm extension\n    void addSignatureAlgorithmsExtension(\n            Collection<SignatureAndHashAlgorithm> algorithms) {\n        HelloExtension signatureAlgorithm =\n                new SignatureAlgorithmsExtension(algorithms);\n        extensions.add(signatureAlgorithm);\n    }\n    @Override\n    int messageType() { return ht_client_hello; }\n    @Override\n    int messageLength() {\n        /*\n         * Add fixed size parts of each field...\n         * version + random + session + cipher + compress\n         */\n        return (2 + 32 + 1 + 2 + 1\n            + sessionId.length()                /* ... + variable parts */\n            + (cipherSuites.size() * 2)\n            + compression_methods.length)\n            + extensions.length();\n    }\n    @Override\n    void send(HandshakeOutStream s) throws IOException {\n        s.putInt8(protocolVersion.major);\n        s.putInt8(protocolVersion.minor);\n        clnt_random.send(s);\n        s.putBytes8(sessionId.getId());\n        cipherSuites.send(s);\n        s.putBytes8(compression_methods);\n        extensions.send(s);\n    }\n    @Override\n    void print(PrintStream s) throws IOException {\n        s.println(\"*** ClientHello, \" + protocolVersion);\n        if (debug != null && Debug.isOn(\"verbose\")) {\n            s.print(\"RandomCookie:  \");\n            clnt_random.print(s);\n            s.print(\"Session ID:  \");\n            s.println(sessionId);\n            s.println(\"Cipher Suites: \" + cipherSuites);\n            Debug.println(s, \"Compression Methods\", compression_methods);\n            extensions.print(s);\n            s.println(\"***\");\n        }\n    }\n}\n/*\n * ServerHello ... SERVER --> CLIENT\n *\n * Server chooses protocol options from among those it supports and the\n * client supports.  Then it sends the basic session descriptive parameters\n * back to the client.\n */\nstatic final\nclass ServerHello extends HandshakeMessage\n{\n    @Override\n    int messageType() { return ht_server_hello; }\n    ProtocolVersion     protocolVersion;\n    RandomCookie        svr_random;\n    SessionId           sessionId;\n    CipherSuite         cipherSuite;\n    byte                compression_method;\n    HelloExtensions extensions = new HelloExtensions();\n    ServerHello() {\n        // empty\n    }\n    ServerHello(HandshakeInStream input, int messageLength)\n            throws IOException {\n        protocolVersion = ProtocolVersion.valueOf(input.getInt8(),\n                                                  input.getInt8());\n        svr_random = new RandomCookie(input);\n        sessionId = new SessionId(input.getBytes8());\n        cipherSuite = CipherSuite.valueOf(input.getInt8(), input.getInt8());\n        compression_method = (byte)input.getInt8();\n        if (messageLength() != messageLength) {\n            extensions = new HelloExtensions(input);\n        }\n    }\n    @Override\n    int messageLength()\n    {\n        // almost fixed size, except session ID and extensions:\n        //      major + minor = 2\n        //      random = 32\n        //      session ID len field = 1\n        //      cipher suite + compression = 3\n        //      extensions: if present, 2 + length of extensions\n        return 38 + sessionId.length() + extensions.length();\n    }\n    @Override\n    void send(HandshakeOutStream s) throws IOException\n    {\n        s.putInt8(protocolVersion.major);\n        s.putInt8(protocolVersion.minor);\n        svr_random.send(s);\n        s.putBytes8(sessionId.getId());\n        s.putInt8(cipherSuite.id >> 8);\n        s.putInt8(cipherSuite.id & 0xff);\n        s.putInt8(compression_method);\n        extensions.send(s);\n    }\n    @Override\n    void print(PrintStream s) throws IOException\n    {\n        s.println(\"*** ServerHello, \" + protocolVersion);\n        if (debug != null && Debug.isOn(\"verbose\")) {\n            s.print(\"RandomCookie:  \");\n            svr_random.print(s);\n            s.print(\"Session ID:  \");\n            s.println(sessionId);\n            s.println(\"Cipher Suite: \" + cipherSuite);\n            s.println(\"Compression Method: \" + compression_method);\n            extensions.print(s);\n            s.println(\"***\");\n        }\n    }\n}\n/*\n * CertificateMsg ... send by both CLIENT and SERVER\n *\n * Each end of a connection may need to pass its certificate chain to\n * the other end.  Such chains are intended to validate an identity with\n * reference to some certifying authority.  Examples include companies\n * like Verisign, or financial institutions.  There's some control over\n * the certifying authorities which are sent.\n *\n * NOTE: that these messages might be huge, taking many handshake records.\n * Up to 2^48 bytes of certificate may be sent, in records of at most 2^14\n * bytes each ... up to 2^32 records sent on the output stream.\n */\nstatic final\nclass CertificateMsg extends HandshakeMessage\n{\n    @Override\n    int messageType() { return ht_certificate; }\n    private X509Certificate[] chain;\n    private List<byte[]> encodedChain;\n    private int messageLength;\n    CertificateMsg(X509Certificate[] certs) {\n        chain = certs;\n    }\n    CertificateMsg(HandshakeInStream input) throws IOException {\n        int chainLen = input.getInt24();\n        List<Certificate> v = new ArrayList<>(4);\n        CertificateFactory cf = null;\n        while (chainLen > 0) {\n            byte[] cert = input.getBytes24();\n            chainLen -= (3 + cert.length);\n            try {\n                if (cf == null) {\n                    cf = CertificateFactory.getInstance(\"X.509\");\n                }\n                v.add(cf.generateCertificate(new ByteArrayInputStream(cert)));\n            } catch (CertificateException e) {\n                throw (SSLProtocolException)new SSLProtocolException(\n                    e.getMessage()).initCause(e);\n            }\n        }\n        chain = v.toArray(new X509Certificate[v.size()]);\n    }\n    @Override\n    int messageLength() {\n        if (encodedChain == null) {\n            messageLength = 3;\n            encodedChain = new ArrayList<byte[]>(chain.length);\n            try {\n                for (X509Certificate cert : chain) {\n                    byte[] b = cert.getEncoded();\n                    encodedChain.add(b);\n                    messageLength += b.length + 3;\n                }\n            } catch (CertificateEncodingException e) {\n                encodedChain = null;\n                throw new RuntimeException(\"Could not encode certificates\", e);\n            }\n        }\n        return messageLength;\n    }\n    @Override\n    void send(HandshakeOutStream s) throws IOException {\n        s.putInt24(messageLength() - 3);\n        for (byte[] b : encodedChain) {\n            s.putBytes24(b);\n        }\n    }\n    @Override\n    void print(PrintStream s) throws IOException {\n        s.println(\"*** Certificate chain\");\n        if (debug != null && Debug.isOn(\"verbose\")) {\n", "answers": ["            for (int i = 0; i < chain.length; i++)"], "pred": "  s:  s:  s:  s:  s:  s:  s:  s:  s:  s:  s:  s:  s:  s:  s:  s:  s:  s:  s:  s:  s: ", "length": 1820, "dataset": "lcc", "language": "java", "all_classes": null, "_id": "f652398c3e8be338b4a7873ba6fecc5a686204d99a1a8d10"}
{"prompt": "Please complete the code given below. \n/*\n * jPOS Project [http://jpos.org]\n * Copyright (C) 2000-2015 Alejandro P. Revilla\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\npackage org.jpos.space;\nimport java.io.*;\nimport java.util.Map;\nimport java.util.HashMap;\nimport java.util.Set;\nimport java.util.concurrent.Future;\nimport java.util.concurrent.Semaphore;\nimport com.sleepycat.je.*;\nimport com.sleepycat.persist.EntityStore; \nimport com.sleepycat.persist.StoreConfig; \nimport com.sleepycat.persist.EntityCursor;\nimport com.sleepycat.persist.PrimaryIndex;\nimport com.sleepycat.persist.SecondaryIndex;\nimport com.sleepycat.persist.model.Entity;\nimport com.sleepycat.persist.model.Persistent;\nimport com.sleepycat.persist.model.PrimaryKey;\nimport com.sleepycat.persist.model.SecondaryKey;\nimport com.sleepycat.persist.model.Relationship;\nimport java.util.HashSet;\nimport java.util.concurrent.TimeUnit;\nimport org.jpos.util.Log;\nimport org.jpos.util.Loggeable;\n/**\n * BerkeleyDB Jave Edition based persistent space implementation\n *\n * @author Alejandro Revilla\n * @since 1.6.5\n */\n@SuppressWarnings(\"unchecked\")\npublic class JESpace<K,V> extends Log implements LocalSpace<K,V>, Loggeable, Runnable {\n    Environment dbe = null;\n    EntityStore store = null;\n    PrimaryIndex<Long, Ref> pIndex = null;\n    PrimaryIndex<Long,GCRef> gcpIndex = null;\n    SecondaryIndex<String,Long, Ref> sIndex = null;\n    SecondaryIndex<Long,Long,GCRef> gcsIndex = null;\n    Semaphore gcSem = new Semaphore(1);\n    LocalSpace<Object,SpaceListener> sl;\n    private static final long NRD_RESOLUTION = 500L;\n    public static final long GC_DELAY = 60*1000L;\n    private Future gcTask;\n    static final Map<String,Space> spaceRegistrar = \n        new HashMap<String,Space> ();\n    public JESpace(String name, String path) throws SpaceError {\n        super();\n        try {\n            EnvironmentConfig envConfig = new EnvironmentConfig();\n            StoreConfig storeConfig = new StoreConfig();\n            envConfig.setAllowCreate (true);\n            envConfig.setTransactional(true);\n            // envConfig.setTxnTimeout(5L, TimeUnit.MINUTES);\n            envConfig.setLockTimeout(5, TimeUnit.SECONDS);\n            storeConfig.setAllowCreate (true);\n            storeConfig.setTransactional (true);\n            File dir = new File(path);\n            dir.mkdirs();\n            dbe = new Environment (dir, envConfig);\n            store = new EntityStore (dbe, name, storeConfig);\n            pIndex = store.getPrimaryIndex (Long.class, Ref.class);\n            gcpIndex = store.getPrimaryIndex (Long.class, GCRef.class);\n            sIndex = store.getSecondaryIndex (pIndex, String.class, \"key\");\n            gcsIndex = store.getSecondaryIndex (gcpIndex, Long.class, \"expires\");\n            gcTask = SpaceFactory.getGCExecutor().scheduleAtFixedRate(this, GC_DELAY, GC_DELAY, TimeUnit.MILLISECONDS);\n        } catch (Exception e) {\n            throw new SpaceError (e);\n        }\n    }\n    public void out (K key, V value) {\n        out (key, value, 0L);\n    }\n    public void out (K key, V value, long timeout) {\n        Transaction txn = null;\n        try {\n            txn = dbe.beginTransaction (null, null);\n            Ref ref = new Ref(key.toString(), value, timeout);\n            pIndex.put (ref);\n            if (timeout > 0L)\n                gcpIndex.putNoReturn (\n                    new GCRef (ref.getId(), ref.getExpiration())\n                );\n            txn.commit();\n            txn = null;\n            synchronized (this) {\n                notifyAll ();\n            }\n            if (sl != null)\n                notifyListeners(key, value);\n        } catch (Exception e) {\n            throw new SpaceError (e);\n        } finally {\n            if (txn != null)\n                abort (txn);\n        }\n    }\n    public void push (K key, V value, long timeout) {\n        Transaction txn = null;\n        try {\n            txn = dbe.beginTransaction (null, null);\n            Ref ref = new Ref(key.toString(), value, timeout);\n            pIndex.put (ref);\n            pIndex.delete (ref.getId());\n            ref.reverseId();\n            pIndex.put (ref);\n            txn.commit();\n            txn = null;\n            synchronized (this) {\n                notifyAll ();\n            }\n            if (sl != null)\n                notifyListeners(key, value);\n        } catch (Exception e) {\n            throw new SpaceError (e);\n        } finally {\n            if (txn != null)\n                abort (txn);\n        }\n    }\n    public void push (K key, V value) {\n        push (key, value, 0L);\n    }\n    @SuppressWarnings(\"unchecked\")\n    public V rdp (Object key) {\n        try {\n            return (V) getObject (key, false);\n        } catch (DatabaseException e) {\n            throw new SpaceError (e);\n        }\n    }\n    @SuppressWarnings(\"unchecked\")\n    public synchronized V in (Object key) {\n        Object obj;\n        while ((obj = inp (key)) == null) {\n            try {\n                this.wait ();\n            } catch (InterruptedException ignored) { }\n        }\n        return (V) obj;\n    }\n    @SuppressWarnings(\"unchecked\")\n    public synchronized V in (Object key, long timeout) {\n        Object obj;\n        long now = System.currentTimeMillis();\n        long end = now + timeout;\n        while ((obj = inp (key)) == null &&\n                (now = System.currentTimeMillis()) < end)\n        {\n            try {\n                this.wait (end - now);\n            } catch (InterruptedException ignored) { }\n        }\n        return (V) obj;\n    }\n    @SuppressWarnings(\"unchecked\")\n    public synchronized V rd  (Object key) {\n        Object obj;\n        while ((obj = rdp (key)) == null) {\n            try {\n                this.wait ();\n            } catch (InterruptedException ignored) { }\n        }\n        return (V) obj;\n    }\n    @SuppressWarnings(\"unchecked\")\n    public synchronized V rd  (Object key, long timeout) {\n        Object obj;\n        long now = System.currentTimeMillis();\n        long end = now + timeout;\n        while ((obj = rdp (key)) == null &&\n                (now = System.currentTimeMillis()) < end)\n        {\n            try {\n                this.wait (end - now);\n            } catch (InterruptedException ignored) { }\n        }\n        return (V) obj;\n    }\n    public synchronized void nrd  (Object key) {\n        while (rdp (key) != null) {\n            try {\n                this.wait (NRD_RESOLUTION);\n            } catch (InterruptedException ignored) { }\n        }\n    }\n    public synchronized V nrd  (Object key, long timeout) {\n        Object obj;\n        long now = System.currentTimeMillis();\n        long end = now + timeout;\n        while ((obj = rdp (key)) != null &&\n                (now = System.currentTimeMillis()) < end)\n        {\n            try {\n                this.wait (Math.min(NRD_RESOLUTION, end - now));\n            } catch (InterruptedException ignored) { }\n        }\n        return (V) obj;\n    }\n    @SuppressWarnings(\"unchecked\")\n    public V inp (Object key) {\n        try {\n            return (V) getObject (key, true);\n        } catch (DatabaseException e) {\n            throw new SpaceError (e);\n        }\n    }\n    public boolean existAny (Object[] keys) {\n        for (Object key : keys) {\n            if (rdp(key) != null) {\n                return true;\n            }\n        }\n        return false;\n    }\n    public boolean existAny (Object[] keys, long timeout) {\n        long now = System.currentTimeMillis();\n        long end = now + timeout;\n        while ((now = System.currentTimeMillis()) < end) {\n            if (existAny (keys))\n                return true;\n            synchronized (this) {\n                try {\n                    wait (end - now);\n                } catch (InterruptedException ignored) { }\n            }\n        }\n        return false;\n    }\n    public synchronized void put (K key, V value, long timeout) {\n        while (inp (key) != null)\n            ;\n        out (key, value, timeout);\n    }\n    public synchronized void put (K key, V value) {\n        while (inp (key) != null)\n            ;\n        out (key, value);\n    }\n    public void gc () throws DatabaseException {\n        Transaction txn = null;\n        EntityCursor<GCRef> cursor = null;\n        try {\n            if (!gcSem.tryAcquire())\n                return;\n            txn = dbe.beginTransaction (null, null);\n            cursor = gcsIndex.entities (\n                txn, 0L, true, System.currentTimeMillis(), false, null\n            );\n            for (GCRef gcRef: cursor) {\n                pIndex.delete (gcRef.getId());\n                cursor.delete ();\n            }\n            cursor.close();\n            cursor = null;\n            txn.commit();\n            txn = null;\n            if (sl != null) {\n                synchronized (this) {\n                    if (sl != null && sl.getKeySet().isEmpty())\n                        sl = null;\n                }\n            }\n        } finally {\n            if (cursor != null)\n                cursor.close();\n            if (txn != null)\n                abort (txn);\n            gcSem.release();\n        }\n    }\n    public void run() {\n        try {\n            gc();\n        } catch (DatabaseException e) {\n            warn(e);\n        }\n    }\n    public void close () throws DatabaseException {\n        gcSem.acquireUninterruptibly();\n        gcTask.cancel(false);\n        while (!gcTask.isDone()) {\n            try {\n                Thread.sleep(500L);\n            } catch (InterruptedException ignored) { }\n        }\n        store.close ();\n        dbe.close();\n    }\n    public synchronized static JESpace getSpace (String name, String path)\n    {\n        JESpace sp = (JESpace) spaceRegistrar.get (name);\n        if (sp == null) {\nNext line of code:\n", "input": "", "context": "/*\n * jPOS Project [http://jpos.org]\n * Copyright (C) 2000-2015 Alejandro P. Revilla\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\npackage org.jpos.space;\nimport java.io.*;\nimport java.util.Map;\nimport java.util.HashMap;\nimport java.util.Set;\nimport java.util.concurrent.Future;\nimport java.util.concurrent.Semaphore;\nimport com.sleepycat.je.*;\nimport com.sleepycat.persist.EntityStore; \nimport com.sleepycat.persist.StoreConfig; \nimport com.sleepycat.persist.EntityCursor;\nimport com.sleepycat.persist.PrimaryIndex;\nimport com.sleepycat.persist.SecondaryIndex;\nimport com.sleepycat.persist.model.Entity;\nimport com.sleepycat.persist.model.Persistent;\nimport com.sleepycat.persist.model.PrimaryKey;\nimport com.sleepycat.persist.model.SecondaryKey;\nimport com.sleepycat.persist.model.Relationship;\nimport java.util.HashSet;\nimport java.util.concurrent.TimeUnit;\nimport org.jpos.util.Log;\nimport org.jpos.util.Loggeable;\n/**\n * BerkeleyDB Jave Edition based persistent space implementation\n *\n * @author Alejandro Revilla\n * @since 1.6.5\n */\n@SuppressWarnings(\"unchecked\")\npublic class JESpace<K,V> extends Log implements LocalSpace<K,V>, Loggeable, Runnable {\n    Environment dbe = null;\n    EntityStore store = null;\n    PrimaryIndex<Long, Ref> pIndex = null;\n    PrimaryIndex<Long,GCRef> gcpIndex = null;\n    SecondaryIndex<String,Long, Ref> sIndex = null;\n    SecondaryIndex<Long,Long,GCRef> gcsIndex = null;\n    Semaphore gcSem = new Semaphore(1);\n    LocalSpace<Object,SpaceListener> sl;\n    private static final long NRD_RESOLUTION = 500L;\n    public static final long GC_DELAY = 60*1000L;\n    private Future gcTask;\n    static final Map<String,Space> spaceRegistrar = \n        new HashMap<String,Space> ();\n    public JESpace(String name, String path) throws SpaceError {\n        super();\n        try {\n            EnvironmentConfig envConfig = new EnvironmentConfig();\n            StoreConfig storeConfig = new StoreConfig();\n            envConfig.setAllowCreate (true);\n            envConfig.setTransactional(true);\n            // envConfig.setTxnTimeout(5L, TimeUnit.MINUTES);\n            envConfig.setLockTimeout(5, TimeUnit.SECONDS);\n            storeConfig.setAllowCreate (true);\n            storeConfig.setTransactional (true);\n            File dir = new File(path);\n            dir.mkdirs();\n            dbe = new Environment (dir, envConfig);\n            store = new EntityStore (dbe, name, storeConfig);\n            pIndex = store.getPrimaryIndex (Long.class, Ref.class);\n            gcpIndex = store.getPrimaryIndex (Long.class, GCRef.class);\n            sIndex = store.getSecondaryIndex (pIndex, String.class, \"key\");\n            gcsIndex = store.getSecondaryIndex (gcpIndex, Long.class, \"expires\");\n            gcTask = SpaceFactory.getGCExecutor().scheduleAtFixedRate(this, GC_DELAY, GC_DELAY, TimeUnit.MILLISECONDS);\n        } catch (Exception e) {\n            throw new SpaceError (e);\n        }\n    }\n    public void out (K key, V value) {\n        out (key, value, 0L);\n    }\n    public void out (K key, V value, long timeout) {\n        Transaction txn = null;\n        try {\n            txn = dbe.beginTransaction (null, null);\n            Ref ref = new Ref(key.toString(), value, timeout);\n            pIndex.put (ref);\n            if (timeout > 0L)\n                gcpIndex.putNoReturn (\n                    new GCRef (ref.getId(), ref.getExpiration())\n                );\n            txn.commit();\n            txn = null;\n            synchronized (this) {\n                notifyAll ();\n            }\n            if (sl != null)\n                notifyListeners(key, value);\n        } catch (Exception e) {\n            throw new SpaceError (e);\n        } finally {\n            if (txn != null)\n                abort (txn);\n        }\n    }\n    public void push (K key, V value, long timeout) {\n        Transaction txn = null;\n        try {\n            txn = dbe.beginTransaction (null, null);\n            Ref ref = new Ref(key.toString(), value, timeout);\n            pIndex.put (ref);\n            pIndex.delete (ref.getId());\n            ref.reverseId();\n            pIndex.put (ref);\n            txn.commit();\n            txn = null;\n            synchronized (this) {\n                notifyAll ();\n            }\n            if (sl != null)\n                notifyListeners(key, value);\n        } catch (Exception e) {\n            throw new SpaceError (e);\n        } finally {\n            if (txn != null)\n                abort (txn);\n        }\n    }\n    public void push (K key, V value) {\n        push (key, value, 0L);\n    }\n    @SuppressWarnings(\"unchecked\")\n    public V rdp (Object key) {\n        try {\n            return (V) getObject (key, false);\n        } catch (DatabaseException e) {\n            throw new SpaceError (e);\n        }\n    }\n    @SuppressWarnings(\"unchecked\")\n    public synchronized V in (Object key) {\n        Object obj;\n        while ((obj = inp (key)) == null) {\n            try {\n                this.wait ();\n            } catch (InterruptedException ignored) { }\n        }\n        return (V) obj;\n    }\n    @SuppressWarnings(\"unchecked\")\n    public synchronized V in (Object key, long timeout) {\n        Object obj;\n        long now = System.currentTimeMillis();\n        long end = now + timeout;\n        while ((obj = inp (key)) == null &&\n                (now = System.currentTimeMillis()) < end)\n        {\n            try {\n                this.wait (end - now);\n            } catch (InterruptedException ignored) { }\n        }\n        return (V) obj;\n    }\n    @SuppressWarnings(\"unchecked\")\n    public synchronized V rd  (Object key) {\n        Object obj;\n        while ((obj = rdp (key)) == null) {\n            try {\n                this.wait ();\n            } catch (InterruptedException ignored) { }\n        }\n        return (V) obj;\n    }\n    @SuppressWarnings(\"unchecked\")\n    public synchronized V rd  (Object key, long timeout) {\n        Object obj;\n        long now = System.currentTimeMillis();\n        long end = now + timeout;\n        while ((obj = rdp (key)) == null &&\n                (now = System.currentTimeMillis()) < end)\n        {\n            try {\n                this.wait (end - now);\n            } catch (InterruptedException ignored) { }\n        }\n        return (V) obj;\n    }\n    public synchronized void nrd  (Object key) {\n        while (rdp (key) != null) {\n            try {\n                this.wait (NRD_RESOLUTION);\n            } catch (InterruptedException ignored) { }\n        }\n    }\n    public synchronized V nrd  (Object key, long timeout) {\n        Object obj;\n        long now = System.currentTimeMillis();\n        long end = now + timeout;\n        while ((obj = rdp (key)) != null &&\n                (now = System.currentTimeMillis()) < end)\n        {\n            try {\n                this.wait (Math.min(NRD_RESOLUTION, end - now));\n            } catch (InterruptedException ignored) { }\n        }\n        return (V) obj;\n    }\n    @SuppressWarnings(\"unchecked\")\n    public V inp (Object key) {\n        try {\n            return (V) getObject (key, true);\n        } catch (DatabaseException e) {\n            throw new SpaceError (e);\n        }\n    }\n    public boolean existAny (Object[] keys) {\n        for (Object key : keys) {\n            if (rdp(key) != null) {\n                return true;\n            }\n        }\n        return false;\n    }\n    public boolean existAny (Object[] keys, long timeout) {\n        long now = System.currentTimeMillis();\n        long end = now + timeout;\n        while ((now = System.currentTimeMillis()) < end) {\n            if (existAny (keys))\n                return true;\n            synchronized (this) {\n                try {\n                    wait (end - now);\n                } catch (InterruptedException ignored) { }\n            }\n        }\n        return false;\n    }\n    public synchronized void put (K key, V value, long timeout) {\n        while (inp (key) != null)\n            ;\n        out (key, value, timeout);\n    }\n    public synchronized void put (K key, V value) {\n        while (inp (key) != null)\n            ;\n        out (key, value);\n    }\n    public void gc () throws DatabaseException {\n        Transaction txn = null;\n        EntityCursor<GCRef> cursor = null;\n        try {\n            if (!gcSem.tryAcquire())\n                return;\n            txn = dbe.beginTransaction (null, null);\n            cursor = gcsIndex.entities (\n                txn, 0L, true, System.currentTimeMillis(), false, null\n            );\n            for (GCRef gcRef: cursor) {\n                pIndex.delete (gcRef.getId());\n                cursor.delete ();\n            }\n            cursor.close();\n            cursor = null;\n            txn.commit();\n            txn = null;\n            if (sl != null) {\n                synchronized (this) {\n                    if (sl != null && sl.getKeySet().isEmpty())\n                        sl = null;\n                }\n            }\n        } finally {\n            if (cursor != null)\n                cursor.close();\n            if (txn != null)\n                abort (txn);\n            gcSem.release();\n        }\n    }\n    public void run() {\n        try {\n            gc();\n        } catch (DatabaseException e) {\n            warn(e);\n        }\n    }\n    public void close () throws DatabaseException {\n        gcSem.acquireUninterruptibly();\n        gcTask.cancel(false);\n        while (!gcTask.isDone()) {\n            try {\n                Thread.sleep(500L);\n            } catch (InterruptedException ignored) { }\n        }\n        store.close ();\n        dbe.close();\n    }\n    public synchronized static JESpace getSpace (String name, String path)\n    {\n        JESpace sp = (JESpace) spaceRegistrar.get (name);\n        if (sp == null) {\n", "answers": ["            sp = new JESpace(name, path);"], "pred": "  Next line of code:\n  Next line of code:\n  Next line of code:\n  Next line of code:\n  Next line of code:\n  Next line of code:\n  Next line of code:\n  Next line of code:\n  Next line of code:\n  Next line of code:\n  Next line of", "length": 1096, "dataset": "lcc", "language": "java", "all_classes": null, "_id": "01b11dc980d93775ce16fd5e630cf5619f66f281ee12947b"}
{"prompt": "Please complete the code given below. \n/*\n * Pixel Dungeon\n * Copyright (C) 2012-2015 Oleg Dolya\n *\n * Shattered Pixel Dungeon\n * Copyright (C) 2014-2021 Evan Debenham\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>\n */\npackage com.shatteredpixel.shatteredpixeldungeon.items.spells;\nimport com.shatteredpixel.shatteredpixeldungeon.Assets;\nimport com.shatteredpixel.shatteredpixeldungeon.Dungeon;\nimport com.shatteredpixel.shatteredpixeldungeon.ShatteredPixelDungeon;\nimport com.shatteredpixel.shatteredpixeldungeon.actors.hero.Hero;\nimport com.shatteredpixel.shatteredpixeldungeon.actors.mobs.npcs.Shopkeeper;\nimport com.shatteredpixel.shatteredpixeldungeon.items.Item;\nimport com.shatteredpixel.shatteredpixeldungeon.items.potions.AlchemicalCatalyst;\nimport com.shatteredpixel.shatteredpixeldungeon.messages.Messages;\nimport com.shatteredpixel.shatteredpixeldungeon.scenes.AlchemyScene;\nimport com.shatteredpixel.shatteredpixeldungeon.scenes.GameScene;\nimport com.shatteredpixel.shatteredpixeldungeon.sprites.ItemSprite;\nimport com.shatteredpixel.shatteredpixeldungeon.sprites.ItemSpriteSheet;\nimport com.shatteredpixel.shatteredpixeldungeon.ui.RedButton;\nimport com.shatteredpixel.shatteredpixeldungeon.utils.GLog;\nimport com.shatteredpixel.shatteredpixeldungeon.windows.WndBag;\nimport com.shatteredpixel.shatteredpixeldungeon.windows.WndEnergizeItem;\nimport com.shatteredpixel.shatteredpixeldungeon.windows.WndImp;\nimport com.shatteredpixel.shatteredpixeldungeon.windows.WndInfoItem;\nimport com.shatteredpixel.shatteredpixeldungeon.windows.WndTradeItem;\nimport com.watabou.noosa.audio.Sample;\npublic class Alchemize extends Spell {\n\t\n\t{\n\t\timage = ItemSpriteSheet.ALCHEMIZE;\n\t}\n\t\n\t@Override\n\tprotected void onCast(Hero hero) {\n\t\tGameScene.selectItem( itemSelector );\n\t}\n\t\n\t@Override\n\tpublic int value() {\n\t\t//prices of ingredients, divided by output quantity\n\t\treturn Math.round(quantity * (40 / 8f));\n\t}\n\t//TODO also allow alchemical catalyst? Or save that for an elixir/brew?\n\tpublic static class Recipe extends com.shatteredpixel.shatteredpixeldungeon.items.Recipe.SimpleRecipe {\n\t\t{\n\t\t\tinputs =  new Class[]{ArcaneCatalyst.class};\n\t\t\tinQuantity = new int[]{1};\n\t\t\t\n\t\t\tcost = 3;\n\t\t\t\n\t\t\toutput = Alchemize.class;\n\t\t\toutQuantity = 8;\n\t\t}\n\t\t\n\t}\n\tprivate static WndBag.ItemSelector itemSelector = new WndBag.ItemSelector() {\n\t\t@Override\n\t\tpublic String textPrompt() {\n\t\t\treturn Messages.get(Alchemize.class, \"prompt\");\n\t\t}\n\t\t@Override\n\t\tpublic boolean itemSelectable(Item item) {\n\t\t\treturn !(item instanceof Alchemize)\n\t\t\t\t\t&& (Shopkeeper.canSell(item) || item.energyVal() > 0);\n\t\t}\n\t\t@Override\n\t\tpublic void onSelect( Item item ) {\n\t\t\tif (item != null) {\n\t\t\t\tWndBag parentWnd = GameScene.selectItem( itemSelector );\n\t\t\t\tGameScene.show( new WndAlchemizeItem( item, parentWnd ) );\n\t\t\t}\n\t\t}\n\t};\n\tpublic static class WndAlchemizeItem extends WndInfoItem {\n\t\tprivate static final float GAP\t\t= 2;\n\t\tprivate static final int BTN_HEIGHT\t= 18;\n\t\tprivate WndBag owner;\n\t\tpublic WndAlchemizeItem(Item item, WndBag owner) {\n\t\t\tsuper(item);\n\t\t\tthis.owner = owner;\n\t\t\tfloat pos = height;\n\t\t\tif (Shopkeeper.canSell(item)) {\n\t\t\t\tif (item.quantity() == 1) {\n\t\t\t\t\tRedButton btnSell = new RedButton(Messages.get(this, \"sell\", item.value())) {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tprotected void onClick() {\n\t\t\t\t\t\t\tWndTradeItem.sell(item);\n\t\t\t\t\t\t\tconsumeAlchemize();\n\t\t\t\t\t\t\thide();\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\tbtnSell.setRect(0, pos + GAP, width, BTN_HEIGHT);\n\t\t\t\t\tbtnSell.icon(new ItemSprite(ItemSpriteSheet.GOLD));\n\t\t\t\t\tadd(btnSell);\n\t\t\t\t\tpos = btnSell.bottom();\n\t\t\t\t} else {\n\t\t\t\t\tint priceAll = item.value();\n\t\t\t\t\tRedButton btnSell1 = new RedButton(Messages.get(this, \"sell_1\", priceAll / item.quantity())) {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tprotected void onClick() {\n\t\t\t\t\t\t\tWndTradeItem.sellOne(item);\n\t\t\t\t\t\t\tconsumeAlchemize();\n\t\t\t\t\t\t\thide();\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\tbtnSell1.setRect(0, pos + GAP, width, BTN_HEIGHT);\n\t\t\t\t\tbtnSell1.icon(new ItemSprite(ItemSpriteSheet.GOLD));\n\t\t\t\t\tadd(btnSell1);\n\t\t\t\t\tRedButton btnSellAll = new RedButton(Messages.get(this, \"sell_all\", priceAll)) {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tprotected void onClick() {\n\t\t\t\t\t\t\tWndTradeItem.sell(item);\n\t\t\t\t\t\t\tconsumeAlchemize();\n\t\t\t\t\t\t\thide();\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\tbtnSellAll.setRect(0, btnSell1.bottom() + 1, width, BTN_HEIGHT);\n\t\t\t\t\tbtnSellAll.icon(new ItemSprite(ItemSpriteSheet.GOLD));\n\t\t\t\t\tadd(btnSellAll);\n\t\t\t\t\tpos = btnSellAll.bottom();\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (item.energyVal() > 0) {\n\t\t\t\tif (item.quantity() == 1) {\n\t\t\t\t\tRedButton btnEnergize = new RedButton(Messages.get(this, \"energize\", item.energyVal())) {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tprotected void onClick() {\n\t\t\t\t\t\t\tWndEnergizeItem.energize(item);\n\t\t\t\t\t\t\tconsumeAlchemize();\n\t\t\t\t\t\t\thide();\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\tbtnEnergize.setRect(0, pos + GAP, width, BTN_HEIGHT);\n\t\t\t\t\tbtnEnergize.icon(new ItemSprite(ItemSpriteSheet.ENERGY));\n\t\t\t\t\tadd(btnEnergize);\n\t\t\t\t\tpos = btnEnergize.bottom();\n\t\t\t\t} else {\n\t\t\t\t\tint energyAll = item.energyVal();\n\t\t\t\t\tRedButton btnEnergize1 = new RedButton(Messages.get(this, \"energize_1\", energyAll / item.quantity())) {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tprotected void onClick() {\n\t\t\t\t\t\t\tWndEnergizeItem.energizeOne(item);\n\t\t\t\t\t\t\tconsumeAlchemize();\n\t\t\t\t\t\t\thide();\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\tbtnEnergize1.setRect(0, pos + GAP, width, BTN_HEIGHT);\n\t\t\t\t\tbtnEnergize1.icon(new ItemSprite(ItemSpriteSheet.ENERGY));\n\t\t\t\t\tadd(btnEnergize1);\n\t\t\t\t\tRedButton btnEnergizeAll = new RedButton(Messages.get(this, \"energize_all\", energyAll)) {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tprotected void onClick() {\n\t\t\t\t\t\t\tWndEnergizeItem.energize(item);\n\t\t\t\t\t\t\tconsumeAlchemize();\n\t\t\t\t\t\t\thide();\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\tbtnEnergizeAll.setRect(0, btnEnergize1.bottom() + 1, width, BTN_HEIGHT);\n\t\t\t\t\tbtnEnergizeAll.icon(new ItemSprite(ItemSpriteSheet.ENERGY));\n\t\t\t\t\tadd(btnEnergizeAll);\nNext line of code:\n", "input": "", "context": "/*\n * Pixel Dungeon\n * Copyright (C) 2012-2015 Oleg Dolya\n *\n * Shattered Pixel Dungeon\n * Copyright (C) 2014-2021 Evan Debenham\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>\n */\npackage com.shatteredpixel.shatteredpixeldungeon.items.spells;\nimport com.shatteredpixel.shatteredpixeldungeon.Assets;\nimport com.shatteredpixel.shatteredpixeldungeon.Dungeon;\nimport com.shatteredpixel.shatteredpixeldungeon.ShatteredPixelDungeon;\nimport com.shatteredpixel.shatteredpixeldungeon.actors.hero.Hero;\nimport com.shatteredpixel.shatteredpixeldungeon.actors.mobs.npcs.Shopkeeper;\nimport com.shatteredpixel.shatteredpixeldungeon.items.Item;\nimport com.shatteredpixel.shatteredpixeldungeon.items.potions.AlchemicalCatalyst;\nimport com.shatteredpixel.shatteredpixeldungeon.messages.Messages;\nimport com.shatteredpixel.shatteredpixeldungeon.scenes.AlchemyScene;\nimport com.shatteredpixel.shatteredpixeldungeon.scenes.GameScene;\nimport com.shatteredpixel.shatteredpixeldungeon.sprites.ItemSprite;\nimport com.shatteredpixel.shatteredpixeldungeon.sprites.ItemSpriteSheet;\nimport com.shatteredpixel.shatteredpixeldungeon.ui.RedButton;\nimport com.shatteredpixel.shatteredpixeldungeon.utils.GLog;\nimport com.shatteredpixel.shatteredpixeldungeon.windows.WndBag;\nimport com.shatteredpixel.shatteredpixeldungeon.windows.WndEnergizeItem;\nimport com.shatteredpixel.shatteredpixeldungeon.windows.WndImp;\nimport com.shatteredpixel.shatteredpixeldungeon.windows.WndInfoItem;\nimport com.shatteredpixel.shatteredpixeldungeon.windows.WndTradeItem;\nimport com.watabou.noosa.audio.Sample;\npublic class Alchemize extends Spell {\n\t\n\t{\n\t\timage = ItemSpriteSheet.ALCHEMIZE;\n\t}\n\t\n\t@Override\n\tprotected void onCast(Hero hero) {\n\t\tGameScene.selectItem( itemSelector );\n\t}\n\t\n\t@Override\n\tpublic int value() {\n\t\t//prices of ingredients, divided by output quantity\n\t\treturn Math.round(quantity * (40 / 8f));\n\t}\n\t//TODO also allow alchemical catalyst? Or save that for an elixir/brew?\n\tpublic static class Recipe extends com.shatteredpixel.shatteredpixeldungeon.items.Recipe.SimpleRecipe {\n\t\t{\n\t\t\tinputs =  new Class[]{ArcaneCatalyst.class};\n\t\t\tinQuantity = new int[]{1};\n\t\t\t\n\t\t\tcost = 3;\n\t\t\t\n\t\t\toutput = Alchemize.class;\n\t\t\toutQuantity = 8;\n\t\t}\n\t\t\n\t}\n\tprivate static WndBag.ItemSelector itemSelector = new WndBag.ItemSelector() {\n\t\t@Override\n\t\tpublic String textPrompt() {\n\t\t\treturn Messages.get(Alchemize.class, \"prompt\");\n\t\t}\n\t\t@Override\n\t\tpublic boolean itemSelectable(Item item) {\n\t\t\treturn !(item instanceof Alchemize)\n\t\t\t\t\t&& (Shopkeeper.canSell(item) || item.energyVal() > 0);\n\t\t}\n\t\t@Override\n\t\tpublic void onSelect( Item item ) {\n\t\t\tif (item != null) {\n\t\t\t\tWndBag parentWnd = GameScene.selectItem( itemSelector );\n\t\t\t\tGameScene.show( new WndAlchemizeItem( item, parentWnd ) );\n\t\t\t}\n\t\t}\n\t};\n\tpublic static class WndAlchemizeItem extends WndInfoItem {\n\t\tprivate static final float GAP\t\t= 2;\n\t\tprivate static final int BTN_HEIGHT\t= 18;\n\t\tprivate WndBag owner;\n\t\tpublic WndAlchemizeItem(Item item, WndBag owner) {\n\t\t\tsuper(item);\n\t\t\tthis.owner = owner;\n\t\t\tfloat pos = height;\n\t\t\tif (Shopkeeper.canSell(item)) {\n\t\t\t\tif (item.quantity() == 1) {\n\t\t\t\t\tRedButton btnSell = new RedButton(Messages.get(this, \"sell\", item.value())) {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tprotected void onClick() {\n\t\t\t\t\t\t\tWndTradeItem.sell(item);\n\t\t\t\t\t\t\tconsumeAlchemize();\n\t\t\t\t\t\t\thide();\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\tbtnSell.setRect(0, pos + GAP, width, BTN_HEIGHT);\n\t\t\t\t\tbtnSell.icon(new ItemSprite(ItemSpriteSheet.GOLD));\n\t\t\t\t\tadd(btnSell);\n\t\t\t\t\tpos = btnSell.bottom();\n\t\t\t\t} else {\n\t\t\t\t\tint priceAll = item.value();\n\t\t\t\t\tRedButton btnSell1 = new RedButton(Messages.get(this, \"sell_1\", priceAll / item.quantity())) {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tprotected void onClick() {\n\t\t\t\t\t\t\tWndTradeItem.sellOne(item);\n\t\t\t\t\t\t\tconsumeAlchemize();\n\t\t\t\t\t\t\thide();\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\tbtnSell1.setRect(0, pos + GAP, width, BTN_HEIGHT);\n\t\t\t\t\tbtnSell1.icon(new ItemSprite(ItemSpriteSheet.GOLD));\n\t\t\t\t\tadd(btnSell1);\n\t\t\t\t\tRedButton btnSellAll = new RedButton(Messages.get(this, \"sell_all\", priceAll)) {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tprotected void onClick() {\n\t\t\t\t\t\t\tWndTradeItem.sell(item);\n\t\t\t\t\t\t\tconsumeAlchemize();\n\t\t\t\t\t\t\thide();\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\tbtnSellAll.setRect(0, btnSell1.bottom() + 1, width, BTN_HEIGHT);\n\t\t\t\t\tbtnSellAll.icon(new ItemSprite(ItemSpriteSheet.GOLD));\n\t\t\t\t\tadd(btnSellAll);\n\t\t\t\t\tpos = btnSellAll.bottom();\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (item.energyVal() > 0) {\n\t\t\t\tif (item.quantity() == 1) {\n\t\t\t\t\tRedButton btnEnergize = new RedButton(Messages.get(this, \"energize\", item.energyVal())) {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tprotected void onClick() {\n\t\t\t\t\t\t\tWndEnergizeItem.energize(item);\n\t\t\t\t\t\t\tconsumeAlchemize();\n\t\t\t\t\t\t\thide();\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\tbtnEnergize.setRect(0, pos + GAP, width, BTN_HEIGHT);\n\t\t\t\t\tbtnEnergize.icon(new ItemSprite(ItemSpriteSheet.ENERGY));\n\t\t\t\t\tadd(btnEnergize);\n\t\t\t\t\tpos = btnEnergize.bottom();\n\t\t\t\t} else {\n\t\t\t\t\tint energyAll = item.energyVal();\n\t\t\t\t\tRedButton btnEnergize1 = new RedButton(Messages.get(this, \"energize_1\", energyAll / item.quantity())) {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tprotected void onClick() {\n\t\t\t\t\t\t\tWndEnergizeItem.energizeOne(item);\n\t\t\t\t\t\t\tconsumeAlchemize();\n\t\t\t\t\t\t\thide();\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\tbtnEnergize1.setRect(0, pos + GAP, width, BTN_HEIGHT);\n\t\t\t\t\tbtnEnergize1.icon(new ItemSprite(ItemSpriteSheet.ENERGY));\n\t\t\t\t\tadd(btnEnergize1);\n\t\t\t\t\tRedButton btnEnergizeAll = new RedButton(Messages.get(this, \"energize_all\", energyAll)) {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tprotected void onClick() {\n\t\t\t\t\t\t\tWndEnergizeItem.energize(item);\n\t\t\t\t\t\t\tconsumeAlchemize();\n\t\t\t\t\t\t\thide();\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\tbtnEnergizeAll.setRect(0, btnEnergize1.bottom() + 1, width, BTN_HEIGHT);\n\t\t\t\t\tbtnEnergizeAll.icon(new ItemSprite(ItemSpriteSheet.ENERGY));\n\t\t\t\t\tadd(btnEnergizeAll);\n", "answers": ["\t\t\t\t\tpos = btnEnergizeAll.bottom();"], "pred": "  add(EnergizeAll, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,", "length": 567, "dataset": "lcc", "language": "java", "all_classes": null, "_id": "64d5f26d486a85e85284229e8d254f996cfafd844cd321c5"}
